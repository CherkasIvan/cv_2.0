{
    "pipes": [],
    "interfaces": [
        {
            "name": "DarkModeState",
            "id": "interface-DarkModeState-dbbd5d67525d54a005369842ba35e7218c7e1028beb99ce4f856760c58ffce4e182fdb18786bf985c5b2b879b8823c672746669f38af5a806bf9738c890c8850",
            "file": "src/app/layout/store/dark-mode-store/dark-mode.reducers.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createReducer, on } from '@ngrx/store';\r\n\r\nimport { setModeSuccess } from './dark-mode.actions';\r\n\r\nexport interface DarkModeState {\r\n    isDark: boolean;\r\n}\r\n\r\nexport const initialDarkModeState: DarkModeState = {\r\n    isDark: false,\r\n};\r\n\r\nexport const darkModeReducer = createReducer(\r\n    initialDarkModeState,\r\n    on(setModeSuccess, (state, { isDark }) => ({\r\n        ...state,\r\n        isDark,\r\n    })),\r\n);\r\n",
            "properties": [
                {
                    "name": "isDark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "FirebaseState",
            "id": "interface-FirebaseState-60efba2382eb4f76f8bb3561e0bb8910fc687e627cc6fae1b72aec295e1cf44689fe5a0a10c5b0db2da6b03b39a9b370ce15e523154b6a6354dfe8bcdd9c6888",
            "file": "src/app/layout/store/firebase-store/firebase.reducers.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createReducer, on } from '@ngrx/store';\r\n\r\nimport { TExperienceAside } from '@core/models/experience-aside.type';\r\nimport { IExperience } from '@core/models/experience.interface';\r\nimport { IMainPageInfo } from '@core/models/main-page-info';\r\nimport { INavigation } from '@core/models/navigation.interface';\r\nimport { ISocialMedia } from '@core/models/social-media.interface';\r\nimport { TTechnologiesAside } from '@core/models/technologies-aside.type';\r\nimport { ITechnologies } from '@core/models/technologies.interface';\r\n\r\nimport { FirebaseActions } from './firebase.actions';\r\n\r\nexport interface FirebaseState {\r\n    navigation: INavigation[];\r\n    socialMediaLinks: ISocialMedia[];\r\n    workExperience: IExperience[];\r\n    frontendTech: ITechnologies[];\r\n    backendTech: ITechnologies[];\r\n    otherTech: ITechnologies[];\r\n    hardSkillsNav: INavigation[];\r\n    education: IExperience[];\r\n    mainPageInfo: IMainPageInfo | null;\r\n    experienceAside: TExperienceAside[];\r\n    technologiesAside: TTechnologiesAside[];\r\n    error: Error | null;\r\n}\r\n\r\nexport const initialFirebaseState: FirebaseState = {\r\n    navigation: [],\r\n    socialMediaLinks: [],\r\n    workExperience: [],\r\n    frontendTech: [],\r\n    backendTech: [],\r\n    otherTech: [],\r\n    hardSkillsNav: [],\r\n    education: [],\r\n    mainPageInfo: null,\r\n    experienceAside: [],\r\n    technologiesAside: [],\r\n    error: null,\r\n};\r\n\r\nexport const firebaseReducer = createReducer(\r\n    initialFirebaseState,\r\n    on(FirebaseActions.getNavigationSuccess, (state, { navigation }) => ({\r\n        ...state,\r\n        navigation,\r\n    })),\r\n    on(FirebaseActions.getNavigationError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(\r\n        FirebaseActions.getSocialMediaSuccess,\r\n        (state, { socialMediaLinks }) => ({\r\n            ...state,\r\n            socialMediaLinks,\r\n        }),\r\n    ),\r\n    on(FirebaseActions.getSocialMediaError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(\r\n        FirebaseActions.getWorkExperienceSuccess,\r\n        (state, { workExperience }) => ({\r\n            ...state,\r\n            workExperience,\r\n        }),\r\n    ),\r\n    on(FirebaseActions.getWorkExperienceError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(FirebaseActions.getFrontendTechSuccess, (state, { frontendTech }) => ({\r\n        ...state,\r\n        frontendTech,\r\n    })),\r\n    on(FirebaseActions.getFrontendTechError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(FirebaseActions.getBackendTechSuccess, (state, { backendTech }) => ({\r\n        ...state,\r\n        backendTech,\r\n    })),\r\n    on(FirebaseActions.getBackendTechError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(FirebaseActions.getOtherTechSuccess, (state, { otherTech }) => ({\r\n        ...state,\r\n        otherTech,\r\n    })),\r\n    on(FirebaseActions.getOtherTechError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(FirebaseActions.getHardSkillsNavSuccess, (state, { hardSkillsNav }) => ({\r\n        ...state,\r\n        hardSkillsNav,\r\n    })),\r\n    on(FirebaseActions.getHardSkillsNavError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(FirebaseActions.getEducationPlacesSuccess, (state, { education }) => ({\r\n        ...state,\r\n        education,\r\n    })),\r\n    on(FirebaseActions.getEducationPlacesError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(FirebaseActions.getMainPageInfoSuccess, (state, { mainPageInfo }) => ({\r\n        ...state,\r\n        mainPageInfo,\r\n    })),\r\n    on(FirebaseActions.getMainPageInfoError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(\r\n        FirebaseActions.getTechnologiesAsideSuccess,\r\n        (state, { technologiesAside }) => ({\r\n            ...state,\r\n            technologiesAside,\r\n        }),\r\n    ),\r\n    on(FirebaseActions.getTechnologiesAsideError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(\r\n        FirebaseActions.getExperienceAsideSuccess,\r\n        (state, { experienceAside }) => ({\r\n            ...state,\r\n            experienceAside,\r\n        }),\r\n    ),\r\n    on(FirebaseActions.getExperienceAsideError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n);\r\n",
            "properties": [
                {
                    "name": "backendTech",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITechnologies[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "education",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IExperience[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Error | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "experienceAside",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TExperienceAside[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "frontendTech",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITechnologies[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "hardSkillsNav",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INavigation[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "mainPageInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMainPageInfo | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "navigation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INavigation[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "otherTech",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITechnologies[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "socialMediaLinks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ISocialMedia[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "technologiesAside",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TTechnologiesAside[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "workExperience",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IExperience[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "GlobalState",
            "id": "interface-GlobalState-7558a0c3fb540e9215f17345a11e67fb2c33ce5e8c7c13a218c604cc651afb66aee6dfe3ac52ff40692cfaeb3f1b8067698d57e7e413f6d0e861aa91d1d34a1e",
            "file": "src/app/layout/store/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nimport { darkModeReducer } from './dark-mode-store/dark-mode.reducers';\r\nimport { languageReducer } from './language-selector-store/language.reducers';\r\nimport { spinnerReducer } from './spinner-store/spinner.reducer';\r\n\r\nexport interface GlobalState {\r\n    isSpinnerOn: boolean;\r\n    isDark: boolean;\r\n    language: 'ru' | 'en';\r\n}\r\n\r\nexport const globalSetReducersKey = 'globalSetReducers';\r\n\r\nexport function globalSetReducers(\r\n    state: GlobalState | undefined,\r\n    action: Action,\r\n): GlobalState {\r\n    return {\r\n        isDark: state\r\n            ? darkModeReducer({ isDark: state.isDark }, action).isDark\r\n            : false,\r\n        isSpinnerOn: state\r\n            ? spinnerReducer({ isSpinnerOn: state.isSpinnerOn }, action)\r\n                  .isSpinnerOn\r\n            : false,\r\n        language: state\r\n            ? languageReducer({ language: state.language }, action).language\r\n            : 'ru',\r\n    };\r\n}\r\n",
            "properties": [
                {
                    "name": "isDark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "isSpinnerOn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "language",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"ru\" | \"en\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IContacts",
            "id": "interface-IContacts-df88da88ff3d0fd0a314629f2ea27e47674596c4d24d5b1531bf3d86101c1c79c7b03bd258ff370365e0bbeb10b78523197018ce2e4ebca5986c4b0c7a5a051e",
            "file": "src/app/core/models/contacts.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IContacts {\r\n    id: string;\r\n    contactName: string;\r\n    path: string;\r\n    value: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "contactName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ICvFormat",
            "id": "interface-ICvFormat-c9755e039ebcc9bb89444edcb38dbcae87191ab085412c59638408c51cf8e6b66df116dd325ebbffc62493ce5dbeb39896f442b50b3a75536cb6bd3dbc00039d",
            "file": "src/app/core/models/cv-format.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ICvFormat {\r\n    id: string;\r\n    download_path: string;\r\n    img_name: string;\r\n    img_path: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "download_path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "img_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "img_path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IEducationPlaceName",
            "id": "interface-IEducationPlaceName-25c24dffa0b6fe5917884c0a180db4259be1a7b318973d4cfd788afdee3ca5d79ac4faabd9ea0d62862cd504eae27162a7298be87776a0b0eda25fc93c79d261",
            "file": "src/app/core/models/education-place-name.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IEducationPlaceName {\r\n    // id: string need to be added when we will have fdb\r\n    name: string;\r\n    link: string;\r\n    address: string;\r\n    phone: string;\r\n    grade?: string;\r\n    certificatePath?: string;\r\n    certificateLink?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "certificateLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "certificatePath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "grade",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IExperience",
            "id": "interface-IExperience-3151ac2ef9b38c1e312edfa85df728e38ff0220814e2ac28cc69ea067c2e30936e0172aa27d1946fd2eed3aa7cd420762fbd8391b37f0eda87b89bca03784e7b",
            "file": "src/app/core/models/experience.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IExperience {\r\n    id: string;\r\n    logoPath: string;\r\n    company: string;\r\n    from: string;\r\n    to: string;\r\n    place: string;\r\n    link: string;\r\n    specialization: string;\r\n    workTime?: string;\r\n    imgName: string;\r\n    images?: string[];\r\n}\r\n",
            "properties": [
                {
                    "name": "company",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "from",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "images",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "imgName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "logoPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "place",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "specialization",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "to",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "workTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IFileUpload",
            "id": "interface-IFileUpload-bc008259f4be09ddb1902ea2b89bd25b4364926bbcc018615f3e8b93106fe74ef9478e584e2e6eb5ead2b603b8e75a9d49cefa359ab089f5fac4d74c61d56e48",
            "file": "src/app/core/models/file-upload.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IFileUpload {\r\n    key: string;\r\n    name: string;\r\n    url: string;\r\n    file: File | null;\r\n}\r\n",
            "properties": [
                {
                    "name": "file",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IGitHubRepository",
            "id": "interface-IGitHubRepository-497ecf32e16218095b026cdeb63c70b973ad3d5b964075177ce92ec8cb1eb713b3d3343831a69e9160994eb5f138053a787cb5c25febc21936cf307ab64433d1",
            "file": "src/app/core/models/github-repository.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IGitHubRepository {\r\n    allow_forking: boolean;\r\n    archive_url: string;\r\n    archived: boolean;\r\n    assignees_url: string;\r\n    blobs_url: string;\r\n    branches_url: string;\r\n    clone_url: string;\r\n    collaborators_url: string;\r\n    comments_url: string;\r\n    commits_url: string;\r\n    compare_url: string;\r\n    contents_url: string;\r\n    contributors_url: string;\r\n    created_at: string;\r\n    default_branch: string;\r\n    deployments_url: string;\r\n    description: string | null;\r\n    disabled: boolean;\r\n    downloads_url: string;\r\n    events_url: string;\r\n    fork: boolean;\r\n    forks: number;\r\n    forks_count: number;\r\n    forks_url: string;\r\n    full_name: string;\r\n    git_commits_url: string;\r\n    git_refs_url: string;\r\n    git_tags_url: string;\r\n    git_url: string;\r\n    has_discussions: boolean;\r\n    has_downloads: boolean;\r\n    has_issues: boolean;\r\n    has_pages: boolean;\r\n    has_projects: boolean;\r\n    has_wiki: boolean;\r\n    homepage: string | null;\r\n    hooks_url: string;\r\n    html_url: string;\r\n    id: number;\r\n    is_template: boolean;\r\n    issue_comment_url: string;\r\n    issue_events_url: string;\r\n    issues_url: string;\r\n    keys_url: string;\r\n    labels_url: string;\r\n    language: string;\r\n    languages_url: string;\r\n    license: string | null;\r\n    merges_url: string;\r\n    milestones_url: string;\r\n    mirror_url: string | null;\r\n    name: string;\r\n    node_id: string;\r\n    notifications_url: string;\r\n    open_issues: number;\r\n    open_issues_count: number;\r\n    owner: {\r\n        avatar_url: string;\r\n        events_url: string;\r\n        followers_url: string;\r\n        following_url: string;\r\n        gists_url: string;\r\n        gravatar_id: string;\r\n        html_url: string;\r\n        id: number;\r\n        login: string;\r\n        node_id: string;\r\n        organizations_url: string;\r\n        received_events_url: string;\r\n        repos_url: string;\r\n        site_admin: string;\r\n        starred_url: string;\r\n        subscriptions_url: string;\r\n        type: string;\r\n        url: string;\r\n    };\r\n    private: boolean;\r\n    pulls_url: string;\r\n    pushed_at: string;\r\n    releases_url: string;\r\n    size: number;\r\n    ssh_url: string;\r\n    stargazers_count: number;\r\n    stargazers_url: string;\r\n    statuses_url: string;\r\n    subscribers_url: string;\r\n    subscription_url: string;\r\n    svn_url: string;\r\n    tags_url: string;\r\n    teams_url: string;\r\n    topics: string[];\r\n    trees_url: string;\r\n    updated_at: string;\r\n    url: string;\r\n    visibility: string;\r\n    watchers: number;\r\n    watchers_count: number;\r\n    web_commit_signoff_required: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "allow_forking",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "archive_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "archived",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "assignees_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "blobs_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "branches_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "clone_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "collaborators_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "comments_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "commits_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "compare_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "contents_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "contributors_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "created_at",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "default_branch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "deployments_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "downloads_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "events_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "fork",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "forks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "forks_count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "forks_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "full_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "git_commits_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "git_refs_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "git_tags_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "git_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "has_discussions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "has_downloads",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "has_issues",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "has_pages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "has_projects",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "has_wiki",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "homepage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "hooks_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "html_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "is_template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "issue_comment_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "issue_events_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "issues_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "keys_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "labels_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "language",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "languages_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "license",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "merges_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "milestones_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "mirror_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "node_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "notifications_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "open_issues",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "open_issues_count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "owner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "private",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "pulls_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "pushed_at",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "releases_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "ssh_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "stargazers_count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "stargazers_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "statuses_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "subscribers_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "subscription_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "svn_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "tags_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "teams_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "topics",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "trees_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "updated_at",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "visibility",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "watchers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "watchers_count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 98
                },
                {
                    "name": "web_commit_signoff_required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 99
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ILogoutButton",
            "id": "interface-ILogoutButton-3dee66e59501ef98c94eee6bc4a7390aa455da4f507cd34f768aabd31022ed7e666da79dd17e78c58ac08345fb7cf2e9916d584f0c4316c400a98e785bbc841c",
            "file": "src/app/layout/store/model/logout-button.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ILogoutButton {\r\n    isLogout: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "isLogout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IMainPageInfo",
            "id": "interface-IMainPageInfo-97e00b47d5e34d8091effc6ee455987a8ee12d002167282e8ea3c16965a23f7e2d636bc53ec464c7cc8e2a3617268d1cb877f4be15c81e840348fcf542d45c28",
            "file": "src/app/core/models/main-page-info.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMainPageInfo {\r\n    id: string;\r\n    buttonHoverText: string | undefined;\r\n    buttonText: string | undefined;\r\n    description: string;\r\n    fullName: string;\r\n    imgSrc: string;\r\n    stack: string;\r\n    status: string;\r\n    imgName: string;\r\n    images?: string[];\r\n}\r\n",
            "properties": [
                {
                    "name": "buttonHoverText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "buttonText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "fullName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "images",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "imgName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "imgSrc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "stack",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "INavigation",
            "id": "interface-INavigation-b99b23c27553246df5bde615c202d527b6380afdb496b187e4e55b52db8b072adf5359f5e4eac5f6563659de89fc4874e1af4b66e9a31ee767f0a6d9559a0a95",
            "file": "src/app/core/models/navigation.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface INavigation {\r\n    id: string;\r\n    link: string;\r\n    position: number;\r\n    value: string;\r\n    imgName: string;\r\n    images?: string[];\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "images",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "imgName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IProfilePhoto",
            "id": "interface-IProfilePhoto-032c39a3383d0fc9ff0a93c314cbe613336e57c43ba778648fc79501211a385338f572d03c3bf03716704d1379c14c77110b7864daaa37ca924610cb93c484c5",
            "file": "src/app/core/models/profile-photo.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IProfilePhoto {\r\n    id: string;\r\n    slideNumber: string;\r\n    src: string;\r\n    title: string;\r\n    subtitle: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "slideNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "src",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "subtitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ISnackbar",
            "id": "interface-ISnackbar-52021e2467b1a998561720fb1fea82004fb40b76fd408393ee41aaf706e159b52a3ed3b1d8895f25520ba23d2a91f61d895d2941f9da839f9f289e46038d2930",
            "file": "src/app/core/models/snackbar.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ISnackbar {\r\n    message: string;\r\n    isSuccess: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "isSuccess",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ISocialMedia",
            "id": "interface-ISocialMedia-ad6d916014084ae60e5aed9a06ebc301c52b9a712865022e4e906c77e100a2b587a8c6ff599140e7e6c16de2a0a7cfdf3c5ad574a2ab9700b2be781a98157259",
            "file": "src/app/core/models/social-media.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ISocialMedia {\r\n    images?: string[];\r\n    id: string;\r\n    link: string;\r\n    value: string;\r\n    imgName: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "images",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "imgName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ISpinner",
            "id": "interface-ISpinner-751d73f6201f9d814be2f82ec2dff1ccec61a70731570143b12d816a6254a12b16456f60518ff3fd6235018e56a513fe65db4891fc2a1e5ce85f7ac330b8be2d",
            "file": "src/app/layout/store/model/spinner.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ISpinner {\r\n    isSpinnerOn: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "isSpinnerOn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ITechnologies",
            "id": "interface-ITechnologies-183c2fe636508b272f76082566bffbccf57a31a1a6aaa8674a265260c02560f6fa5f960441307aed9de36391c449aaf653316b24c506f1492d009265aa979801",
            "file": "src/app/core/models/technologies.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ITechnologies {\r\n    alt: string;\r\n    iconPath: string;\r\n    id: string;\r\n    link: string;\r\n    technologyName: string;\r\n    imgName: string;\r\n    images?: string[];\r\n}\r\n",
            "properties": [
                {
                    "name": "alt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "iconPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "images",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "imgName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "technologyName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ITotalWorkTime",
            "id": "interface-ITotalWorkTime-704d115fcdd51ec7f73eb0e3691f2fe9a513e441c87f00086361abde31c933991a4509ef31872aa309a0a848538bbc013826c78e46ebaebc8a7691d8cd64f765",
            "file": "src/app/core/models/total-work-time.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ITotalWorkTime {\r\n    years: number;\r\n    yearsLabel?: string;\r\n    months: number;\r\n    monthsLabel?: string;\r\n    days: number;\r\n    daysLabel?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "days",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "daysLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "months",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "monthsLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "years",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "yearsLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "LanguageState",
            "id": "interface-LanguageState-14b48e88c4da89dfab896bbfd7f2b4e8575f8b04e32cf5f792f1b57424a392a55d75658c4d2a887dde11ca0e3ec4b29b930028be67909f87ed96e6e71d78e056",
            "file": "src/app/layout/store/model/language-state.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface LanguageState {\r\n    language: 'ru' | 'en';\r\n}\r\n",
            "properties": [
                {
                    "name": "language",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"ru\" | \"en\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "LogoState",
            "id": "interface-LogoState-9425110b907ea6ad14951348d47a2492e1a48e70e8b96d06a4176fdc2222b6a46be1687d431fddc474af4c1177724776de05adaa12a9561e424690317f3b92c7",
            "file": "src/app/layout/store/images-store/images.reducers.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createReducer, on } from '@ngrx/store';\r\n\r\nimport { ImagesActions } from './images.actions';\r\n\r\nexport interface LogoState {\r\n    imageUrl: string;\r\n    profileImageUrl: string;\r\n    closeImageUrl: string;\r\n    darkModeImages: string[];\r\n    whiteModeImages: string[];\r\n    error: any;\r\n}\r\n\r\nexport const initialState: LogoState = {\r\n    imageUrl: '',\r\n    profileImageUrl: '',\r\n    closeImageUrl: '',\r\n    darkModeImages: [],\r\n    whiteModeImages: [],\r\n    error: null,\r\n};\r\n\r\nexport const logoReducer = createReducer(\r\n    initialState,\r\n    on(ImagesActions.getLogoSuccess, (state, { imageUrl }) => ({\r\n        ...state,\r\n        imageUrl,\r\n        error: null,\r\n    })),\r\n    on(ImagesActions.getLogoFailure, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(ImagesActions.getProfileImgSuccess, (state, { imageUrl }) => ({\r\n        ...state,\r\n        profileImageUrl: imageUrl,\r\n        error: null,\r\n    })),\r\n    on(ImagesActions.getProfileImgFailure, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(ImagesActions.getCloseImgSuccess, (state, { imageUrl }) => ({\r\n        ...state,\r\n        closeImageUrl: imageUrl,\r\n        error: null,\r\n    })),\r\n    on(ImagesActions.getCloseImgFailure, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(\r\n        ImagesActions.loadThemelessPicturesImagesSuccess,\r\n        (state, { darkModeImages, whiteModeImages }) => ({\r\n            ...state,\r\n            darkModeImages,\r\n            whiteModeImages,\r\n            error: null,\r\n        }),\r\n    ),\r\n    on(\r\n        ImagesActions.loadThemelessPicturesImagesFailure,\r\n        (state, { error }) => ({\r\n            ...state,\r\n            error,\r\n        }),\r\n    ),\r\n    on(ImagesActions.setDarkModeImages, (state, { images }) => ({\r\n        ...state,\r\n        darkModeImages: images,\r\n    })),\r\n    on(ImagesActions.setWhiteModeImages, (state, { images }) => ({\r\n        ...state,\r\n        whiteModeImages: images,\r\n    })),\r\n);\r\n",
            "properties": [
                {
                    "name": "closeImageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "darkModeImages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "imageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "profileImageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "whiteModeImages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ModalState",
            "id": "interface-ModalState-e8b502fda23c476af42227b52342247d25d3ffe8f4fd10d355ac97d6b0cd33cdca8716192c9190ab7006591a45c0a5ab08954e5784cf4dcd4cd5891f34c2fda0",
            "file": "src/app/layout/store/experience-dialog-store/experience-dialog.reducers.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createReducer, on } from '@ngrx/store';\r\n\r\nimport { IExperience } from '@core/models/experience.interface';\r\n\r\nimport { ExperienceActions } from './experience-dialog.actions';\r\n\r\nexport interface ModalState {\r\n    isOpen: boolean;\r\n    data: IExperience | null;\r\n}\r\n\r\nexport const initialState: ModalState = {\r\n    isOpen: false,\r\n    data: null,\r\n};\r\n\r\nexport const experienceDialogReducer = createReducer(\r\n    initialState,\r\n    on(ExperienceActions.getExperienceDialogOpen, (state, { data }) => ({\r\n        ...state,\r\n        isOpen: true,\r\n        data,\r\n    })),\r\n    on(ExperienceActions.getExperienceDialogClosed, (state) => ({\r\n        ...state,\r\n        isOpen: false,\r\n        data: null,\r\n    })),\r\n);\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IExperience | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "isOpen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "ApiService",
            "id": "injectable-ApiService-2736983468554b7729a8d221b427e92670bf1dc892983035e48ecf99c4831d966bd831f2c8c8a533ae2347d1498a84e3705a4d6a4dd8f894b0d4d2c2737139ef",
            "file": "src/app/core/service/api/api.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "'http://localhost:3000'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getBackendTech",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ITechnologies[]>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getEducationPlaces",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IExperience[]>",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getExperienceAside",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<TExperienceAside[]>",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFrontendTech",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ITechnologies[]>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getHardSkillsNav",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<INavigation[]>",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getImages",
                    "args": [
                        {
                            "name": "folder",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "searchParam",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<[] | undefined>",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "folder",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "searchParam",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMainPageInfo",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IMainPageInfo>",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getNavigation",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<INavigation[]>",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getOtherTech",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ITechnologies[]>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSocialMediaLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ISocialMedia[]>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTechnologiesAside",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<TTechnologiesAside[]>",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getThemelessPicturesImages",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getWorkExperience",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IExperience[]>",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Observable, map, of } from 'rxjs';\r\n\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { TExperienceAside } from '@core/models/experience-aside.type';\r\nimport { IExperience } from '@core/models/experience.interface';\r\nimport { IMainPageInfo } from '@core/models/main-page-info';\r\nimport { INavigation } from '@core/models/navigation.interface';\r\nimport { ISocialMedia } from '@core/models/social-media.interface';\r\nimport { TTechnologiesAside } from '@core/models/technologies-aside.type';\r\nimport { ITechnologies } from '@core/models/technologies.interface';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ApiService {\r\n    private baseUrl = 'http://localhost:3000';\r\n\r\n    constructor(private http: HttpClient) {}\r\n\r\n    getBackendTech(): Observable<ITechnologies[]> {\r\n        return this.http.get<ITechnologies[]>(\r\n            `${this.baseUrl}/firebase/backend`,\r\n        );\r\n    }\r\n\r\n    getFrontendTech(): Observable<ITechnologies[]> {\r\n        return this.http.get<ITechnologies[]>(\r\n            `${this.baseUrl}/firebase/frontend`,\r\n        );\r\n    }\r\n\r\n    getOtherTech(): Observable<ITechnologies[]> {\r\n        return this.http.get<ITechnologies[]>(`${this.baseUrl}/firebase/other`);\r\n    }\r\n\r\n    getNavigation(): Observable<INavigation[]> {\r\n        return this.http.get<INavigation[]>(\r\n            `${this.baseUrl}/firebase/navigation`,\r\n        );\r\n    }\r\n\r\n    getSocialMediaLinks(): Observable<ISocialMedia[]> {\r\n        return this.http.get<ISocialMedia[]>(\r\n            `${this.baseUrl}/firebase/social-media-links`,\r\n        );\r\n    }\r\n\r\n    getHardSkillsNav(): Observable<INavigation[]> {\r\n        return this.http.get<INavigation[]>(\r\n            `${this.baseUrl}/firebase/hard-skills-nav`,\r\n        );\r\n    }\r\n\r\n    getWorkExperience(): Observable<IExperience[]> {\r\n        return this.http.get<IExperience[]>(\r\n            `${this.baseUrl}/firebase/work-experience`,\r\n        );\r\n    }\r\n\r\n    getMainPageInfo(): Observable<IMainPageInfo> {\r\n        return this.http\r\n            .get<IMainPageInfo[]>(`${this.baseUrl}/firebase/main-page-info`)\r\n            .pipe(map((data) => data[0]));\r\n    }\r\n\r\n    getEducationPlaces(): Observable<IExperience[]> {\r\n        return this.http.get<IExperience[]>(\r\n            `${this.baseUrl}/firebase/education-places`,\r\n        );\r\n    }\r\n\r\n    getTechnologiesAside(): Observable<TTechnologiesAside[]> {\r\n        return this.http.get<TTechnologiesAside[]>(\r\n            `${this.baseUrl}/firebase/technologies-aside`,\r\n        );\r\n    }\r\n\r\n    getExperienceAside(): Observable<TExperienceAside[]> {\r\n        return this.http.get<TExperienceAside[]>(\r\n            `${this.baseUrl}/firebase/experience-aside`,\r\n        );\r\n    }\r\n\r\n    getThemelessPicturesImages(): Observable<any> {\r\n        return this.http.get<any[]>(\r\n            `${this.baseUrl}/firebase/themeless-pictures`,\r\n        );\r\n    }\r\n\r\n    getImages(\r\n        folder?: string,\r\n        searchParam?: string,\r\n    ): Observable<string[] | undefined> {\r\n        if (!folder) {\r\n            return of(undefined);\r\n        }\r\n        console.log(`${this.baseUrl}/firebase/images/${folder}`);\r\n        return this.http\r\n            .get<string[]>(`${this.baseUrl}/firebase/images/${folder}`)\r\n            .pipe(\r\n                map((urls: string[]) => {\r\n                    if (searchParam) {\r\n                        return urls.filter((url) => url.includes(searchParam));\r\n                    }\r\n                    return urls;\r\n                }),\r\n            );\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AuthEffects",
            "id": "injectable-AuthEffects-9fea5d0f0379525fea2badbe339688d617164f2b9566370a0f29360b89ae0b1cbdcfa88426ef6772eac786c32455155a8dc74485b9fa2ed8e814ace08444c420",
            "file": "src/app/layout/store/auth-store/auth.effects.ts",
            "properties": [
                {
                    "name": "loginGuest$",
                    "defaultValue": "createEffect(() =>\r\n        this._actions$.pipe(\r\n            ofType(AuthActions.getLoginGuest),\r\n            mergeMap(() =>\r\n                this._authService$.signInAsGuest().pipe(\r\n                    map(() => AuthActions.getLoginGuestSuccess()),\r\n                    catchError((error) =>\r\n                        of(AuthActions.getLoginGuestError({ error })),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "loginUser$",
                    "defaultValue": "createEffect(() =>\r\n        this._actions$.pipe(\r\n            ofType(AuthActions.getLogin),\r\n            mergeMap((action) =>\r\n                this._authService$.signIn(action.email, action.password).pipe(\r\n                    map((userCredential) => {\r\n                        const user: TProfile = {\r\n                            uid: userCredential.user?.uid,\r\n                            email: userCredential.user?.email,\r\n                            displayName: userCredential.user?.displayName,\r\n                            photoURL: userCredential.user?.photoURL,\r\n                            emailVerified: userCredential.user?.emailVerified,\r\n                        };\r\n                        return AuthActions.getLoginSuccess({ user });\r\n                    }),\r\n                    catchError((error) =>\r\n                        of(AuthActions.getLoginError({ error })),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "logoutUser$",
                    "defaultValue": "createEffect(() =>\r\n        this._actions$.pipe(\r\n            ofType(AuthActions.getLogout),\r\n            mergeMap(() =>\r\n                this._authService$.signOut().pipe(\r\n                    map(() => AuthActions.getLogoutSuccess()),\r\n                    tap(() => this._router.navigate([ERoute.AUTH])),\r\n                    tap(() => this._localStorageService.clearUserData()),\r\n                    catchError((error) =>\r\n                        of(AuthActions.getLogoutError({ error })),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { catchError, map, mergeMap, of, tap } from 'rxjs';\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\n\r\nimport { ERoute } from '@core/enum/route.enum';\r\nimport { AuthService } from '@core/service/auth/auth.service';\r\nimport { LocalStorageService } from '@core/service/local-storage/local-storage.service';\r\n\r\nimport { TProfile } from '../model/profile.type';\r\nimport { AuthActions } from './auth.actions';\r\n\r\n@Injectable()\r\nexport class AuthEffects {\r\n    constructor(\r\n        private _actions$: Actions,\r\n        private _authService$: AuthService,\r\n        private _localStorageService: LocalStorageService,\r\n        private _router: Router,\r\n    ) {}\r\n\r\n    loginUser$ = createEffect(() =>\r\n        this._actions$.pipe(\r\n            ofType(AuthActions.getLogin),\r\n            mergeMap((action) =>\r\n                this._authService$.signIn(action.email, action.password).pipe(\r\n                    map((userCredential) => {\r\n                        const user: TProfile = {\r\n                            uid: userCredential.user?.uid,\r\n                            email: userCredential.user?.email,\r\n                            displayName: userCredential.user?.displayName,\r\n                            photoURL: userCredential.user?.photoURL,\r\n                            emailVerified: userCredential.user?.emailVerified,\r\n                        };\r\n                        return AuthActions.getLoginSuccess({ user });\r\n                    }),\r\n                    catchError((error) =>\r\n                        of(AuthActions.getLoginError({ error })),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    );\r\n\r\n    loginGuest$ = createEffect(() =>\r\n        this._actions$.pipe(\r\n            ofType(AuthActions.getLoginGuest),\r\n            mergeMap(() =>\r\n                this._authService$.signInAsGuest().pipe(\r\n                    map(() => AuthActions.getLoginGuestSuccess()),\r\n                    catchError((error) =>\r\n                        of(AuthActions.getLoginGuestError({ error })),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    );\r\n\r\n    logoutUser$ = createEffect(() =>\r\n        this._actions$.pipe(\r\n            ofType(AuthActions.getLogout),\r\n            mergeMap(() =>\r\n                this._authService$.signOut().pipe(\r\n                    map(() => AuthActions.getLogoutSuccess()),\r\n                    tap(() => this._router.navigate([ERoute.AUTH])),\r\n                    tap(() => this._localStorageService.clearUserData()),\r\n                    catchError((error) =>\r\n                        of(AuthActions.getLogoutError({ error })),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_authService$",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "_actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_authService$",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-45650dbd842d234c02362cf2abd020e97dde40ed03f1ed537bab94f745caadfb240cd4bb18a26aa029a0ddf8a5ba05f1bb5078ef3a656e6e15c2222223c947d6",
            "file": "src/app/core/utils/guards/auth/auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable | Promise | UrlTree | boolean",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { Router, UrlTree } from '@angular/router';\r\n\r\nimport { ERoute } from '@core/enum/route.enum';\r\nimport { AuthService } from '@core/service/auth/auth.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class AuthGuard {\r\n    constructor(\r\n        private readonly _authService: AuthService,\r\n        private _router: Router,\r\n    ) {}\r\n\r\n    canActivate(): Observable<boolean> | Promise<boolean> | UrlTree | boolean {\r\n        console.log('AuthGuard canActivate:', this._authService.isAuth$.value);\r\n        if (!this._authService.isAuth$.value) {\r\n            this._router.navigate([ERoute.AUTH]);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "_authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-510f0e8ac1dd3db07551cc7883ac84c92944652b5d9dbed96a941bba5bb84c4c4dc51446504c1cec6d5c85d471f46397df66a0b5c63b472ad1767bd666b43d5e",
            "file": "src/app/core/service/auth/auth.service.ts",
            "properties": [
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_isBrowser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isAuth$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "userData",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "usersState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setUserData",
                    "args": [
                        {
                            "name": "user",
                            "type": "firebase.default.User | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "firebase.default.User | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signIn",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signInAsGuest",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "signOut",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { User } from 'firebase/auth';\r\nimport {\r\n    BehaviorSubject,\r\n    Subject,\r\n    catchError,\r\n    from,\r\n    takeUntil,\r\n    tap,\r\n} from 'rxjs';\r\n\r\nimport { isPlatformBrowser } from '@angular/common';\r\nimport { Inject, Injectable, OnDestroy, PLATFORM_ID } from '@angular/core';\r\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\r\nimport {\r\n    AngularFirestore,\r\n    AngularFirestoreDocument,\r\n} from '@angular/fire/compat/firestore';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { Store } from '@ngrx/store';\r\n\r\nimport { ERoute } from '@core/enum/route.enum';\r\n\r\nimport { AuthActions } from '@layout/store/auth-store/auth.actions';\r\nimport { TProfile } from '@layout/store/model/profile.type';\r\n\r\nimport { LocalStorageService } from '../local-storage/local-storage.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class AuthService implements OnDestroy {\r\n    public userData: User | null = null;\r\n    public isAuth$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n    public usersState: any;\r\n\r\n    private _destroyed$: Subject<void> = new Subject();\r\n    private _isBrowser: boolean;\r\n\r\n    constructor(\r\n        private readonly _afs: AngularFirestore,\r\n        private readonly _afAuth: AngularFireAuth,\r\n        private readonly _router: Router,\r\n        private readonly _localStorageService: LocalStorageService,\r\n        private readonly _store$: Store,\r\n        @Inject(PLATFORM_ID) private platformId: string,\r\n    ) {\r\n        this._isBrowser = isPlatformBrowser(this.platformId);\r\n        if (this._isBrowser) {\r\n            this.usersState = this._localStorageService.getUsersState();\r\n            if (localStorage.getItem('usersState')) {\r\n                this.isAuth$.next(true);\r\n            } else {\r\n                this.isAuth$.next(false);\r\n            }\r\n        } else {\r\n            this.isAuth$.next(false);\r\n        }\r\n    }\r\n\r\n    signIn(email: string, password: string) {\r\n        return from(\r\n            this._afAuth.signInWithEmailAndPassword(email, password),\r\n        ).pipe(\r\n            tap((result) => {\r\n                if (this._isBrowser) {\r\n                    if (!this.usersState) {\r\n                        this._localStorageService.initUser(\r\n                            true,\r\n                            false,\r\n                            result.user,\r\n                            'main',\r\n                        );\r\n                    } else {\r\n                        console.log('Setting user in signIn:', result.user); // Добавьте это для отладки\r\n                        this._localStorageService.setUser(result.user);\r\n                    }\r\n\r\n                    this.setUserData(result.user);\r\n                    if (result.user) {\r\n                        this.isAuth$.next(true);\r\n                        this._afAuth.authState\r\n                            .pipe(takeUntil(this._destroyed$))\r\n                            .subscribe((user) => {\r\n                                if (user && this.isAuth$.value) {\r\n                                    this._router.navigate([ERoute.LAYOUT]);\r\n                                }\r\n                            });\r\n                    }\r\n                }\r\n            }),\r\n            catchError((error: Error) => {\r\n                this.isAuth$.next(false);\r\n                throw error;\r\n            }),\r\n        );\r\n    }\r\n\r\n    signInAsGuest() {\r\n        return from(this._afAuth.signInAnonymously()).pipe(\r\n            tap((result) => {\r\n                if (this._isBrowser) {\r\n                    console.log('signInAsGuest result:', result);\r\n                    if (!this.usersState) {\r\n                        this._localStorageService.initUser(\r\n                            true,\r\n                            true,\r\n                            null,\r\n                            'main',\r\n                        );\r\n                    } else {\r\n                        this._localStorageService.setUser(null);\r\n                    }\r\n                    this.isAuth$.next(true);\r\n                    console.log(\r\n                        'isAuth$ after signInAsGuest:',\r\n                        this.isAuth$.value,\r\n                    );\r\n                    this._router.navigate([ERoute.LAYOUT]);\r\n                }\r\n            }),\r\n            catchError((error: Error) => {\r\n                this.isAuth$.next(false);\r\n                console.error('signInAsGuest error:', error);\r\n                throw error;\r\n            }),\r\n        );\r\n    }\r\n\r\n    setUserData(user: firebase.default.User | null) {\r\n        const userRef: AngularFirestoreDocument<TProfile> = this._afs.doc(\r\n            `users/${user?.uid}`,\r\n        );\r\n        const userData: TProfile = {\r\n            uid: user?.uid,\r\n            email: user?.email,\r\n            displayName: user?.displayName,\r\n            photoURL: user?.photoURL,\r\n            emailVerified: user?.emailVerified,\r\n        };\r\n        return from(userRef.set(userData, { merge: true }));\r\n    }\r\n\r\n    signOut() {\r\n        return from(this._afAuth.signOut()).pipe(\r\n            tap(() => {\r\n                if (this._isBrowser) {\r\n                    const usersState =\r\n                        this._localStorageService.getUsersState();\r\n\r\n                    if (usersState?.isGuest) {\r\n                        usersState.isGuest = false;\r\n                    }\r\n                    if (usersState?.user) {\r\n                        usersState.user = null;\r\n                    }\r\n\r\n                    if (usersState) {\r\n                        this._localStorageService.setUsersState(usersState);\r\n                    }\r\n\r\n                    this._localStorageService.clearUserData();\r\n                    this._store$.dispatch(AuthActions.getLogout());\r\n                    this.isAuth$.next(false);\r\n                    this._router.navigate([ERoute.AUTH]);\r\n                }\r\n            }),\r\n        );\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._destroyed$.next();\r\n        this._destroyed$.complete();\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_afs",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_afAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_store$",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "platformId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "_afs",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_afAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_store$",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CustomTitleStrategy",
            "id": "injectable-CustomTitleStrategy-9bb5f65c450960696d1a192f4dfd0ff149530096266e6ea738ce6467062c0c8186e2e62ffbc4c63733321619ae4696215452d17e8a22efa9ed72ba48267f8f5a",
            "file": "src/app/custom-title-strategy.ts",
            "properties": [],
            "methods": [
                {
                    "name": "updateTitle",
                    "args": [
                        {
                            "name": "routerState",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "routerState",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { RouterStateSnapshot, TitleStrategy } from '@angular/router';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CustomTitleStrategy extends TitleStrategy {\r\n    override updateTitle(routerState: RouterStateSnapshot) {\r\n        const title = this.buildTitle(routerState);\r\n        if (title !== undefined) {\r\n            document.title = `Cherkas Ivan - ${title}`;\r\n        } else {\r\n            document.title = `Cherkas Ivan CV_2.0 - Home`;\r\n        }\r\n    }\r\n}\r\n",
            "extends": [
                "TitleStrategy"
            ],
            "type": "injectable"
        },
        {
            "name": "FirebaseEffects",
            "id": "injectable-FirebaseEffects-45ea07c21e8799a17bba4f4fb1d58db251f997e5eff75b3b84b16fcd9f775e920ecb44191debfefd4b8857219c0c2fe9aa428be5ae6dd01bcb266751953d811c",
            "file": "src/app/layout/store/firebase-store/firebase.effects.ts",
            "properties": [
                {
                    "name": "loadBackendTech$",
                    "defaultValue": "createEffect(() =>\r\n        this._actions$.pipe(\r\n            ofType(FirebaseActions.getBackendTech),\r\n            mergeMap((action) =>\r\n                forkJoin({\r\n                    backendTech: this._apiService.getBackendTech(),\r\n                    images: this._apiService.getImages(action.imgName),\r\n                }).pipe(\r\n                    map(({ backendTech, images }) =>\r\n                        FirebaseActions.getBackendTechSuccess({\r\n                            backendTech,\r\n                            images,\r\n                        }),\r\n                    ),\r\n                    catchError((error) =>\r\n                        of(FirebaseActions.getBackendTechError({ error })),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "loadEducationPlaces$",
                    "defaultValue": "createEffect(() =>\r\n        this._actions$.pipe(\r\n            ofType(FirebaseActions.getEducationPlaces),\r\n            mergeMap((action) =>\r\n                forkJoin({\r\n                    education: this._apiService.getEducationPlaces(),\r\n                    images: this._apiService.getImages(action.imgName),\r\n                }).pipe(\r\n                    map(({ education, images }) =>\r\n                        FirebaseActions.getEducationPlacesSuccess({\r\n                            education,\r\n                            images,\r\n                        }),\r\n                    ),\r\n                    catchError((error) =>\r\n                        of(FirebaseActions.getEducationPlacesError({ error })),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 173
                },
                {
                    "name": "loadExperienceAside$",
                    "defaultValue": "createEffect(() =>\r\n        this._actions$.pipe(\r\n            ofType(FirebaseActions.getExperienceAside),\r\n            mergeMap((action) =>\r\n                forkJoin({\r\n                    experienceAside: this._apiService.getExperienceAside(),\r\n                    images: this._apiService.getImages(action.imgName),\r\n                }).pipe(\r\n                    map(({ experienceAside, images }) =>\r\n                        FirebaseActions.getExperienceAsideSuccess({\r\n                            experienceAside,\r\n                            images,\r\n                        }),\r\n                    ),\r\n                    catchError((error) =>\r\n                        of(FirebaseActions.getExperienceAsideError({ error })),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 217
                },
                {
                    "name": "loadFrontendTech$",
                    "defaultValue": "createEffect(() =>\r\n        this._actions$.pipe(\r\n            ofType(FirebaseActions.getFrontendTech),\r\n            mergeMap((action) =>\r\n                forkJoin({\r\n                    frontendTech: this._apiService.getFrontendTech(),\r\n                    images: this._apiService.getImages(action.imgName),\r\n                }).pipe(\r\n                    map(({ frontendTech, images }) =>\r\n                        FirebaseActions.getFrontendTechSuccess({\r\n                            frontendTech,\r\n                            images,\r\n                        }),\r\n                    ),\r\n                    catchError((error) =>\r\n                        of(FirebaseActions.getFrontendTechError({ error })),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "loadHardSkillsNav$",
                    "defaultValue": "createEffect(() =>\r\n        this._actions$.pipe(\r\n            ofType(FirebaseActions.getHardSkillsNav),\r\n            mergeMap((action) =>\r\n                forkJoin({\r\n                    hardSkillsNav: this._apiService.getHardSkillsNav(),\r\n                    images: this._apiService.getImages(action.imgName),\r\n                }).pipe(\r\n                    map(({ hardSkillsNav, images }) =>\r\n                        FirebaseActions.getHardSkillsNavSuccess({\r\n                            hardSkillsNav,\r\n                            images,\r\n                        }),\r\n                    ),\r\n                    catchError((error) =>\r\n                        of(FirebaseActions.getHardSkillsNavError({ error })),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 151
                },
                {
                    "name": "loadMainPageInfo$",
                    "defaultValue": "createEffect(() =>\r\n        this._actions$.pipe(\r\n            ofType(FirebaseActions.getMainPageInfo),\r\n            mergeMap((action) =>\r\n                forkJoin({\r\n                    mainPageInfo: this._apiService.getMainPageInfo(),\r\n                    images: this._apiService.getImages(action.imgName),\r\n                }).pipe(\r\n                    map(({ mainPageInfo, images }) =>\r\n                        FirebaseActions.getMainPageInfoSuccess({\r\n                            mainPageInfo,\r\n                            images,\r\n                        }),\r\n                    ),\r\n                    catchError((error) =>\r\n                        of(FirebaseActions.getMainPageInfoError({ error })),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 195
                },
                {
                    "name": "loadNavigation$",
                    "defaultValue": "createEffect(() =>\r\n        this._actions$.pipe(\r\n            ofType(FirebaseActions.getNavigation),\r\n            mergeMap((action) =>\r\n                forkJoin({\r\n                    navigation: this._apiService.getNavigation(),\r\n                    images: this._apiService.getImages(action.imgName),\r\n                }).pipe(\r\n                    map(({ navigation, images }) =>\r\n                        FirebaseActions.getNavigationSuccess({\r\n                            navigation,\r\n                            images,\r\n                        }),\r\n                    ),\r\n                    catchError((error) =>\r\n                        of(FirebaseActions.getNavigationError({ error })),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "loadOtherTech$",
                    "defaultValue": "createEffect(() =>\r\n        this._actions$.pipe(\r\n            ofType(FirebaseActions.getOtherTech),\r\n            mergeMap((action) =>\r\n                forkJoin({\r\n                    otherTech: this._apiService.getOtherTech(),\r\n                    images: this._apiService.getImages(action.imgName),\r\n                }).pipe(\r\n                    map(({ otherTech, images }) =>\r\n                        FirebaseActions.getOtherTechSuccess({\r\n                            otherTech,\r\n                            images,\r\n                        }),\r\n                    ),\r\n                    catchError((error) =>\r\n                        of(FirebaseActions.getOtherTechError({ error })),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 129
                },
                {
                    "name": "loadSocialMediaLinks$",
                    "defaultValue": "createEffect(() =>\r\n        this._actions$.pipe(\r\n            ofType(FirebaseActions.getSocialMedia),\r\n            mergeMap((action) =>\r\n                forkJoin({\r\n                    socialMediaLinks: this._apiService.getSocialMediaLinks(),\r\n                    images: this._apiService.getImages(action.imgName),\r\n                }).pipe(\r\n                    map(({ socialMediaLinks, images }) =>\r\n                        FirebaseActions.getSocialMediaSuccess({\r\n                            socialMediaLinks,\r\n                            images,\r\n                        }),\r\n                    ),\r\n                    catchError((error) =>\r\n                        of(FirebaseActions.getSocialMediaError({ error })),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "loadTechnologiesAside$",
                    "defaultValue": "createEffect(() =>\r\n        this._actions$.pipe(\r\n            ofType(FirebaseActions.getTechnologiesAside),\r\n            mergeMap(() =>\r\n                this._apiService.getTechnologiesAside().pipe(\r\n                    mergeMap((technologiesAside) => {\r\n                        const imageRequests = technologiesAside.map((tech) => {\r\n                            if (tech.imgName) {\r\n                                return this._apiService\r\n                                    .getImages(tech.imgName)\r\n                                    .pipe(\r\n                                        map((images) => ({\r\n                                            ...tech,\r\n                                            images,\r\n                                        })),\r\n                                    );\r\n                            } else {\r\n                                return of(tech);\r\n                            }\r\n                        });\r\n                        return forkJoin(imageRequests).pipe(\r\n                            map((updatedTechnologiesAside) => {\r\n                                const images = updatedTechnologiesAside\r\n                                    .map((tech) => tech.images)\r\n                                    .flat()\r\n                                    .filter(\r\n                                        (image): image is string =>\r\n                                            image !== undefined,\r\n                                    );\r\n\r\n                                return FirebaseActions.getTechnologiesAsideSuccess(\r\n                                    {\r\n                                        technologiesAside:\r\n                                            updatedTechnologiesAside,\r\n                                        images,\r\n                                    },\r\n                                );\r\n                            }),\r\n                            catchError((error) =>\r\n                                of(\r\n                                    FirebaseActions.getTechnologiesAsideError({\r\n                                        error,\r\n                                    }),\r\n                                ),\r\n                            ),\r\n                        );\r\n                    }),\r\n                    catchError((error) =>\r\n                        of(\r\n                            FirebaseActions.getTechnologiesAsideError({\r\n                                error,\r\n                            }),\r\n                        ),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 239
                },
                {
                    "name": "loadWorkExperience$",
                    "defaultValue": "createEffect(() =>\r\n        this._actions$.pipe(\r\n            ofType(FirebaseActions.getWorkExperience),\r\n            mergeMap((action) =>\r\n                forkJoin({\r\n                    workExperience: this._apiService.getWorkExperience(),\r\n                    images: this._apiService.getImages(action.imgName),\r\n                }).pipe(\r\n                    map(({ workExperience, images }) =>\r\n                        FirebaseActions.getWorkExperienceSuccess({\r\n                            workExperience,\r\n                            images,\r\n                        }),\r\n                    ),\r\n                    catchError((error) =>\r\n                        of(FirebaseActions.getWorkExperienceError({ error })),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { catchError, forkJoin, map, mergeMap, of } from 'rxjs';\r\n\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Action } from '@ngrx/store';\r\n\r\nimport { ApiService } from '@core/service/api/api.service';\r\n\r\nimport { FirebaseActions } from './firebase.actions';\r\n\r\n@Injectable()\r\nexport class FirebaseEffects {\r\n    constructor(\r\n        private _actions$: Actions<Action<string>>,\r\n        private _apiService: ApiService,\r\n    ) {}\r\n\r\n    loadNavigation$ = createEffect(() =>\r\n        this._actions$.pipe(\r\n            ofType(FirebaseActions.getNavigation),\r\n            mergeMap((action) =>\r\n                forkJoin({\r\n                    navigation: this._apiService.getNavigation(),\r\n                    images: this._apiService.getImages(action.imgName),\r\n                }).pipe(\r\n                    map(({ navigation, images }) =>\r\n                        FirebaseActions.getNavigationSuccess({\r\n                            navigation,\r\n                            images,\r\n                        }),\r\n                    ),\r\n                    catchError((error) =>\r\n                        of(FirebaseActions.getNavigationError({ error })),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    );\r\n\r\n    loadSocialMediaLinks$ = createEffect(() =>\r\n        this._actions$.pipe(\r\n            ofType(FirebaseActions.getSocialMedia),\r\n            mergeMap((action) =>\r\n                forkJoin({\r\n                    socialMediaLinks: this._apiService.getSocialMediaLinks(),\r\n                    images: this._apiService.getImages(action.imgName),\r\n                }).pipe(\r\n                    map(({ socialMediaLinks, images }) =>\r\n                        FirebaseActions.getSocialMediaSuccess({\r\n                            socialMediaLinks,\r\n                            images,\r\n                        }),\r\n                    ),\r\n                    catchError((error) =>\r\n                        of(FirebaseActions.getSocialMediaError({ error })),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    );\r\n\r\n    loadWorkExperience$ = createEffect(() =>\r\n        this._actions$.pipe(\r\n            ofType(FirebaseActions.getWorkExperience),\r\n            mergeMap((action) =>\r\n                forkJoin({\r\n                    workExperience: this._apiService.getWorkExperience(),\r\n                    images: this._apiService.getImages(action.imgName),\r\n                }).pipe(\r\n                    map(({ workExperience, images }) =>\r\n                        FirebaseActions.getWorkExperienceSuccess({\r\n                            workExperience,\r\n                            images,\r\n                        }),\r\n                    ),\r\n                    catchError((error) =>\r\n                        of(FirebaseActions.getWorkExperienceError({ error })),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    );\r\n\r\n    loadFrontendTech$ = createEffect(() =>\r\n        this._actions$.pipe(\r\n            ofType(FirebaseActions.getFrontendTech),\r\n            mergeMap((action) =>\r\n                forkJoin({\r\n                    frontendTech: this._apiService.getFrontendTech(),\r\n                    images: this._apiService.getImages(action.imgName),\r\n                }).pipe(\r\n                    map(({ frontendTech, images }) =>\r\n                        FirebaseActions.getFrontendTechSuccess({\r\n                            frontendTech,\r\n                            images,\r\n                        }),\r\n                    ),\r\n                    catchError((error) =>\r\n                        of(FirebaseActions.getFrontendTechError({ error })),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    );\r\n\r\n    loadBackendTech$ = createEffect(() =>\r\n        this._actions$.pipe(\r\n            ofType(FirebaseActions.getBackendTech),\r\n            mergeMap((action) =>\r\n                forkJoin({\r\n                    backendTech: this._apiService.getBackendTech(),\r\n                    images: this._apiService.getImages(action.imgName),\r\n                }).pipe(\r\n                    map(({ backendTech, images }) =>\r\n                        FirebaseActions.getBackendTechSuccess({\r\n                            backendTech,\r\n                            images,\r\n                        }),\r\n                    ),\r\n                    catchError((error) =>\r\n                        of(FirebaseActions.getBackendTechError({ error })),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    );\r\n\r\n    loadOtherTech$ = createEffect(() =>\r\n        this._actions$.pipe(\r\n            ofType(FirebaseActions.getOtherTech),\r\n            mergeMap((action) =>\r\n                forkJoin({\r\n                    otherTech: this._apiService.getOtherTech(),\r\n                    images: this._apiService.getImages(action.imgName),\r\n                }).pipe(\r\n                    map(({ otherTech, images }) =>\r\n                        FirebaseActions.getOtherTechSuccess({\r\n                            otherTech,\r\n                            images,\r\n                        }),\r\n                    ),\r\n                    catchError((error) =>\r\n                        of(FirebaseActions.getOtherTechError({ error })),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    );\r\n\r\n    loadHardSkillsNav$ = createEffect(() =>\r\n        this._actions$.pipe(\r\n            ofType(FirebaseActions.getHardSkillsNav),\r\n            mergeMap((action) =>\r\n                forkJoin({\r\n                    hardSkillsNav: this._apiService.getHardSkillsNav(),\r\n                    images: this._apiService.getImages(action.imgName),\r\n                }).pipe(\r\n                    map(({ hardSkillsNav, images }) =>\r\n                        FirebaseActions.getHardSkillsNavSuccess({\r\n                            hardSkillsNav,\r\n                            images,\r\n                        }),\r\n                    ),\r\n                    catchError((error) =>\r\n                        of(FirebaseActions.getHardSkillsNavError({ error })),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    );\r\n\r\n    loadEducationPlaces$ = createEffect(() =>\r\n        this._actions$.pipe(\r\n            ofType(FirebaseActions.getEducationPlaces),\r\n            mergeMap((action) =>\r\n                forkJoin({\r\n                    education: this._apiService.getEducationPlaces(),\r\n                    images: this._apiService.getImages(action.imgName),\r\n                }).pipe(\r\n                    map(({ education, images }) =>\r\n                        FirebaseActions.getEducationPlacesSuccess({\r\n                            education,\r\n                            images,\r\n                        }),\r\n                    ),\r\n                    catchError((error) =>\r\n                        of(FirebaseActions.getEducationPlacesError({ error })),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    );\r\n\r\n    loadMainPageInfo$ = createEffect(() =>\r\n        this._actions$.pipe(\r\n            ofType(FirebaseActions.getMainPageInfo),\r\n            mergeMap((action) =>\r\n                forkJoin({\r\n                    mainPageInfo: this._apiService.getMainPageInfo(),\r\n                    images: this._apiService.getImages(action.imgName),\r\n                }).pipe(\r\n                    map(({ mainPageInfo, images }) =>\r\n                        FirebaseActions.getMainPageInfoSuccess({\r\n                            mainPageInfo,\r\n                            images,\r\n                        }),\r\n                    ),\r\n                    catchError((error) =>\r\n                        of(FirebaseActions.getMainPageInfoError({ error })),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    );\r\n\r\n    loadExperienceAside$ = createEffect(() =>\r\n        this._actions$.pipe(\r\n            ofType(FirebaseActions.getExperienceAside),\r\n            mergeMap((action) =>\r\n                forkJoin({\r\n                    experienceAside: this._apiService.getExperienceAside(),\r\n                    images: this._apiService.getImages(action.imgName),\r\n                }).pipe(\r\n                    map(({ experienceAside, images }) =>\r\n                        FirebaseActions.getExperienceAsideSuccess({\r\n                            experienceAside,\r\n                            images,\r\n                        }),\r\n                    ),\r\n                    catchError((error) =>\r\n                        of(FirebaseActions.getExperienceAsideError({ error })),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    );\r\n\r\n    loadTechnologiesAside$ = createEffect(() =>\r\n        this._actions$.pipe(\r\n            ofType(FirebaseActions.getTechnologiesAside),\r\n            mergeMap(() =>\r\n                this._apiService.getTechnologiesAside().pipe(\r\n                    mergeMap((technologiesAside) => {\r\n                        const imageRequests = technologiesAside.map((tech) => {\r\n                            if (tech.imgName) {\r\n                                return this._apiService\r\n                                    .getImages(tech.imgName)\r\n                                    .pipe(\r\n                                        map((images) => ({\r\n                                            ...tech,\r\n                                            images,\r\n                                        })),\r\n                                    );\r\n                            } else {\r\n                                return of(tech);\r\n                            }\r\n                        });\r\n                        return forkJoin(imageRequests).pipe(\r\n                            map((updatedTechnologiesAside) => {\r\n                                const images = updatedTechnologiesAside\r\n                                    .map((tech) => tech.images)\r\n                                    .flat()\r\n                                    .filter(\r\n                                        (image): image is string =>\r\n                                            image !== undefined,\r\n                                    );\r\n\r\n                                return FirebaseActions.getTechnologiesAsideSuccess(\r\n                                    {\r\n                                        technologiesAside:\r\n                                            updatedTechnologiesAside,\r\n                                        images,\r\n                                    },\r\n                                );\r\n                            }),\r\n                            catchError((error) =>\r\n                                of(\r\n                                    FirebaseActions.getTechnologiesAsideError({\r\n                                        error,\r\n                                    }),\r\n                                ),\r\n                            ),\r\n                        );\r\n                    }),\r\n                    catchError((error) =>\r\n                        of(\r\n                            FirebaseActions.getTechnologiesAsideError({\r\n                                error,\r\n                            }),\r\n                        ),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_actions$",
                        "type": "Actions<Action<string>>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "_actions$",
                        "type": "Actions<Action<string>>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "GithubRepositoriesEffects",
            "id": "injectable-GithubRepositoriesEffects-4fcc885c09d68722841b72dc79630a3b169b4ddc705143ae9aa3bf2ba6f5409b864f4a0fa439500ff8ec378bc6f6cb3d3906eb0a947e835ce94f0f06a3bd3a27",
            "file": "src/app/layout/store/github-projects-store/github-projects.effects.ts",
            "properties": [
                {
                    "name": "loadRepositories$",
                    "defaultValue": "createEffect(() =>\r\n        this._actions$.pipe(\r\n            ofType(GithubRepositoriesActions.getRepositories),\r\n            mergeMap(() =>\r\n                this._githubService.getGithubRepos().pipe(\r\n                    map((repositories) =>\r\n                        GithubRepositoriesActions.getRepositoriesSuccess({\r\n                            repositories,\r\n                        }),\r\n                    ),\r\n                    catchError((error) =>\r\n                        of(\r\n                            GithubRepositoriesActions.getRepositoriesError({\r\n                                error,\r\n                            }),\r\n                        ),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { catchError, map, mergeMap, of } from 'rxjs';\r\n\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\n\r\nimport { GithubService } from '@core/service/github/github.service';\r\n\r\nimport { GithubRepositoriesActions } from './github-projects.action';\r\n\r\n@Injectable()\r\nexport class GithubRepositoriesEffects {\r\n    constructor(\r\n        private _actions$: Actions,\r\n        private _githubService: GithubService,\r\n    ) {}\r\n\r\n    loadRepositories$ = createEffect(() =>\r\n        this._actions$.pipe(\r\n            ofType(GithubRepositoriesActions.getRepositories),\r\n            mergeMap(() =>\r\n                this._githubService.getGithubRepos().pipe(\r\n                    map((repositories) =>\r\n                        GithubRepositoriesActions.getRepositoriesSuccess({\r\n                            repositories,\r\n                        }),\r\n                    ),\r\n                    catchError((error) =>\r\n                        of(\r\n                            GithubRepositoriesActions.getRepositoriesError({\r\n                                error,\r\n                            }),\r\n                        ),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_githubService",
                        "type": "GithubService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "_actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_githubService",
                        "type": "GithubService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "GithubService",
            "id": "injectable-GithubService-50a36a54e92bdaae63f2cac68da9f9b9edc93dcb8c50acbe4e2d6d0deb6d527eb1f755fe927f21c94bda268cf645a8cec794206a63c7487a832c94cce131e318",
            "file": "src/app/core/service/github/github.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getGithubRepos",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<TGitHub[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Observable, map } from 'rxjs';\r\n\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { IGitHubRepository } from '@core/models/github-repository.interface';\r\nimport { TGitHub } from '@core/models/github.type';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class GithubService {\r\n    constructor(private httpClient: HttpClient) {}\r\n\r\n    public getGithubRepos(): Observable<TGitHub[]> {\r\n        return this.httpClient\r\n            .get<\r\n                IGitHubRepository[]\r\n            >('https://api.github.com/users/CherkasIvan/repos')\r\n            .pipe(\r\n                map((repositories: IGitHubRepository[]) =>\r\n                    repositories.map(\r\n                        (repository: IGitHubRepository) =>\r\n                            <TGitHub>{\r\n                                name: repository.name,\r\n                                stars: repository.stargazers_count,\r\n                                htmlUrl: repository.html_url,\r\n                                forks: repository.forks,\r\n                                created_at: repository.created_at,\r\n                                updated_at: repository.updated_at,\r\n                                description: repository.description,\r\n                            },\r\n                    ),\r\n                ),\r\n            );\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ImagesEffects",
            "id": "injectable-ImagesEffects-a9c5d71aac5e0babc55ac0a41c872fbe1533cb924c3dbc4c7e12c61f1e17b0ac2bf7475e6e660be10fc271f7af204a15f3556c1565ddc9b767d6a4b6c31b6599",
            "file": "src/app/layout/store/images-store/images.effects.ts",
            "properties": [
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getCloseImg$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n            takeUntil(this._destroyed$),\r\n            ofType(ImagesActions.getCloseImg),\r\n            mergeMap((action) =>\r\n                this.apiService.getImages('icons/white-mode').pipe(\r\n                    map((data: any) => {\r\n                        console.log(data);\r\n                        const imageUrl = data.find((el: any) =>\r\n                            el.includes('close'),\r\n                        );\r\n                        return ImagesActions.getCloseImgSuccess({\r\n                            imageUrl,\r\n                        });\r\n                    }),\r\n                    catchError((error) =>\r\n                        of(ImagesActions.getCloseImgFailure({ error })),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 139
                },
                {
                    "name": "getLogo$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(ImagesActions.getLogo),\r\n            mergeMap((action) =>\r\n                this.apiService\r\n                    .getImages(action.mode ? 'white-mode' : 'dark-mode')\r\n                    .pipe(\r\n                        takeUntil(this._destroyed$),\r\n                        map((data) => {\r\n                            const imageUrl =\r\n                                data?.find((url: string) =>\r\n                                    url.includes('logo-i.cherkas'),\r\n                                ) || '';\r\n                            return ImagesActions.getLogoSuccess({ imageUrl });\r\n                        }),\r\n                        catchError((error) =>\r\n                            of(ImagesActions.getLogoFailure({ error })),\r\n                        ),\r\n                    ),\r\n            ),\r\n        ),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "getProfileImg$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n            takeUntil(this._destroyed$),\r\n            ofType(ImagesActions.getProfileImg),\r\n            mergeMap((action) =>\r\n                this.apiService\r\n                    .getImages(action.mode ? 'white-mode' : 'dark-mode')\r\n                    .pipe(\r\n                        takeUntil(this._destroyed$),\r\n                        map((data) => {\r\n                            const imageUrl =\r\n                                data?.find((url: string) =>\r\n                                    url.includes('profile-i.cherkas'),\r\n                                ) || '';\r\n                            return ImagesActions.getProfileImgSuccess({\r\n                                imageUrl,\r\n                            });\r\n                        }),\r\n                        catchError((error) =>\r\n                            of(ImagesActions.getProfileImgFailure({ error })),\r\n                        ),\r\n                    ),\r\n            ),\r\n        ),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "loadThemelessPicturesImages$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n            takeUntil(this._destroyed$),\r\n            ofType(ImagesActions.loadThemelessPicturesImages),\r\n            mergeMap(() =>\r\n                this.apiService.getThemelessPicturesImages().pipe(\r\n                    map((data) =>\r\n                        ImagesActions.loadThemelessPicturesImagesSuccess({\r\n                            darkModeImages: data.darkModeImages,\r\n                            whiteModeImages: data.whiteModeImages,\r\n                        }),\r\n                    ),\r\n                    catchError((error) =>\r\n                        of(\r\n                            ImagesActions.loadThemelessPicturesImagesFailure({\r\n                                error,\r\n                            }),\r\n                        ),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "setDarkModeIconImg$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n            takeUntil(this._destroyed$),\r\n            ofType(ImagesActions.setDarkModeImagesSuccess),\r\n            mergeMap((action) =>\r\n                this.apiService.getImages('dark-mode').pipe(\r\n                    takeUntil(this._destroyed$),\r\n                    map((data: any) => {\r\n                        console.log(data);\r\n                        const images =\r\n                            data.find((url: string) => url.includes('sun')) ||\r\n                            '';\r\n                        return ImagesActions.setDarkModeImagesSuccess({\r\n                            images,\r\n                        });\r\n                    }),\r\n                    catchError((error) =>\r\n                        of(ImagesActions.setDarkModeImagesFailure({ error })),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 115
                },
                {
                    "name": "setWhiteModeIconImg$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n            takeUntil(this._destroyed$),\r\n            ofType(ImagesActions.getCloseImg),\r\n            mergeMap((action) =>\r\n                this.apiService.getImages('white-mode').pipe(\r\n                    map((data: any) => {\r\n                        const images =\r\n                            data.find((url: string) => url.includes('moon')) ||\r\n                            '';\r\n                        return ImagesActions.setWhiteModeImagesSuccess({\r\n                            images,\r\n                        });\r\n                    }),\r\n                    catchError((error) =>\r\n                        of(ImagesActions.setWhiteModeImagesFailure({ error })),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 93
                }
            ],
            "methods": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Subject, catchError, map, mergeMap, of, takeUntil } from 'rxjs';\r\n\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\n\r\nimport { ApiService } from '@core/service/api/api.service';\r\n\r\nimport { ImagesActions } from './images.actions';\r\n\r\n@Injectable()\r\nexport class ImagesEffects {\r\n    private _destroyed$: Subject<void> = new Subject();\r\n\r\n    constructor(\r\n        private actions$: Actions,\r\n        private apiService: ApiService,\r\n    ) {}\r\n\r\n    getLogo$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(ImagesActions.getLogo),\r\n            mergeMap((action) =>\r\n                this.apiService\r\n                    .getImages(action.mode ? 'white-mode' : 'dark-mode')\r\n                    .pipe(\r\n                        takeUntil(this._destroyed$),\r\n                        map((data) => {\r\n                            const imageUrl =\r\n                                data?.find((url: string) =>\r\n                                    url.includes('logo-i.cherkas'),\r\n                                ) || '';\r\n                            return ImagesActions.getLogoSuccess({ imageUrl });\r\n                        }),\r\n                        catchError((error) =>\r\n                            of(ImagesActions.getLogoFailure({ error })),\r\n                        ),\r\n                    ),\r\n            ),\r\n        ),\r\n    );\r\n\r\n    getProfileImg$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            takeUntil(this._destroyed$),\r\n            ofType(ImagesActions.getProfileImg),\r\n            mergeMap((action) =>\r\n                this.apiService\r\n                    .getImages(action.mode ? 'white-mode' : 'dark-mode')\r\n                    .pipe(\r\n                        takeUntil(this._destroyed$),\r\n                        map((data) => {\r\n                            const imageUrl =\r\n                                data?.find((url: string) =>\r\n                                    url.includes('profile-i.cherkas'),\r\n                                ) || '';\r\n                            return ImagesActions.getProfileImgSuccess({\r\n                                imageUrl,\r\n                            });\r\n                        }),\r\n                        catchError((error) =>\r\n                            of(ImagesActions.getProfileImgFailure({ error })),\r\n                        ),\r\n                    ),\r\n            ),\r\n        ),\r\n    );\r\n\r\n    loadThemelessPicturesImages$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            takeUntil(this._destroyed$),\r\n            ofType(ImagesActions.loadThemelessPicturesImages),\r\n            mergeMap(() =>\r\n                this.apiService.getThemelessPicturesImages().pipe(\r\n                    map((data) =>\r\n                        ImagesActions.loadThemelessPicturesImagesSuccess({\r\n                            darkModeImages: data.darkModeImages,\r\n                            whiteModeImages: data.whiteModeImages,\r\n                        }),\r\n                    ),\r\n                    catchError((error) =>\r\n                        of(\r\n                            ImagesActions.loadThemelessPicturesImagesFailure({\r\n                                error,\r\n                            }),\r\n                        ),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    );\r\n\r\n    setWhiteModeIconImg$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            takeUntil(this._destroyed$),\r\n            ofType(ImagesActions.getCloseImg),\r\n            mergeMap((action) =>\r\n                this.apiService.getImages('white-mode').pipe(\r\n                    map((data: any) => {\r\n                        const images =\r\n                            data.find((url: string) => url.includes('moon')) ||\r\n                            '';\r\n                        return ImagesActions.setWhiteModeImagesSuccess({\r\n                            images,\r\n                        });\r\n                    }),\r\n                    catchError((error) =>\r\n                        of(ImagesActions.setWhiteModeImagesFailure({ error })),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    );\r\n\r\n    setDarkModeIconImg$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            takeUntil(this._destroyed$),\r\n            ofType(ImagesActions.setDarkModeImagesSuccess),\r\n            mergeMap((action) =>\r\n                this.apiService.getImages('dark-mode').pipe(\r\n                    takeUntil(this._destroyed$),\r\n                    map((data: any) => {\r\n                        console.log(data);\r\n                        const images =\r\n                            data.find((url: string) => url.includes('sun')) ||\r\n                            '';\r\n                        return ImagesActions.setDarkModeImagesSuccess({\r\n                            images,\r\n                        });\r\n                    }),\r\n                    catchError((error) =>\r\n                        of(ImagesActions.setDarkModeImagesFailure({ error })),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    );\r\n\r\n    getCloseImg$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            takeUntil(this._destroyed$),\r\n            ofType(ImagesActions.getCloseImg),\r\n            mergeMap((action) =>\r\n                this.apiService.getImages('icons/white-mode').pipe(\r\n                    map((data: any) => {\r\n                        console.log(data);\r\n                        const imageUrl = data.find((el: any) =>\r\n                            el.includes('close'),\r\n                        );\r\n                        return ImagesActions.getCloseImgSuccess({\r\n                            imageUrl,\r\n                        });\r\n                    }),\r\n                    catchError((error) =>\r\n                        of(ImagesActions.getCloseImgFailure({ error })),\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    );\r\n\r\n    ngOnDestroy(): void {\r\n        this._destroyed$.next();\r\n        this._destroyed$.complete();\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "LocalStorageService",
            "id": "injectable-LocalStorageService-94ed3698e6846f60de3f82f3988db04a4370fb0b3ee0ec820d18f6c4ec2c86d968f361537697204fc59e15895ff5764106e5bf4d4c8f5de2169460d2901e55cd",
            "file": "src/app/core/service/local-storage/local-storage.service.ts",
            "properties": [
                {
                    "name": "isBrowser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "USER_STATE_KEY",
                    "defaultValue": "'usersState'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "checkLocalStorageUserName",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearUserData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDarkMode",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 229,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getIsFirstTime",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 255,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLanguage",
                    "args": [],
                    "optional": false,
                    "returnType": "\"ru\" | \"en\"",
                    "typeParameters": [],
                    "line": 247,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getSelectedSubTechnologiesTab",
                    "args": [],
                    "optional": false,
                    "returnType": "\"frontend\" | \"backend\"",
                    "typeParameters": [],
                    "line": 209,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getSelectedTab",
                    "args": [],
                    "optional": false,
                    "returnType": "\"work\" | \"education\"",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getSelectedTechnologiesTab",
                    "args": [],
                    "optional": false,
                    "returnType": "\"technologies\" | \"other\"",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getUsersState",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initUser",
                    "args": [
                        {
                            "name": "isFirstTime",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        },
                        {
                            "name": "isGuest",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        },
                        {
                            "name": "user",
                            "type": "firebase.default.User | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentRoute",
                            "type": "string | \"main\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "isFirstTime",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isGuest",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "user",
                            "type": "firebase.default.User | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentRoute",
                            "type": "string | \"main\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectToSavedRoute",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "removeItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveSelectedSubTechnologiesTab",
                    "args": [
                        {
                            "name": "selectedTab",
                            "type": "\"frontend\" | \"backend\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "selectedTab",
                            "type": "\"frontend\" | \"backend\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveSelectedTab",
                    "args": [
                        {
                            "name": "selectedTab",
                            "type": "\"work\" | \"education\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "selectedTab",
                            "type": "\"work\" | \"education\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveSelectedTechnologiesTab",
                    "args": [
                        {
                            "name": "selectedTab",
                            "type": "\"technologies\" | \"other\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "selectedTab",
                            "type": "\"technologies\" | \"other\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDarkMode",
                    "args": [
                        {
                            "name": "isDark",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 219,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "isDark",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setIsFirstTime",
                    "args": [
                        {
                            "name": "isFirstTime",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 263,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "isFirstTime",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setLanguage",
                    "args": [
                        {
                            "name": "language",
                            "type": "\"ru\" | \"en\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 237,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "language",
                            "type": "\"ru\" | \"en\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setNewUserState",
                    "args": [
                        {
                            "name": "newUsersState",
                            "type": "TLocalstorageUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "newUsersState",
                            "type": "TLocalstorageUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setUser",
                    "args": [
                        {
                            "name": "userData",
                            "type": "firebase.default.User | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "userData",
                            "type": "firebase.default.User | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setUsersState",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCurrentRoute",
                    "args": [
                        {
                            "name": "route",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { isPlatformBrowser } from '@angular/common';\r\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { ERoute } from '@core/enum/route.enum';\r\n\r\nimport { TLocalstorageUser } from '@layout/store/model/localstorage-user.type';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class LocalStorageService {\r\n    private isBrowser: boolean;\r\n    private readonly USER_STATE_KEY = 'usersState';\r\n\r\n    constructor(\r\n        @Inject(PLATFORM_ID) private platformId: Object,\r\n        @Inject(Router) private readonly _router: Router,\r\n    ) {\r\n        this.isBrowser = isPlatformBrowser(this.platformId);\r\n    }\r\n\r\n    private get localStorageAvailable(): boolean {\r\n        return this.isBrowser && typeof localStorage !== 'undefined';\r\n    }\r\n\r\n    getUsersState(): any {\r\n        if (this.localStorageAvailable) {\r\n            const state = localStorage.getItem(this.USER_STATE_KEY);\r\n            return state ? JSON.parse(state) : null;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setUsersState(state: any): void {\r\n        if (this.localStorageAvailable) {\r\n            localStorage.setItem(this.USER_STATE_KEY, JSON.stringify(state));\r\n        }\r\n    }\r\n\r\n    clearUserData(): void {\r\n        if (this.localStorageAvailable) {\r\n            localStorage.removeItem(this.USER_STATE_KEY);\r\n        }\r\n    }\r\n\r\n    checkLocalStorageUserName(): string {\r\n        const state = this.getUsersState();\r\n        return state && state.user ? state.user.displayName : '';\r\n    }\r\n\r\n    public getItem(key: string): string | null {\r\n        if (this.localStorageAvailable) {\r\n            return localStorage['getItemkey'];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public setItem(key: string, value: string): void {\r\n        if (this.localStorageAvailable) {\r\n            localStorage.setItem(key, value);\r\n        }\r\n    }\r\n\r\n    public removeItem(key: string): void {\r\n        if (this.localStorageAvailable) {\r\n            localStorage['removeItemKey'];\r\n        }\r\n    }\r\n\r\n    public initUser(\r\n        isFirstTime: boolean = false,\r\n        isGuest: boolean = false,\r\n        user: firebase.default.User | null,\r\n        currentRoute: string | 'main',\r\n    ): void {\r\n        if (\r\n            this.localStorageAvailable &&\r\n            !localStorage.getItem(this.USER_STATE_KEY)\r\n        ) {\r\n            const usersState: TLocalstorageUser = {\r\n                isFirstTime: isFirstTime,\r\n                isGuest: isGuest,\r\n                user: user,\r\n                currentRoute: `${ERoute.LAYOUT}/${currentRoute}`,\r\n                experienceRoute: 'work',\r\n                technologiesRoute: 'technologies',\r\n                subTechnologiesRoute: 'frontend',\r\n                isDark: false,\r\n                language: 'ru',\r\n            };\r\n            console.log('Initializing user state:', usersState); // Добавьте это для отладки\r\n            localStorage.setItem(\r\n                this.USER_STATE_KEY,\r\n                JSON.stringify(usersState),\r\n            );\r\n        }\r\n    }\r\n\r\n    public setUser(userData: firebase.default.User | null): void {\r\n        if (this.localStorageAvailable) {\r\n            const usersState = this.getUsersState();\r\n            if (usersState) {\r\n                usersState.user = userData;\r\n                console.log('Setting user data:', usersState); // Добавьте это для отладки\r\n                localStorage.setItem(\r\n                    this.USER_STATE_KEY,\r\n                    JSON.stringify(usersState),\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    public setNewUserState(newUsersState: TLocalstorageUser): void {\r\n        if (this.localStorageAvailable) {\r\n            localStorage.setItem(\r\n                this.USER_STATE_KEY,\r\n                JSON.stringify(newUsersState),\r\n            );\r\n        }\r\n    }\r\n\r\n    public updateCurrentRoute(route: string): void {\r\n        if (this.localStorageAvailable) {\r\n            const usersState = this.getUsersState();\r\n            if (usersState) {\r\n                usersState.currentRoute = route;\r\n                localStorage.setItem(\r\n                    this.USER_STATE_KEY,\r\n                    JSON.stringify(usersState),\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    public redirectToSavedRoute(): void {\r\n        if (this.localStorageAvailable) {\r\n            const usersState = this.getUsersState();\r\n            if (usersState && (usersState.user || usersState.isGuest)) {\r\n                const route = usersState.currentRoute || '/';\r\n                this._router.navigate([route]);\r\n            }\r\n        }\r\n    }\r\n\r\n    public saveSelectedTab(selectedTab: 'work' | 'education'): void {\r\n        if (this.localStorageAvailable) {\r\n            const usersState = this.getUsersState();\r\n            if (usersState && (usersState.user || usersState.isGuest)) {\r\n                usersState.experienceRoute = selectedTab;\r\n                localStorage.setItem(\r\n                    this.USER_STATE_KEY,\r\n                    JSON.stringify(usersState),\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    public getSelectedTab(): 'work' | 'education' {\r\n        if (this.localStorageAvailable) {\r\n            const usersState = this.getUsersState();\r\n            if (usersState && (usersState.user || usersState.isGuest)) {\r\n                return usersState.experienceRoute || 'work';\r\n            }\r\n        }\r\n        return 'work';\r\n    }\r\n\r\n    public saveSelectedTechnologiesTab(\r\n        selectedTab: 'technologies' | 'other',\r\n    ): void {\r\n        if (this.localStorageAvailable) {\r\n            const usersState = this.getUsersState();\r\n            if (usersState && (usersState.user || usersState.isGuest)) {\r\n                usersState.technologiesRoute = selectedTab;\r\n                localStorage.setItem(\r\n                    this.USER_STATE_KEY,\r\n                    JSON.stringify(usersState),\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    public getSelectedTechnologiesTab(): 'technologies' | 'other' {\r\n        if (this.localStorageAvailable) {\r\n            const usersState = this.getUsersState();\r\n            if (usersState && (usersState.user || usersState.isGuest)) {\r\n                return usersState.technologiesRoute || 'technologies';\r\n            }\r\n        }\r\n        return 'technologies';\r\n    }\r\n\r\n    public saveSelectedSubTechnologiesTab(\r\n        selectedTab: 'frontend' | 'backend',\r\n    ): void {\r\n        if (this.localStorageAvailable) {\r\n            const usersState = this.getUsersState();\r\n            if (usersState && (usersState.user || usersState.isGuest)) {\r\n                usersState.subTechnologiesRoute = selectedTab;\r\n                localStorage.setItem(\r\n                    this.USER_STATE_KEY,\r\n                    JSON.stringify(usersState),\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    public getSelectedSubTechnologiesTab(): 'frontend' | 'backend' {\r\n        if (this.localStorageAvailable) {\r\n            const usersState = this.getUsersState();\r\n            if (usersState && (usersState.user || usersState.isGuest)) {\r\n                return usersState.subTechnologiesRoute || 'frontend';\r\n            }\r\n        }\r\n        return 'frontend';\r\n    }\r\n\r\n    public setDarkMode(isDark: boolean): void {\r\n        if (this.localStorageAvailable) {\r\n            const usersState = this.getUsersState();\r\n            if (usersState) {\r\n                usersState.isDark = isDark;\r\n                this.setItem(this.USER_STATE_KEY, JSON.stringify(usersState));\r\n            }\r\n        }\r\n    }\r\n\r\n    public getDarkMode(): boolean {\r\n        if (this.localStorageAvailable) {\r\n            const usersState = this.getUsersState();\r\n            return usersState ? usersState.isDark : false;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public setLanguage(language: 'ru' | 'en'): void {\r\n        if (this.localStorageAvailable) {\r\n            const usersState = this.getUsersState();\r\n            if (usersState) {\r\n                usersState.language = language;\r\n                this.setItem(this.USER_STATE_KEY, JSON.stringify(usersState));\r\n            }\r\n        }\r\n    }\r\n\r\n    public getLanguage(): 'ru' | 'en' {\r\n        if (this.localStorageAvailable) {\r\n            const usersState = this.getUsersState();\r\n            return usersState ? usersState.language : 'ru';\r\n        }\r\n        return 'ru';\r\n    }\r\n\r\n    public getIsFirstTime(): boolean {\r\n        if (this.localStorageAvailable) {\r\n            const usersState = this.getUsersState();\r\n            return usersState ? usersState.isFirstTime : true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public setIsFirstTime(isFirstTime: boolean): void {\r\n        if (this.localStorageAvailable) {\r\n            const usersState = this.getUsersState();\r\n            if (usersState) {\r\n                usersState.isFirstTime = isFirstTime;\r\n                this.setUsersState(usersState);\r\n            }\r\n        }\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "localStorageAvailable": {
                    "name": "localStorageAvailable",
                    "getSignature": {
                        "name": "localStorageAvailable",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 23
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ModalService",
            "id": "injectable-ModalService-d460712c412207829848ce43acaa8d43e6d3e52d53b871545bedb8833a94fca04099b6f51e29078d196e251c6fcd9451a3176558aa1d6ee628a6bb3a5a599178",
            "file": "src/app/core/service/modal/modal.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "openLoginForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "openLogoutForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, ViewContainerRef } from '@angular/core';\r\n\r\nimport { LoginFormComponent } from '@layout/components/login-form/login-form.component';\r\nimport { LogoutFormComponent } from '@layout/components/logout-form/logout-form.component';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ModalService {\r\n    constructor(private viewContainerRef: ViewContainerRef) {}\r\n\r\n    public openLoginForm() {\r\n        this.viewContainerRef.createComponent(LoginFormComponent);\r\n    }\r\n\r\n    public openLogoutForm() {\r\n        this.viewContainerRef.createComponent(LogoutFormComponent);\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "PlatformService",
            "id": "injectable-PlatformService-bed658e82b9ba1ed7c52f828158fe29685badd3185ec79a58d03358fc4ce51e9c39fbb7f8e2f4ff3410b08f308c382cdb28b369e0b18ee1db07de5913f26f9e9",
            "file": "src/app/core/service/platform/platform.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class PlatformService {\r\n    constructor() {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ThemeService",
            "id": "injectable-ThemeService-041cbfcad71e09c67aa936d887ba174bba97c93f763d1b3831b44d02a696e3622c9b7fd4e7e150a84061e95b0a0c109e9666cb4dd59ea85eedc5aedad46a958b",
            "file": "src/app/core/service/theme/theme.service.ts",
            "properties": [
                {
                    "name": "themeSignal",
                    "defaultValue": "signal<string>('dark-theme')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [
                {
                    "name": "setTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, signal } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ThemeService {\r\n    public themeSignal = signal<string>('dark-theme');\r\n\r\n    setTheme(theme: string) {\r\n        this.themeSignal.set(theme);\r\n    }\r\n\r\n    updateTheme() {\r\n        this.themeSignal.update((value) =>\r\n            value === 'dark-theme' ? 'light-theme' : 'dark-theme',\r\n        );\r\n    }\r\n\r\n    constructor() {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TranslationService",
            "id": "injectable-TranslationService-6421570e86b06a405183e29a9271efe28ba3ca0d78a67a630a218f896e47bae278b20f5549f3ea9058e2b8fedc0a3c2edd433df74030c76f3d9e4c6279709832",
            "file": "src/app/core/service/translation/translation.service.ts",
            "properties": [
                {
                    "name": "_isBrowser",
                    "defaultValue": "isPlatformBrowser(this.platformId)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "translations",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getTranslation",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTranslations",
                    "args": [
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "translations",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "translations",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\nimport { isPlatformBrowser } from '@angular/common';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class TranslationService {\r\n    private translations: any = {};\r\n    private _isBrowser: boolean = isPlatformBrowser(this.platformId);\r\n\r\n    constructor(\r\n        private http: HttpClient,\r\n        @Inject(PLATFORM_ID) private platformId: Object,\r\n    ) {}\r\n\r\n    // loadTranslations(language: string): Observable<any> {\r\n    //     const baseUrl = this._isBrowser ? '' : 'http://localhost:4000'; // Замените на ваш базовый URL\r\n    //     return this.http.get(`${baseUrl}/assets/i18n/${language}`);\r\n    // }\r\n\r\n    public setTranslations(language: string, translations: any): void {\r\n        this.translations[language] = translations;\r\n    }\r\n\r\n    public getTranslation(key: string, language: string): string {\r\n        return this.translations[language][key] || key;\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [
        {
            "name": "LoadingInterceptor",
            "id": "injectable-LoadingInterceptor-04400cbabb23ae059bb8615dec5f22d18d4fbe3afb5e07c8b4bb74b268bf8f5c45e56331606e20015690b5e0bb64baace1774ffe2d6ee7ab4331c35465a53ffd",
            "file": "src/app/core/interceptors/loading.interceptor.ts",
            "properties": [
                {
                    "name": "cache",
                    "defaultValue": "new Map<string, HttpResponse<unknown>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "handleRequest",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<>>",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<>>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Observable, catchError, finalize, of, tap, throwError } from 'rxjs';\r\n\r\nimport {\r\n    HttpEvent,\r\n    HttpHandler,\r\n    HttpInterceptor,\r\n    HttpRequest,\r\n    HttpResponse,\r\n} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { Store } from '@ngrx/store';\r\n\r\nimport { ISpinner } from '@layout/store/model/spinner.interface';\r\nimport {\r\n    hideSpinner,\r\n    showSpinner,\r\n} from '@layout/store/spinner-store/spinner.actions';\r\n\r\n@Injectable()\r\nexport class LoadingInterceptor implements HttpInterceptor {\r\n    private cache = new Map<string, HttpResponse<unknown>>();\r\n\r\n    constructor(private _store: Store<ISpinner>) {}\r\n\r\n    intercept(\r\n        req: HttpRequest<unknown>,\r\n        next: HttpHandler,\r\n    ): Observable<HttpEvent<unknown>> {\r\n        if (req.method !== 'GET') {\r\n            return this.handleRequest(req, next);\r\n        }\r\n\r\n        const cachedResponse = this.cache.get(req.urlWithParams);\r\n        if (cachedResponse) {\r\n            return of(cachedResponse);\r\n        }\r\n\r\n        return this.handleRequest(req, next).pipe(\r\n            tap((event) => {\r\n                if (event instanceof HttpResponse) {\r\n                    this.cache.set(req.urlWithParams, event);\r\n                }\r\n            }),\r\n        );\r\n    }\r\n\r\n    private handleRequest(\r\n        req: HttpRequest<unknown>,\r\n        next: HttpHandler,\r\n    ): Observable<HttpEvent<unknown>> {\r\n        this._store.dispatch(showSpinner());\r\n        return next.handle(req).pipe(\r\n            catchError((error) => {\r\n                console.error('An error occurred:', error);\r\n                return throwError(error);\r\n            }),\r\n            finalize(() => {\r\n                this._store.dispatch(hideSpinner());\r\n            }),\r\n        );\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store",
                        "type": "Store<ISpinner>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "_store",
                        "type": "Store<ISpinner>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "ModalDialogBase",
            "id": "class-ModalDialogBase-6fba34c1480dd0dc34de1c84c52183a0db6ff4e9bf4f20f5b77d05a86198585419e535cc5ce58a038724b71f97b898afbaa65e8c4c2f4b71c4751e1c367794e6",
            "file": "src/app/core/enum/modal-dialog.base.enum.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Subject } from 'rxjs';\r\n\r\nexport abstract class ModalDialogBase {\r\n    public abstract getDialogState(): Subject<ModalDialogResult>;\r\n}\r\n\r\nexport enum ModalDialogResult {\r\n    Opened,\r\n    Confirmed,\r\n    Closed,\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "getDialogState",
                    "args": [],
                    "optional": false,
                    "returnType": "Subject<ModalDialogResult>",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        128
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "EvenColumnDirective",
            "id": "directive-EvenColumnDirective-7bfb724bce9e9357615ae2d808fc314c81be05ef2631a1d18ef8eef1b9b8e68ba3fb67a85ac4ec5c1d26331bfca1aacbbdbf2f3cbe8feb288ef03e6abb5f8b43",
            "file": "src/app/core/directives/even-column.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { AfterViewInit, Directive, ElementRef, Renderer2 } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[cvEvenColumn]',\r\n    standalone: true,\r\n})\r\nexport class EvenColumnDirective implements AfterViewInit {\r\n    constructor(\r\n        private el: ElementRef,\r\n        private renderer: Renderer2,\r\n    ) {}\r\n\r\n    ngAfterViewInit() {\r\n        const parent = this.el.nativeElement.parentElement;\r\n        const columns = Array.from(parent.children);\r\n        const columnCount = getComputedStyle(parent)\r\n            .getPropertyValue('grid-template-columns')\r\n            .split(' ').length;\r\n\r\n        columns.forEach((column, index) => {\r\n            const columnIndex = index % columnCount;\r\n            if ((columnIndex + 1) % 2 === 0) {\r\n                this.renderer.addClass(column, 'even-column');\r\n            }\r\n        });\r\n    }\r\n}\r\n",
            "selector": "[cvEvenColumn]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": [],
            "implements": [
                "AfterViewInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AnimationBgComponent",
            "id": "component-AnimationBgComponent-ee6dd582cff8f54b739227a40a63eb84833b895d8d9334fac0ce85fe58c5f86e81455789562a0b7de74a2851f24ca36e2e868027e195153acf0d9230acc5307d",
            "file": "src/app/layout/components/animation-bg/animation-bg.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cv-animation-bg",
            "styleUrls": [
                "./animation-bg.component.scss",
                "./animation-bg-dark-mode/animation-bg-dark-mode.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./animation-bg.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "navigationLinks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "INavigation[] | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "animationBlobs",
                    "defaultValue": "[\r\n        {\r\n            width: '70px',\r\n            height: '70px',\r\n            'animation-duration': '6s',\r\n        },\r\n        {\r\n            width: '50px',\r\n            height: '50px',\r\n            'animation-duration': '2s',\r\n        },\r\n        {\r\n            width: '100px',\r\n            height: '100px',\r\n            'animation-duration': '4s',\r\n        },\r\n        {\r\n            width: '40px',\r\n            height: '40px',\r\n            'animation-duration': '2.5s',\r\n        },\r\n        {\r\n            width: '90px',\r\n            height: '90px',\r\n            'animation-duration': '2.8s',\r\n        },\r\n        {\r\n            width: '80px',\r\n            height: '80px',\r\n            'animation-duration': '5s',\r\n        },\r\n        {\r\n            width: '65px',\r\n            height: '65px',\r\n            'animation-duration': '3s',\r\n        },\r\n    ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "currentTheme$",
                    "defaultValue": "this._store$.pipe(\r\n        select(darkModeSelector),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgStyle"
                },
                {
                    "name": "NgClass"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\nimport { AsyncPipe, NgClass, NgStyle } from '@angular/common';\r\nimport {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    Inject,\r\n    Input,\r\n} from '@angular/core';\r\n\r\nimport { Store, select } from '@ngrx/store';\r\n\r\nimport { INavigation } from '@core/models/navigation.interface';\r\nimport { blobFloat } from '@core/utils/animations/bg-layout.animation';\r\n\r\nimport { darkModeSelector } from '@layout/store/dark-mode-store/dark-mode.selectors';\r\nimport { TDarkMode } from '@layout/store/model/dark-mode.type';\r\n\r\n@Component({\r\n    selector: 'cv-animation-bg',\r\n    standalone: true,\r\n    imports: [NgStyle, NgClass, AsyncPipe],\r\n    templateUrl: './animation-bg.component.html',\r\n    styleUrls: [\r\n        './animation-bg.component.scss',\r\n        './animation-bg-dark-mode/animation-bg-dark-mode.component.scss',\r\n    ],\r\n    animations: [blobFloat],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AnimationBgComponent {\r\n    @Input() public navigationLinks: INavigation[] | null = [];\r\n    public currentTheme$: Observable<boolean> = this._store$.pipe(\r\n        select(darkModeSelector),\r\n    );\r\n\r\n    constructor(@Inject(Store) private _store$: Store<TDarkMode>) {}\r\n\r\n    public animationBlobs: any[] = [\r\n        {\r\n            width: '70px',\r\n            height: '70px',\r\n            'animation-duration': '6s',\r\n        },\r\n        {\r\n            width: '50px',\r\n            height: '50px',\r\n            'animation-duration': '2s',\r\n        },\r\n        {\r\n            width: '100px',\r\n            height: '100px',\r\n            'animation-duration': '4s',\r\n        },\r\n        {\r\n            width: '40px',\r\n            height: '40px',\r\n            'animation-duration': '2.5s',\r\n        },\r\n        {\r\n            width: '90px',\r\n            height: '90px',\r\n            'animation-duration': '2.8s',\r\n        },\r\n        {\r\n            width: '80px',\r\n            height: '80px',\r\n            'animation-duration': '5s',\r\n        },\r\n        {\r\n            width: '65px',\r\n            height: '65px',\r\n            'animation-duration': '3s',\r\n        },\r\n    ];\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../assets/styles/variables' as color;\r\n\r\n.animation-bg {\r\n    position: absolute;\r\n    top: 100px;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 300px;\r\n    overflow: hidden;\r\n\r\n    .circles-list {\r\n        display: flex;\r\n        justify-content: space-around;\r\n        width: 100%;\r\n        height: 100%;\r\n\r\n        .circle-element {\r\n            display: flex;\r\n            align-items: flex-start;\r\n            width: fit-content;\r\n            height: 100%;\r\n\r\n            &_img {\r\n                animation: spin infinite linear;\r\n                animation-fill-mode: forwards;\r\n                border-radius: 50%;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@keyframes spin {\r\n    0%,\r\n    100% {\r\n        transform: translateY(0);\r\n    }\r\n    50% {\r\n        transform: translateY(200%);\r\n    }\r\n}\r\n\r\n.visible {\r\n    opacity: 0;\r\n    transition: opacity 1.5s ease-in-out;\r\n}\r\n.visible.fade-in {\r\n    opacity: 1;\r\n}\r\n\r\n.hidden {\r\n    opacity: 0;\r\n}\r\n\r\n.circle-element_img {\r\n    --size: 250px;\r\n    margin: calc(var(--size) / -2);\r\n    width: var(--size);\r\n    height: var(--size);\r\n\r\n    span {\r\n        display: inline-block;\r\n        position: relative;\r\n        border-radius: 50%;\r\n        background: black;\r\n    }\r\n\r\n    p {\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 50%;\r\n    }\r\n\r\n    p:nth-child(1) {\r\n        position: absolute;\r\n        animation: skewing-child 1s ease-in-out infinite alternate;\r\n\r\n        span {\r\n            animation: moving 2s cubic-bezier(0.97, 0.01, 0.12, 0.99) infinite alternate;\r\n            margin: calc(var(--size) / -20);\r\n            width: calc(var(--size) / 10);\r\n            height: calc(var(--size) / 10);\r\n        }\r\n    }\r\n\r\n    p:nth-child(2) {\r\n        position: absolute;\r\n        animation: squishing 1s ease-in-out infinite alternate;\r\n\r\n        span {\r\n            top: 50%;\r\n            left: 50%;\r\n            animation: skewing 2s 1.5s ease-in-out infinite;\r\n            margin: calc(var(--size) / -8);\r\n            width: calc(var(--size) / 4);\r\n            height: calc(var(--size) / 4);\r\n        }\r\n    }\r\n}\r\n\r\n@keyframes skewing {\r\n    0% {\r\n        transform: skewY(6deg);\r\n    }\r\n    10% {\r\n        transform: skewY(-6deg);\r\n    }\r\n    20% {\r\n        transform: skewY(4deg);\r\n    }\r\n    30% {\r\n        transform: skewY(-4deg);\r\n    }\r\n    40% {\r\n        transform: skewY(2deg);\r\n    }\r\n    50% {\r\n        transform: skewY(-6deg);\r\n    }\r\n    55% {\r\n        transform: skewY(6deg);\r\n    }\r\n    60% {\r\n        transform: skewY(-5deg);\r\n    }\r\n    65% {\r\n        transform: skewY(5deg);\r\n    }\r\n    70% {\r\n        transform: skewY(-4deg);\r\n    }\r\n    75% {\r\n        transform: skewY(4deg);\r\n    }\r\n    80% {\r\n        transform: skewY(-3deg);\r\n    }\r\n    85% {\r\n        transform: skewY(3deg);\r\n    }\r\n    90% {\r\n        transform: skewY(-2deg);\r\n    }\r\n    95% {\r\n        transform: skewY(2deg);\r\n    }\r\n    100% {\r\n        transform: skewY(1deg);\r\n    }\r\n}\r\n\r\n@keyframes skewing-child {\r\n    0% {\r\n        transform: skewY(-10deg);\r\n    }\r\n    100% {\r\n        transform: skewY(10deg);\r\n    }\r\n}\r\n\r\n@keyframes moving {\r\n    0% {\r\n        transform: translateY(calc(var(--size) / -2.5));\r\n    }\r\n    30% {\r\n        transform: translateY(calc(var(--size) / -10));\r\n    }\r\n    70% {\r\n        transform: translateY(calc(var(--size) / 10));\r\n    }\r\n    100% {\r\n        transform: translateY(calc(var(--size) / 2.5));\r\n    }\r\n}\r\n\r\n@keyframes squishing {\r\n    10%,\r\n    40%,\r\n    80% {\r\n        transform: scale(1.1, 0.9);\r\n    }\r\n    0%,\r\n    30%,\r\n    60%,\r\n    100% {\r\n        transform: scale(0.9, 1.1);\r\n    }\r\n}\r\n",
                    "styleUrl": "./animation-bg.component.scss"
                },
                {
                    "data": "@use '../../../../../assets/styles/variables' as color;\r\n\r\n.animation-bg {\r\n    .circles-list {\r\n        .circle-element {\r\n            &_img.dark-blob {\r\n                > * {\r\n                    > * {\r\n                        background-color: red;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Интересный скролл\r\n// ::-webkit-scrollbar {\r\n//     width: 4px;\r\n//     height: 26px;\r\n// }\r\n\r\n// ::-webkit-scrollbar-track {\r\n//     background: transparent;\r\n// }\r\n\r\n// ::-webkit-scrollbar-thumb {\r\n//     opacity: 0.68 !important;\r\n//     cursor: pointer;\r\n//     border-radius: 4px;\r\n//     background: #7e858e;\r\n//     width: 4px;\r\n//     height: 26px;\r\n// }\r\n\r\n// ::-webkit-scrollbar-thumb:hover {\r\n//     opacity: 1 !important;\r\n// }\r\n",
                    "styleUrl": "./animation-bg-dark-mode/animation-bg-dark-mode.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store$",
                        "type": "Store<TDarkMode>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "_store$",
                        "type": "Store<TDarkMode>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div\r\n    class=\"animation-bg\"\r\n    [ngClass]=\"{\r\n        'visible fade-in': navigationLinks && navigationLinks.length > 0,\r\n        hidden: !(navigationLinks && navigationLinks.length > 0),\r\n    }\"\r\n>\r\n    <div class=\"circles-list\">\r\n        @for (blob of animationBlobs; track $index) {\r\n            <div\r\n                class=\"circle-element_img\"\r\n                [ngClass]=\"{ 'dark-blob': currentTheme$ | async }\"\r\n                [ngStyle]=\"blob\"\r\n            >\r\n                <p><span></span></p>\r\n                <p><span></span></p>\r\n            </div>\r\n        }\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-67e4508004ff1c56eb57f31dcc7002e2767b076ca2a2b35912de482e042732101e7a653586f65d7b50a7a5d4c2ed0e6244ff6dcf02ec08f062f515282ecfbec5",
            "file": "src/app/app.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cv-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "title",
                    "defaultValue": "'cv_2.0'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Subject, takeUntil } from 'rxjs';\r\n\r\nimport {\r\n    ApplicationRef,\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    NgZone,\r\n    OnDestroy,\r\n    inject,\r\n    ɵglobal,\r\n} from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\n\r\nimport { TranslationService } from '@core/service/translation/translation.service';\r\n\r\n@Component({\r\n    selector: 'cv-root',\r\n    standalone: true,\r\n    imports: [RouterOutlet],\r\n    templateUrl: './app.component.html',\r\n    styleUrl: './app.component.scss',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AppComponent implements OnDestroy {\r\n    title = 'cv_2.0';\r\n\r\n    private _destroyed$: Subject<void> = new Subject();\r\n\r\n    constructor(private translationService: TranslationService) {}\r\n\r\n    ngOnInit(): void {\r\n        // this.loadTranslations('en');\r\n    }\r\n\r\n    // loadTranslations(language: string): void {\r\n    //     this.translationService\r\n    //         .loadTranslations(language)\r\n    //         .pipe(takeUntil(this._destroyed$))\r\n    //         .subscribe((translations) => {\r\n    //             this.translationService.setTranslations(language, translations);\r\n    //         });\r\n    // }\r\n    ngOnDestroy(): void {\r\n        this._destroyed$.next();\r\n        this._destroyed$.complete();\r\n    }\r\n}\r\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translationService",
                        "type": "TranslationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "translationService",
                        "type": "TranslationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<router-outlet></router-outlet>\r\n"
        },
        {
            "name": "AsideNavigationExperienceComponent",
            "id": "component-AsideNavigationExperienceComponent-521bedc75a185a494d6aff32bcd53759d6c83aaf3447bf585a4c038572cd051f9102847b854fd3495d14792ae7dbe6480ccfdbfdcd7bdbdd49c922310056e31e",
            "file": "src/app/layout/components/aside-navigation-experience/aside-navigation-experience.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cv-aside-navigation-experience",
            "styleUrls": [
                "./aside-navigation-experience.component.scss",
                "./aside-navigation-experience-dm/aside-navigation-experience-dm.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./aside-navigation-experience.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "emittedTab",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "currentSkills",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "hardSkillsNavigation$",
                    "defaultValue": "this._store$.pipe(\r\n        select(selectHardSkillsNav),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<INavigation[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "navigationList",
                    "defaultValue": "input<\r\n        TExperienceAside[]\r\n    >([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<TExperienceAside[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "selectedTab",
                    "defaultValue": "'work'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"work\" | \"education\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "theme",
                    "defaultValue": "input<boolean | null>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeSkillsList",
                    "args": [
                        {
                            "name": "tab",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeTab",
                    "args": [
                        {
                            "name": "tab",
                            "type": "\"education\" | \"work\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "\"education\" | \"work\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgClass"
                },
                {
                    "name": "RouterLinkActive"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Observable, Subject, takeUntil } from 'rxjs';\r\n\r\nimport { AsyncPipe, NgClass } from '@angular/common';\r\nimport {\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    EventEmitter,\r\n    Inject,\r\n    InputSignal,\r\n    OnDestroy,\r\n    OnInit,\r\n    Output,\r\n    input,\r\n} from '@angular/core';\r\nimport { RouterLinkActive } from '@angular/router';\r\n\r\nimport { Store, select } from '@ngrx/store';\r\n\r\nimport { TExperienceAside } from '@core/models/experience-aside.type';\r\nimport { INavigation } from '@core/models/navigation.interface';\r\nimport { LocalStorageService } from '@core/service/local-storage/local-storage.service';\r\n\r\nimport { FirebaseActions } from '@layout/store/firebase-store/firebase.actions';\r\nimport { selectHardSkillsNav } from '@layout/store/firebase-store/firebase.selectors';\r\n\r\n@Component({\r\n    selector: 'cv-aside-navigation-experience',\r\n    standalone: true,\r\n    imports: [NgClass, RouterLinkActive, AsyncPipe],\r\n    templateUrl: './aside-navigation-experience.component.html',\r\n    styleUrls: [\r\n        './aside-navigation-experience.component.scss',\r\n        './aside-navigation-experience-dm/aside-navigation-experience-dm.component.scss',\r\n    ],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AsideNavigationExperienceComponent implements OnInit, OnDestroy {\r\n    @Output() public emittedTab = new EventEmitter<string>();\r\n\r\n    public hardSkillsNavigation$: Observable<INavigation[]> = this._store$.pipe(\r\n        select(selectHardSkillsNav),\r\n    );\r\n    public theme = input<boolean | null>(false);\r\n    public navigationList: InputSignal<TExperienceAside[]> = input<\r\n        TExperienceAside[]\r\n    >([]);\r\n    public currentSkills: string = '';\r\n    public selectedTab: 'work' | 'education' = 'work';\r\n\r\n    private _destroyed$: Subject<void> = new Subject();\r\n\r\n    constructor(\r\n        private _cdr: ChangeDetectorRef,\r\n        @Inject(Store) private _store$: Store<INavigation>,\r\n        private _localStorageService: LocalStorageService,\r\n    ) {}\r\n\r\n    public changeTab(tab: 'education' | 'work') {\r\n        this.selectedTab = tab;\r\n        this._localStorageService.saveSelectedTab(tab);\r\n        if (this.currentSkills && this.selectedTab === 'work') {\r\n            this.emittedTab.emit(this.currentSkills);\r\n        } else {\r\n            this.emittedTab.emit(this.selectedTab);\r\n        }\r\n        this._cdr.detectChanges();\r\n    }\r\n\r\n    public changeSkillsList(tab: string) {\r\n        this.currentSkills = tab;\r\n        this.emittedTab.emit(this.currentSkills);\r\n        this._cdr.detectChanges();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.selectedTab = this._localStorageService.getSelectedTab();\r\n        this._store$.dispatch(\r\n            FirebaseActions.getHardSkillsNav({ imgName: '' }),\r\n        );\r\n        this.hardSkillsNavigation$\r\n            .pipe(takeUntil(this._destroyed$))\r\n            .subscribe((skills: INavigation[]) => {\r\n                const skill = skills.find((skill) => skill.id === '1');\r\n                if (skill) {\r\n                    this.currentSkills = skill.link;\r\n                    this._cdr.detectChanges();\r\n                }\r\n            });\r\n        this.emittedTab.emit(this.selectedTab);\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._destroyed$.next();\r\n        this._destroyed$.complete();\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../assets/styles/variables' as color;\r\n\r\n.aside-navigation {\r\n    position: relative;\r\n    .navigation-list {\r\n        display: flex;\r\n        row-gap: calc(10px + 20 * (100vw / 1920));\r\n        flex-direction: column;\r\n\r\n        .item-button {\r\n            cursor: pointer;\r\n            background-color: transparent;\r\n            color: color.$darkGray;\r\n            font-size: calc(20px + 30 * (100vw / 1920));\r\n            line-height: 51.1px;\r\n            font-family: 'RS-regular';\r\n        }\r\n    }\r\n\r\n    .skills-switcher {\r\n        .skills-list {\r\n            display: flex;\r\n            row-gap: 20px;\r\n            flex-direction: column;\r\n            .skill-item {\r\n                &_link {\r\n                    position: relative;\r\n                    align-items: center;\r\n                    transition: color 0.5s ease-in-out;\r\n                    cursor: pointer;\r\n                    color: color.$black;\r\n                    font-size: calc(10px + 10 * (100vw / 1920));\r\n                }\r\n\r\n                .active {\r\n                    color: color.$blue;\r\n                }\r\n\r\n                .active::before,\r\n                .active::after {\r\n                    position: absolute;\r\n                    top: 50%;\r\n                    transform: translateY(-50%);\r\n                    opacity: 0;\r\n                    transition: opacity 0.3s;\r\n                }\r\n\r\n                .active::after {\r\n                    left: -15px;\r\n                    content: '<';\r\n                }\r\n\r\n                .active::before {\r\n                    right: -15px;\r\n                    content: '>';\r\n                }\r\n\r\n                .active::before,\r\n                .active::after {\r\n                    opacity: 1;\r\n                }\r\n\r\n                &_link:hover {\r\n                    color: color.$blue;\r\n                }\r\n\r\n                &_link {\r\n                    position: relative;\r\n                    align-items: center;\r\n                    transition: color 0.5s ease-in-out;\r\n                    cursor: pointer;\r\n                    color: color.$black;\r\n                    font-size: calc(10px + 10 * (100vw / 1920));\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n.active {\r\n    color: color.$black;\r\n}\r\n",
                    "styleUrl": "./aside-navigation-experience.component.scss"
                },
                {
                    "data": "@use '../../../../../assets/styles/variables' as color;\r\n\r\n.aside-navigation.dark-theme {\r\n    .navigation-list {\r\n        .navigation_item {\r\n            .item-button {\r\n                color: color.$dm-dark-gray;\r\n            }\r\n        }\r\n\r\n        .skills-switcher {\r\n            .skills-list {\r\n                .skill-item {\r\n                    &_link {\r\n                        color: color.$dm-dark-text;\r\n                    }\r\n\r\n                    .active {\r\n                        color: color.$blue;\r\n                    }\r\n\r\n                    &_link:hover {\r\n                        color: color.$blue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    .active {\r\n        color: color.$white;\r\n    }\r\n}\r\n",
                    "styleUrl": "./aside-navigation-experience-dm/aside-navigation-experience-dm.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_store$",
                        "type": "Store<INavigation>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_store$",
                        "type": "Store<INavigation>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<aside\r\n    class=\"aside-navigation\"\r\n    [ngClass]=\"{ 'dark-theme': theme() }\"\r\n>\r\n    <ul class=\"navigation-list\">\r\n        @for (navItem of navigationList(); track navItem.id) {\r\n            <li class=\"navigation_item\">\r\n                <button\r\n                    type=\"button\"\r\n                    class=\"item-button\"\r\n                    (click)=\"changeTab(navItem.value)\"\r\n                >\r\n                    <a [ngClass]=\"{ active: selectedTab === navItem.value }\">\r\n                        {{ navItem.title }}\r\n                    </a>\r\n                </button>\r\n            </li>\r\n        } @empty {}\r\n    </ul>\r\n</aside>\r\n"
        },
        {
            "name": "AsideNavigationSubtechnologiesComponent",
            "id": "component-AsideNavigationSubtechnologiesComponent-cee449d7b9bc95ef5971d604a862019b97865c37c5f0d16eabbdec9b4b87014df4b12a5ce487730bc103b2ec4e85200868522871531822a812e712ee82c7667a",
            "file": "src/app/layout/components/aside-navigation-subtechnologies/aside-navigation-subtechnologies.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cv-aside-navigation-subtechnologies",
            "styleUrls": [
                "./aside-navigation-subtechnologies.component.scss",
                "./aside-navigation-subtechnologies-dm/aside-navigation-subtechnologies-dm.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./aside-navigation-subtechnologies.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "emittedTab",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "currentSkills",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "hardSkillsNavigation$",
                    "defaultValue": "this._store$.pipe(\r\n        select(selectHardSkillsNav),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<INavigation[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "selectedTab",
                    "defaultValue": "'frontend'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"frontend\" | \"backend\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeRoutNavigation",
                    "args": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeSkillsList",
                    "args": [
                        {
                            "name": "tab",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgClass"
                },
                {
                    "name": "RouterLinkActive"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\nimport { AsyncPipe, NgClass } from '@angular/common';\r\nimport {\r\n    ChangeDetectorRef,\r\n    Component,\r\n    EventEmitter,\r\n    Inject,\r\n    OnInit,\r\n    Output,\r\n} from '@angular/core';\r\nimport { RouterLinkActive } from '@angular/router';\r\n\r\nimport { Store, select } from '@ngrx/store';\r\n\r\nimport { INavigation } from '@core/models/navigation.interface';\r\nimport { LocalStorageService } from '@core/service/local-storage/local-storage.service';\r\n\r\nimport { FirebaseActions } from '@layout/store/firebase-store/firebase.actions';\r\nimport { selectHardSkillsNav } from '@layout/store/firebase-store/firebase.selectors';\r\n\r\n@Component({\r\n    selector: 'cv-aside-navigation-subtechnologies',\r\n    standalone: true,\r\n    imports: [NgClass, RouterLinkActive, AsyncPipe],\r\n    templateUrl: './aside-navigation-subtechnologies.component.html',\r\n    styleUrls: [\r\n        './aside-navigation-subtechnologies.component.scss',\r\n        './aside-navigation-subtechnologies-dm/aside-navigation-subtechnologies-dm.component.scss',\r\n    ],\r\n})\r\nexport class AsideNavigationSubtechnologiesComponent implements OnInit {\r\n    public hardSkillsNavigation$: Observable<INavigation[]> = this._store$.pipe(\r\n        select(selectHardSkillsNav),\r\n    );\r\n    @Output() public emittedTab = new EventEmitter<string>();\r\n\r\n    public currentSkills: string = '';\r\n    public selectedTab: 'frontend' | 'backend' = 'frontend';\r\n\r\n    constructor(\r\n        private _cdr: ChangeDetectorRef,\r\n        @Inject(Store) private _store$: Store<INavigation[]>,\r\n        private _localStorageService: LocalStorageService,\r\n    ) {}\r\n\r\n    public changeRoutNavigation(link: string): boolean {\r\n        return this.currentSkills === link;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.selectedTab =\r\n            this._localStorageService.getSelectedSubTechnologiesTab();\r\n        if (\r\n            this._localStorageService.getSelectedTechnologiesTab() ===\r\n            'technologies'\r\n        ) {\r\n            this.currentSkills =\r\n                this._localStorageService.getSelectedSubTechnologiesTab() ||\r\n                'frontend';\r\n            this._localStorageService.saveSelectedSubTechnologiesTab(\r\n                this.currentSkills as 'frontend' | 'backend',\r\n            );\r\n        }\r\n        this._store$.dispatch(\r\n            FirebaseActions.getHardSkillsNav({ imgName: '' }),\r\n        );\r\n        this.emittedTab.emit(this.selectedTab);\r\n    }\r\n\r\n    public changeSkillsList(tab: string) {\r\n        this.currentSkills = tab;\r\n        this._localStorageService.saveSelectedSubTechnologiesTab(\r\n            tab as 'frontend' | 'backend',\r\n        );\r\n        this.emittedTab.emit(this.currentSkills);\r\n        this._cdr.detectChanges();\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../assets/styles/variables' as color;\r\n\r\n.skills-switcher {\r\n    .skills-list {\r\n        display: flex;\r\n        row-gap: 20px;\r\n        flex-direction: column;\r\n        .skill-item {\r\n            &_link {\r\n                position: relative;\r\n                align-items: center;\r\n                transition: color 0.5s ease-in-out;\r\n                cursor: pointer;\r\n                color: color.$black;\r\n                font-size: calc(10px + 10 * (100vw / 1920));\r\n            }\r\n\r\n            .active-link {\r\n                color: color.$blue;\r\n            }\r\n\r\n            .active-link::before,\r\n            .active-link::after {\r\n                position: absolute;\r\n                top: 50%;\r\n                transform: translateY(-50%);\r\n                opacity: 0;\r\n                transition: opacity 0.3s;\r\n            }\r\n\r\n            .active-link::after {\r\n                left: -15px;\r\n                content: '<';\r\n            }\r\n\r\n            .active-link::before {\r\n                right: -15px;\r\n                content: '>';\r\n            }\r\n\r\n            .active-link::before,\r\n            .active-link::after {\r\n                opacity: 1;\r\n            }\r\n\r\n            &_link:hover {\r\n                color: color.$blue;\r\n            }\r\n\r\n            &_link {\r\n                position: relative;\r\n                align-items: center;\r\n                transition: color 0.5s ease-in-out;\r\n                cursor: pointer;\r\n                color: color.$black;\r\n                font-size: calc(10px + 10 * (100vw / 1920));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n.active {\r\n    color: color.$black;\r\n}\r\n",
                    "styleUrl": "./aside-navigation-subtechnologies.component.scss"
                },
                {
                    "data": "@use '../../../../../assets/styles/variables' as color;\r\n\r\n.skills-switcher {\r\n    .skills-list {\r\n        .skill-item {\r\n            &_link {\r\n                color: color.$dm-dark-text;\r\n            }\r\n\r\n            .active-link {\r\n                color: color.$blue;\r\n            }\r\n\r\n            &_link:hover {\r\n                color: color.$blue;\r\n            }\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./aside-navigation-subtechnologies-dm/aside-navigation-subtechnologies-dm.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_store$",
                        "type": "Store<INavigation[]>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_store$",
                        "type": "Store<INavigation[]>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<section class=\"skills-switcher\">\r\n    @if (hardSkillsNavigation$ | async) {\r\n        <ul class=\"skills-list\">\r\n            @for (skillItem of hardSkillsNavigation$ | async; track skillItem.id; let i = $index) {\r\n                <li class=\"skill-item\">\r\n                    @if (currentSkills && skillItem.link) {\r\n                        <a\r\n                            class=\"skill-item_link\"\r\n                            routerLinkActive=\"active\"\r\n                            [routerLinkActiveOptions]=\"{\r\n                                exact: true,\r\n                            }\"\r\n                            [ngClass]=\"{ 'active-link': changeRoutNavigation(skillItem.link) }\"\r\n                            (click)=\"changeSkillsList(skillItem.link)\"\r\n                        >\r\n                            {{ skillItem.value }}\r\n                        </a>\r\n                    }\r\n                </li>\r\n            }\r\n        </ul>\r\n    }\r\n</section>\r\n"
        },
        {
            "name": "AsideNavigationTechnologiesComponent",
            "id": "component-AsideNavigationTechnologiesComponent-9de87950a13c77dc89a9f3a661908527f1dc93345f4de3381856e84317c0e15662a5e5d2388a0ec4d9d5a9a5bd19e533fdd84c740a14fef6c0890c801f3028fa",
            "file": "src/app/layout/components/aside-navigation-technologies/aside-navigation-technologies.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cv-aside-navigation-technologies",
            "styleUrls": [
                "./aside-navigation-technologies.component.scss",
                "./aside-navigation-technologies-dm/aside-navigation-technologies-dm.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./aside-navigation-technologies.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "emittedTab",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "currentSkills",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "hardSkillsNavigation$",
                    "defaultValue": "this._store$.pipe(\r\n        select(selectHardSkillsNav),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<INavigation[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "navigationList",
                    "defaultValue": "input<\r\n        TTechnologiesAside[]\r\n    >([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<TTechnologiesAside[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "selectedTab",
                    "defaultValue": "'technologies'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"technologies\" | \"other\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "theme",
                    "defaultValue": "input<boolean | null>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeSkillsList",
                    "args": [
                        {
                            "name": "tab",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeTab",
                    "args": [
                        {
                            "name": "tab",
                            "type": "\"technologies\" | \"other\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "\"technologies\" | \"other\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "tabForRoute",
                    "args": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgClass"
                },
                {
                    "name": "RouterLinkActive"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "JsonPipe",
                    "type": "pipe"
                },
                {
                    "name": "AsideNavigationSubtechnologiesComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Observable, Subject, takeUntil } from 'rxjs';\r\n\r\nimport { AsyncPipe, JsonPipe, NgClass } from '@angular/common';\r\nimport {\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    EventEmitter,\r\n    InputSignal,\r\n    OnDestroy,\r\n    OnInit,\r\n    Output,\r\n    input,\r\n} from '@angular/core';\r\nimport { RouterLinkActive } from '@angular/router';\r\n\r\nimport { Store, select } from '@ngrx/store';\r\n\r\nimport { INavigation } from '@core/models/navigation.interface';\r\nimport { TTechnologiesAside } from '@core/models/technologies-aside.type';\r\nimport { LocalStorageService } from '@core/service/local-storage/local-storage.service';\r\n\r\nimport { FirebaseActions } from '@layout/store/firebase-store/firebase.actions';\r\nimport { selectHardSkillsNav } from '@layout/store/firebase-store/firebase.selectors';\r\n\r\nimport { AsideNavigationSubtechnologiesComponent } from '../aside-navigation-subtechnologies/aside-navigation-subtechnologies.component';\r\n\r\n@Component({\r\n    selector: 'cv-aside-navigation-technologies',\r\n    standalone: true,\r\n    imports: [\r\n        NgClass,\r\n        RouterLinkActive,\r\n        AsyncPipe,\r\n        JsonPipe,\r\n        AsideNavigationSubtechnologiesComponent,\r\n    ],\r\n    templateUrl: './aside-navigation-technologies.component.html',\r\n    styleUrls: [\r\n        './aside-navigation-technologies.component.scss',\r\n        './aside-navigation-technologies-dm/aside-navigation-technologies-dm.component.scss',\r\n    ],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AsideNavigationTechnologiesComponent implements OnInit, OnDestroy {\r\n    @Output() public emittedTab = new EventEmitter<string>();\r\n\r\n    public hardSkillsNavigation$: Observable<INavigation[]> = this._store$.pipe(\r\n        select(selectHardSkillsNav),\r\n    );\r\n\r\n    public theme = input<boolean | null>(false);\r\n\r\n    public navigationList: InputSignal<TTechnologiesAside[]> = input<\r\n        TTechnologiesAside[]\r\n    >([]);\r\n    public currentSkills: string = '';\r\n    public selectedTab: 'technologies' | 'other' = 'technologies';\r\n\r\n    private _destroyed$: Subject<void> = new Subject();\r\n\r\n    constructor(\r\n        private cdr: ChangeDetectorRef,\r\n        private _store$: Store<INavigation>,\r\n        private _localStorageService: LocalStorageService,\r\n    ) {}\r\n\r\n    public changeTab(tab: 'technologies' | 'other') {\r\n        this.selectedTab = tab;\r\n        this._localStorageService.saveSelectedTechnologiesTab(tab);\r\n        if (this.currentSkills && this.selectedTab === 'technologies') {\r\n            this.emittedTab.emit(this.currentSkills);\r\n        } else {\r\n            this.emittedTab.emit(this.selectedTab);\r\n        }\r\n        this.cdr.detectChanges();\r\n    }\r\n\r\n    public changeSkillsList(tab: string) {\r\n        this.currentSkills = tab;\r\n        this.emittedTab.emit(this.currentSkills);\r\n        this.cdr.detectChanges();\r\n    }\r\n\r\n    public tabForRoute(event: string) {\r\n        this.emittedTab.emit(event);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.selectedTab =\r\n            this._localStorageService.getSelectedTechnologiesTab();\r\n        this._store$.dispatch(\r\n            FirebaseActions.getHardSkillsNav({ imgName: '' }),\r\n        );\r\n        this.hardSkillsNavigation$\r\n            .pipe(takeUntil(this._destroyed$))\r\n            .subscribe((skills: INavigation[]) => {\r\n                const skill = skills.find((skill) => skill.id === '1');\r\n                if (skill) {\r\n                    this.currentSkills = skill.link;\r\n                    this.cdr.detectChanges();\r\n                }\r\n            });\r\n        this.emittedTab.emit(this.selectedTab);\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._destroyed$.next();\r\n        this._destroyed$.complete();\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../assets/styles/variables' as color;\r\n\r\n.aside-navigation {\r\n    position: relative;\r\n    .navigation-list {\r\n        display: flex;\r\n        row-gap: calc(10px + 20 * (100vw / 1920));\r\n        flex-direction: column;\r\n\r\n        .navigation_item {\r\n            color: color.$black;\r\n\r\n            .item-button {\r\n                cursor: pointer;\r\n                background-color: transparent;\r\n                color: color.$darkGray;\r\n                font-size: calc(20px + 30 * (100vw / 1920));\r\n                line-height: 51.1px;\r\n                font-family: 'RS-regular';\r\n            }\r\n        }\r\n    }\r\n    .active {\r\n        color: color.$black;\r\n    }\r\n}\r\n",
                    "styleUrl": "./aside-navigation-technologies.component.scss"
                },
                {
                    "data": "@use '../../../../../assets/styles/variables' as color;\r\n\r\n.aside-navigation.dark-theme {\r\n    .navigation-list {\r\n        .navigation_item {\r\n            .item-button {\r\n                color: color.$dm-dark-gray;\r\n            }\r\n        }\r\n    }\r\n    .active {\r\n        color: color.$white;\r\n    }\r\n}\r\n",
                    "styleUrl": "./aside-navigation-technologies-dm/aside-navigation-technologies-dm.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_store$",
                        "type": "Store<INavigation>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 60,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_store$",
                        "type": "Store<INavigation>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<aside\r\n    class=\"aside-navigation\"\r\n    [ngClass]=\"{ 'dark-theme': theme() }\"\r\n>\r\n    <ul class=\"navigation-list\">\r\n        @for (navItem of navigationList(); track navItem.id) {\r\n            <li class=\"navigation_item\">\r\n                <button\r\n                    type=\"button\"\r\n                    class=\"item-button\"\r\n                    (click)=\"changeTab(navItem.value)\"\r\n                >\r\n                    <a [ngClass]=\"{ active: selectedTab === navItem.value }\">\r\n                        {{ navItem.title }}\r\n                    </a>\r\n                </button>\r\n                @if (navItem.id === '1' && selectedTab === 'technologies') {\r\n                    <cv-aside-navigation-subtechnologies\r\n                        (emittedTab)=\"tabForRoute($event)\"\r\n                    ></cv-aside-navigation-subtechnologies>\r\n                }\r\n            </li>\r\n        }\r\n    </ul>\r\n</aside>\r\n"
        },
        {
            "name": "AuthComponent",
            "id": "component-AuthComponent-cff36deb3eced6fb6ca051048cec1d530e00347a27135e7370aea1707d84fbb2755d25c61c5b397cbefa4ec7c0c89cd360cc19067af416cbe05981906eaa1fc1",
            "file": "src/app/layout/pages/auth/auth.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cv-auth",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./auth.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isModalDialogVisible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getModalInstance",
                    "args": [
                        {
                            "name": "$event",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "LoginFormComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\n\r\nimport { Store } from '@ngrx/store';\r\n\r\nimport { ImagesActions } from '@layout/store/images-store/images.actions';\r\nimport {\r\n    selectCloseImageUrl,\r\n    selectWhiteModeImages,\r\n} from '@layout/store/images-store/images.selectors';\r\n\r\nimport { LoginFormComponent } from '../../components/login-form/login-form.component';\r\n\r\n@Component({\r\n    selector: 'cv-auth',\r\n    standalone: true,\r\n    imports: [LoginFormComponent],\r\n    templateUrl: './auth.component.html',\r\n    styleUrl: './auth.component.scss',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AuthComponent implements OnInit {\r\n    public isModalDialogVisible: boolean = false;\r\n\r\n    public getModalInstance($event: boolean) {\r\n        this.isModalDialogVisible = $event;\r\n    }\r\n\r\n    constructor(private _store$: Store) {}\r\n\r\n    ngOnInit() {\r\n        this._store$.dispatch(ImagesActions.getCloseImg({ mode: true }));\r\n    }\r\n}\r\n",
            "styleUrl": "./auth.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store$",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "_store$",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<main class=\"auth\">\r\n    <cv-login-form\r\n        header=\"Авторизация\"\r\n        (emittedModalHide)=\"getModalInstance($event)\"\r\n    ></cv-login-form>\r\n</main>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-74ecb2d304e540acb91e63d9368631a3d46388d37f9ba31f84dbaf7df72c84b638fb6386d75fbb357d2720d19ec8311f5f5b7bf8c43da7db54fc2a9cb9e4f943",
            "file": "src/app/layout/components/button/button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cv-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "buttonHoverText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        125
                    ],
                    "required": true
                },
                {
                    "name": "buttonText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        125
                    ],
                    "required": true
                },
                {
                    "name": "buttonType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        125
                    ],
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonHoverText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        125
                    ],
                    "required": true
                },
                {
                    "name": "buttonText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        125
                    ],
                    "required": true
                },
                {
                    "name": "buttonTheme",
                    "defaultValue": "input<boolean | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "buttonType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        125
                    ],
                    "required": true
                },
                {
                    "name": "currentTheme$",
                    "defaultValue": "this._store$.pipe(\r\n        select(darkModeSelector),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "generalButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'generalButton'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "isHovered",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onHover",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\nimport { NgClass, NgStyle } from '@angular/common';\r\nimport {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    ViewChild,\r\n    input,\r\n} from '@angular/core';\r\n\r\nimport { Store, select } from '@ngrx/store';\r\n\r\nimport { darkModeSelector } from '@layout/store/dark-mode-store/dark-mode.selectors';\r\nimport { TDarkMode } from '@layout/store/model/dark-mode.type';\r\n\r\n@Component({\r\n    selector: 'cv-button',\r\n    standalone: true,\r\n    imports: [NgClass],\r\n    templateUrl: './button.component.html',\r\n    styleUrls: ['./button.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ButtonComponent {\r\n    @ViewChild('generalButton') generalButton!: ElementRef;\r\n    public buttonType = input.required<string>();\r\n    public buttonText = input.required<string>();\r\n    public buttonHoverText = input.required<string>();\r\n    public buttonTheme = input<boolean | null>();\r\n    public isHovered = false;\r\n    public currentTheme$: Observable<boolean> = this._store$.pipe(\r\n        select(darkModeSelector),\r\n    );\r\n\r\n    constructor(private _store$: Store<TDarkMode>) {}\r\n\r\n    onHover() {\r\n        this.isHovered = true;\r\n    }\r\n\r\n    onLeave() {\r\n        this.isHovered = false;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../assets/styles/variables' as color;\r\n\r\n.short-button {\r\n    width: 280px;\r\n}\r\n\r\n.long-button {\r\n    width: 300px;\r\n}\r\n\r\n.general-button {\r\n    display: flex;\r\n    position: relative;\r\n    justify-content: center;\r\n    transition: max-width 0.7s ease-in-out;\r\n    cursor: pointer;\r\n    border-radius: 50px;\r\n    background-color: color.$black;\r\n    padding: calc(13px + 10 * (100vw / 1920)) calc(15px + 50 * (100vw / 1920));\r\n    overflow: hidden;\r\n    color: color.$white;\r\n    font-size: calc(4px + 12 * (100vw / 1920));\r\n    white-space: nowrap;\r\n\r\n    .general-button_text {\r\n        transform: translateY(0);\r\n        visibility: visible;\r\n        z-index: 1;\r\n        transition:\r\n            transform 0.6s ease-in-out,\r\n            opacity 0.6s ease-in-out,\r\n            z-index 0s 0.6s,\r\n            display 0.6s ease-in-out;\r\n\r\n        &.generalButtonActive {\r\n            transform: translateY(-100%);\r\n            opacity: 0;\r\n            transition:\r\n                transform 0.6s ease-in-out,\r\n                opacity 0.6s ease-in-out;\r\n        }\r\n    }\r\n\r\n    .general-button_text-absolute {\r\n        display: flex;\r\n        position: absolute;\r\n        top: 100%;\r\n        left: 50%;\r\n        justify-content: center;\r\n        align-items: center;\r\n        transform: translate(-50%, 0);\r\n        opacity: 0;\r\n        z-index: 2;\r\n        transition:\r\n            transform 0.6s ease-in-out,\r\n            opacity 0.6s ease-in-out,\r\n            z-index 0s 0.6s;\r\n        border-radius: 50%;\r\n        background-color: color.$blue;\r\n        line-height: 86px;\r\n        text-align: center;\r\n\r\n        .hovered-text {\r\n            transition: opacity 0.6s ease-in-out;\r\n        }\r\n    }\r\n\r\n    &:hover .general-button_text-absolute {\r\n        top: 50%;\r\n        left: 50%;\r\n        transform: translate(-50%, -50%);\r\n        opacity: 1;\r\n        color: color.$white;\r\n    }\r\n\r\n    &:hover .general-button_text-absolute .hovered-text {\r\n        opacity: 1;\r\n    }\r\n\r\n    &:not(:hover) .general-button_text-absolute {\r\n        top: 100%;\r\n        transform: translate(-50%, 0);\r\n        opacity: 0;\r\n    }\r\n\r\n    &:not(:hover) .general-button_text-absolute .hovered-text {\r\n        opacity: 0;\r\n    }\r\n}\r\n\r\n.general-button:hover .general-button_text {\r\n    z-index: 2;\r\n}\r\n\r\n.general-button:hover .general-button_text-absolute {\r\n    z-index: 1;\r\n}\r\n\r\n.dark-theme {\r\n    transition: 0.3s;\r\n    background-color: color.$white;\r\n    color: color.$black;\r\n}\r\n\r\n.connect-me {\r\n    width: 100%;\r\n    height: 280px;\r\n}\r\n\r\n.watch-cv {\r\n    width: 100%;\r\n    height: 300px;\r\n}\r\n\r\n.connect-me,\r\n.watch-cv {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store$",
                        "type": "Store<TDarkMode>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "_store$",
                        "type": "Store<TDarkMode>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<button\r\n    class=\"general-button\"\r\n    [ngClass]=\"{\r\n        'dark-theme': buttonTheme(),\r\n        'light-theme': !buttonTheme(),\r\n        'long-button': buttonType() === 'long',\r\n        'short-button': buttonType() === 'short',\r\n    }\"\r\n    (mouseover)=\"onHover()\"\r\n    (mouseout)=\"onLeave()\"\r\n>\r\n    <span\r\n        class=\"general-button_text\"\r\n        [ngClass]=\"{ generalButtonActive: isHovered }\"\r\n    >\r\n        {{ buttonText() }}\r\n    </span>\r\n    <span\r\n        #generalButton\r\n        class=\"general-button_hover-text\"\r\n        [ngClass]=\"{ generalButtonActive: isHovered }\"\r\n    >\r\n        <div\r\n            class=\"general-button_text-absolute\"\r\n            [ngClass]=\"buttonType() === 'short' ? 'connect-me' : 'watch-cv'\"\r\n        >\r\n            <span class=\"hovered-text\">\r\n                {{ buttonHoverText() }}\r\n            </span>\r\n        </div>\r\n    </span>\r\n</button>\r\n"
        },
        {
            "name": "DarkModeToggleComponent",
            "id": "component-DarkModeToggleComponent-3c4dbbc6473776a36d91f1f1acf03d9f8972876aeec72287eb3243659b7ee918c0902a35642b21f7c8915b826555efc1ea6954228be6f16fc8ba3d600b89e966",
            "file": "src/app/layout/components/dark-mode-toggle/dark-mode-toggle.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cv-dark-mode-toggle",
            "styleUrls": [
                "./dark-mode-toggle.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dark-mode-toggle.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "darkModeImages$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "isChecked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "whiteModeImages$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgClass"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Observable, Subject, map, takeUntil, tap } from 'rxjs';\r\n\r\nimport { AsyncPipe, NgClass } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\n\r\nimport { Store, select } from '@ngrx/store';\r\n\r\nimport { LocalStorageService } from '@core/service/local-storage/local-storage.service';\r\n\r\nimport { setModeSuccess } from '@layout/store/dark-mode-store/dark-mode.actions';\r\nimport { ImagesActions } from '@layout/store/images-store/images.actions';\r\nimport {\r\n    selectDarkModeImages,\r\n    selectWhiteModeImages,\r\n} from '@layout/store/images-store/images.selectors';\r\nimport { TDarkMode } from '@layout/store/model/dark-mode.type';\r\nimport { TLocalstorageUser } from '@layout/store/model/localstorage-user.type';\r\n\r\n@Component({\r\n    selector: 'cv-dark-mode-toggle',\r\n    standalone: true,\r\n    imports: [NgClass, AsyncPipe],\r\n    templateUrl: './dark-mode-toggle.component.html',\r\n    styleUrls: ['./dark-mode-toggle.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class DarkModeToggleComponent implements OnInit {\r\n    public isChecked: boolean = false;\r\n    public darkModeImages$!: Observable<string[]>;\r\n    public whiteModeImages$!: Observable<string[]>;\r\n\r\n    private _destroyed$: Subject<void> = new Subject();\r\n\r\n    constructor(\r\n        private _store$: Store<TDarkMode | TLocalstorageUser>,\r\n        private _localStorageService: LocalStorageService,\r\n    ) {}\r\n\r\n    public changeView(): void {\r\n        this.isChecked = !this.isChecked;\r\n        this._localStorageService.setDarkMode(this.isChecked);\r\n        this._store$.dispatch(setModeSuccess(this.isChecked));\r\n        this._store$.dispatch(ImagesActions.loadThemelessPicturesImages());\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.isChecked = this._localStorageService.getDarkMode() || false;\r\n        this._store$.dispatch(setModeSuccess(this.isChecked));\r\n        this._store$.dispatch(ImagesActions.loadThemelessPicturesImages());\r\n\r\n        this.darkModeImages$ = this._store$.pipe(\r\n            takeUntil(this._destroyed$),\r\n            select(selectDarkModeImages),\r\n            tap((el) => {\r\n                console.log('Dark Mode Images:', el);\r\n                if (!el) {\r\n                    console.error('No dark mode images found');\r\n                }\r\n            }),\r\n            map((response: any) => response),\r\n        );\r\n\r\n        this.whiteModeImages$ = this._store$.pipe(\r\n            takeUntil(this._destroyed$),\r\n            select(selectWhiteModeImages),\r\n            tap((el) => {\r\n                console.log('White Mode Images:', el);\r\n                if (!el) {\r\n                    console.error('No white mode images found');\r\n                }\r\n            }),\r\n            map((response: any) => response),\r\n        );\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._destroyed$.next();\r\n        this._destroyed$.complete();\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../assets/styles/variables' as color;\r\n\r\n.dark-mode-toggle {\r\n    display: inline-block;\r\n    position: relative;\r\n    box-sizing: border-box;\r\n    width: 50px;\r\n    height: 25px;\r\n\r\n    &__input {\r\n        opacity: 0;\r\n        width: 0;\r\n        height: 0;\r\n    }\r\n\r\n    &__slider {\r\n        position: absolute;\r\n        top: 0;\r\n        right: 0;\r\n        bottom: 0;\r\n        left: 0;\r\n        transition: 0.4s;\r\n        cursor: pointer;\r\n        border: 2px solid #242424;\r\n        border-radius: 14px;\r\n        background-color: #eee;\r\n    }\r\n\r\n    &__slider::before {\r\n        position: absolute;\r\n        bottom: 1.5px;\r\n        left: 1.5px;\r\n        z-index: 2;\r\n        transition: 0.4s;\r\n        cursor: pointer;\r\n        border-radius: 50%;\r\n        background-color: color.$black;\r\n        width: 19px;\r\n        height: 19px;\r\n        content: '';\r\n    }\r\n\r\n    &__input:checked + &__slider {\r\n        border: 2px solid color.$white;\r\n        background: #242424;\r\n    }\r\n\r\n    &__input:checked + &__slider::before {\r\n        transform: translateX(25px);\r\n        background-color: color.$white;\r\n    }\r\n\r\n    &__sun {\r\n        position: absolute;\r\n        top: 1px;\r\n        left: 1px;\r\n        opacity: 0;\r\n        z-index: 1;\r\n        transition: 0.2s;\r\n\r\n        img {\r\n            width: 23px;\r\n            height: 23px;\r\n        }\r\n    }\r\n\r\n    &__moon {\r\n        position: absolute;\r\n        top: 1px;\r\n        right: 1px;\r\n        opacity: 0;\r\n        z-index: 1;\r\n        transition: 0.2s;\r\n\r\n        img {\r\n            width: 23px;\r\n            height: 23px;\r\n        }\r\n    }\r\n\r\n    &__moon.active {\r\n        opacity: 1;\r\n    }\r\n\r\n    &__sun.active {\r\n        opacity: 1;\r\n    }\r\n}\r\n",
                    "styleUrl": "./dark-mode-toggle.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store$",
                        "type": "Store<TDarkMode | TLocalstorageUser>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "_store$",
                        "type": "Store<TDarkMode | TLocalstorageUser>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<label\r\n    class=\"dark-mode-toggle\"\r\n    for=\"darkmode-toggle\"\r\n>\r\n    <input\r\n        #darkModeCheckBox\r\n        class=\"dark-mode-toggle__input\"\r\n        type=\"checkbox\"\r\n        name=\"dark-mode-toggle\"\r\n        id=\"darkmode-toggle\"\r\n        [checked]=\"isChecked\"\r\n        (change)=\"changeView()\"\r\n    />\r\n    <span class=\"dark-mode-toggle__slider\"></span>\r\n    <span\r\n        class=\"dark-mode-toggle__moon\"\r\n        [ngClass]=\"{ active: !isChecked }\"\r\n    >\r\n        <img\r\n            [src]=\"darkModeImages$ | async\"\r\n            [alt]=\"darkModeImages$\"\r\n        />\r\n    </span>\r\n    <span\r\n        class=\"dark-mode-toggle__sun\"\r\n        [ngClass]=\"{ active: isChecked }\"\r\n    >\r\n        <img\r\n            [src]=\"whiteModeImages$ | async\"\r\n            [alt]=\"whiteModeImages$ | async\"\r\n        />\r\n    </span>\r\n</label>\r\n"
        },
        {
            "name": "EducationExperienceComponent",
            "id": "component-EducationExperienceComponent-fdbe30051086e1095c6af250d7200e857e0e86dc0391244bdee2c3bf49dacf8aa466e26edd706f2e92dd23edc348a58978ac0ab494d5188559b6976ba985acd0",
            "file": "src/app/layout/pages/experience/education-experience/education-experience.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cv-education-experience",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./education-experience.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "$index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "experience",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "educationExperience$",
                    "defaultValue": "input.required<IExperience[] | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "selectedTabEducation",
                    "defaultValue": "input<string>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "theme",
                    "defaultValue": "input<boolean | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ExperienceCardComponent",
                    "type": "component"
                },
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgClass } from '@angular/common';\r\nimport {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    Input,\r\n    input,\r\n} from '@angular/core';\r\n\r\nimport { IExperience } from '@core/models/experience.interface';\r\n\r\nimport { ExperienceDialogComponent } from '@layout/components/experience-dialog/experience-dialog.component';\r\nimport { ExperienceCardComponent } from '@layout/pages/experience/experience-card/experience-card.component';\r\n\r\n@Component({\r\n    selector: 'cv-education-experience',\r\n    standalone: true,\r\n    imports: [ExperienceCardComponent, NgClass],\r\n    templateUrl: './education-experience.component.html',\r\n    styleUrl: './education-experience.component.scss',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class EducationExperienceComponent {\r\n    @Input() experience: any;\r\n    @Input() $index!: number;\r\n    public selectedTabEducation = input<string>('');\r\n    public educationExperience$ = input.required<IExperience[] | null>();\r\n    public theme = input<boolean | null>();\r\n}\r\n",
            "styleUrl": "./education-experience.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<section class=\"education-cards\">\r\n    @for (educationPlace of educationExperience$(); track educationPlace.id; let i = $index) {\r\n        <cv-experience-card\r\n            [ngClass]=\"{ activeEducation: $index === 0, 'dark-theme': theme }\"\r\n            [experienceType]=\"selectedTabEducation()\"\r\n            [experienceDescription]=\"educationPlace\"\r\n            [theme]=\"theme()\"\r\n        ></cv-experience-card>\r\n    }\r\n</section>\r\n"
        },
        {
            "name": "ExperienceCardComponent",
            "id": "component-ExperienceCardComponent-b1a8313ffd1856a4a9ae75da41081a291e7e0b468e6b49847587f7c8e8140d13d5f0d096316a217b175803918d460470d2a6c8b82904fa8f31a85b5063f02fd6",
            "file": "src/app/layout/pages/experience/experience-card/experience-card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cv-experience-card",
            "styleUrls": [
                "./experience-card.component.scss",
                "./experience-card-dm/experience-card-dm.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./experience-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "experience",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "experienceType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        125
                    ],
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "experienceCardImgVisibility",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "experienceDescription",
                    "defaultValue": "input<IExperience | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "experienceType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        125
                    ],
                    "required": true
                },
                {
                    "name": "theme",
                    "defaultValue": "input<boolean | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "workDescription",
                    "defaultValue": "input<IExperience | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showDialogExperience",
                    "args": [
                        {
                            "name": "dialogInfo",
                            "type": "IExperience | IExperience | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "dialogInfo",
                            "type": "IExperience | IExperience | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgClass, NgSwitch } from '@angular/common';\r\nimport {\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    Inject,\r\n    Input,\r\n    OnInit,\r\n    Type,\r\n    input,\r\n} from '@angular/core';\r\nimport { RouterLink } from '@angular/router';\r\n\r\nimport { Store } from '@ngrx/store';\r\n\r\nimport { IExperience } from '@core/models/experience.interface';\r\nimport { fadeInOutCards } from '@core/utils/animations/fade-in-out-cards';\r\n\r\nimport { ExperienceActions } from '@layout/store/experience-dialog-store/experience-dialog.actions';\r\n\r\n@Component({\r\n    selector: 'cv-experience-card',\r\n    standalone: true,\r\n    imports: [NgClass],\r\n    templateUrl: './experience-card.component.html',\r\n    styleUrls: [\r\n        './experience-card.component.scss',\r\n        './experience-card-dm/experience-card-dm.component.scss',\r\n    ],\r\n    animations: [fadeInOutCards],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ExperienceCardComponent implements OnInit {\r\n    @Input() experience: any;\r\n    public experienceType = input.required<string>();\r\n    public workDescription = input<IExperience | null>(null);\r\n    public experienceDescription = input<IExperience | null>(null);\r\n    public experienceCardImgVisibility: boolean = false;\r\n    public theme = input<boolean | null>();\r\n\r\n    constructor(\r\n        private _cdr: ChangeDetectorRef,\r\n        @Inject(Store) private _store$: Store<IExperience>,\r\n    ) {}\r\n\r\n    ngOnInit(): void {\r\n        this.experienceType = this.experienceType || 'work';\r\n        this.workDescription = this.workDescription || null;\r\n        this.experienceDescription = this.experienceDescription || null;\r\n\r\n        this._cdr.detectChanges();\r\n    }\r\n\r\n    public showDialogExperience(dialogInfo: IExperience | IExperience | null) {\r\n        this._store$.dispatch(\r\n            ExperienceActions.getExperienceDialogOpen({ data: dialogInfo }),\r\n        );\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../../assets/styles/variables' as color;\r\n@use '../../../../../assets/styles/mixins/glassmorphism.mixin' as glassmorphism;\r\n\r\n.experience-card {\r\n    display: flex;\r\n    position: relative;\r\n    column-gap: 30px;\r\n    align-items: center;\r\n    cursor: pointer;\r\n    border-radius: 40px;\r\n    @include glassmorphism.cards_glassmorphism;\r\n    padding: 30px;\r\n    width: 100%;\r\n    height: 140px;\r\n\r\n    &_picture-work,\r\n    &_picture-education {\r\n        position: absolute;\r\n        bottom: 0;\r\n        left: 0;\r\n        z-index: 100;\r\n        border-radius: 28px;\r\n        background-color: color.$white;\r\n    }\r\n\r\n    &_picture-work,\r\n    &_picture-education {\r\n        transition: 0.3s;\r\n        .card-img {\r\n            border-radius: 28px;\r\n            max-width: 15rem;\r\n        }\r\n    }\r\n\r\n    .card-info {\r\n        display: flex;\r\n        flex-direction: column;\r\n        height: 100%;\r\n\r\n        &_place {\r\n            margin-bottom: 8px;\r\n            color: color.$darkGray;\r\n        }\r\n\r\n        &_place-name {\r\n            margin-bottom: 20px;\r\n            font-weight: bold;\r\n            font-size: 20px;\r\n        }\r\n\r\n        &_time {\r\n            font-size: 16px;\r\n        }\r\n    }\r\n\r\n    .card-button__container {\r\n        display: flex;\r\n        position: relative;\r\n        justify-content: center;\r\n        align-items: center;\r\n        transition: transform 0.5s ease;\r\n        border-radius: 50%;\r\n        padding: 2px;\r\n\r\n        .card-button {\r\n            z-index: 1;\r\n            border-radius: 50%;\r\n            background: color.$white;\r\n            padding: 23px;\r\n        }\r\n\r\n        &::before {\r\n            position: absolute;\r\n            top: 50%;\r\n            left: 50%;\r\n            transform: translate(-50%, -50%);\r\n            z-index: 0;\r\n            border: 2px solid transparent;\r\n            border-radius: 50%;\r\n            width: 100%;\r\n            height: 100%;\r\n            content: '';\r\n        }\r\n    }\r\n\r\n    &:hover .card-button__container::before {\r\n        animation: rotateCircle 1s linear infinite;\r\n    }\r\n}\r\n\r\n.experience-card.activeWork {\r\n    justify-content: flex-end;\r\n\r\n    .card-info {\r\n        align-items: flex-end;\r\n    }\r\n}\r\n\r\n.experience-card.activeEducation {\r\n    justify-content: flex-start;\r\n\r\n    .card-info {\r\n        align-items: flex-start;\r\n    }\r\n}\r\n\r\n.experience-card.activeWork:hover .card-button__container {\r\n    transform: rotate(-90deg);\r\n}\r\n\r\n@keyframes rotateCircle {\r\n    0% {\r\n        transform: translate(-50%, -50%) rotate(0deg) translate(50px);\r\n    }\r\n    100% {\r\n        transform: translate(-50%, -50%) rotate(360deg) translate(50px);\r\n    }\r\n}\r\n",
                    "styleUrl": "./experience-card.component.scss"
                },
                {
                    "data": "@use '../../../../../../assets/styles/variables' as color;\r\n@use '../../../../../../assets/styles/mixins/glassmorphism.mixin' as glassmorphism;\r\n\r\n.experience-card.dark-theme {\r\n    @include glassmorphism.cards_glassmorphism-dm;\r\n\r\n    .experience-card_picture-work,\r\n    .experience-card_picture-education {\r\n        background-color: color.$dm-black;\r\n    }\r\n\r\n    .card-info {\r\n        &_place {\r\n            color: color.$dm-dark-text-title;\r\n        }\r\n\r\n        &_place-name {\r\n            color: color.$white;\r\n        }\r\n\r\n        &_time {\r\n            color: color.$dm-dark-text;\r\n        }\r\n    }\r\n\r\n    .card-button {\r\n        background: color.$black;\r\n    }\r\n}\r\n",
                    "styleUrl": "./experience-card-dm/experience-card-dm.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_store$",
                        "type": "Store<IExperience>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_store$",
                        "type": "Store<IExperience>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "@switch (experienceType()) {\r\n    @case ('work') {\r\n        <article\r\n            class=\"experience-card\"\r\n            (click)=\"showDialogExperience(workDescription())\"\r\n            (keyup.enter)=\"showDialogExperience(workDescription())\"\r\n            tabindex=\"0\"\r\n            [ngClass]=\"{ activeWork: experienceType() === 'work', 'dark-theme': theme() }\"\r\n            (mouseover)=\"experienceCardImgVisibility = true\"\r\n            (focus)=\"experienceCardImgVisibility = true\"\r\n            (mouseleave)=\"experienceCardImgVisibility = false\"\r\n            (blur)=\"experienceCardImgVisibility = false\"\r\n        >\r\n            @if (experienceCardImgVisibility) {\r\n                <div\r\n                    class=\"experience-card_picture-work\"\r\n                    @fadeInOutCards\r\n                >\r\n                    <img\r\n                        class=\"card-img\"\r\n                        [src]=\"workDescription()?.logoPath\"\r\n                        [alt]=\"workDescription()?.logoPath\"\r\n                    />\r\n                </div>\r\n            }\r\n\r\n            <div class=\"card-info\">\r\n                <span class=\"card-info_place\">место работы</span>\r\n                <span class=\"card-info_place-name\">\r\n                    {{ workDescription()?.company }}\r\n                </span>\r\n                <span class=\"card-info_time\">{{ workDescription()?.from }} - {{ workDescription()?.to }}</span>\r\n            </div>\r\n            <div class=\"card-button__container\">\r\n                <button class=\"card-button\">\r\n                    <img\r\n                        [src]=\"\r\n                            !theme()\r\n                                ? 'assets/images/white-mode/icons/arrow-wm.svg'\r\n                                : 'assets/images/dark-mode/icons/arrow-dm.svg'\r\n                        \"\r\n                        [alt]=\"!theme() ? 'arrow-wm.svg' : 'arrow-dm.svg'\"\r\n                    />\r\n                </button>\r\n            </div>\r\n        </article>\r\n    }\r\n    @case ('education') {\r\n        <article\r\n            class=\"experience-card\"\r\n            (click)=\"showDialogExperience(experienceDescription())\"\r\n            (keyup.enter)=\"showDialogExperience(experienceDescription())\"\r\n            tabindex=\"0\"\r\n            [ngClass]=\"{ activeEducation: experienceType() === 'education', 'dark-theme': theme() }\"\r\n            (mouseover)=\"experienceCardImgVisibility = true\"\r\n            (focus)=\"experienceCardImgVisibility = true\"\r\n            (mouseleave)=\"experienceCardImgVisibility = false\"\r\n            (blur)=\"experienceCardImgVisibility = false\"\r\n        >\r\n            @if (experienceCardImgVisibility) {\r\n                <div\r\n                    class=\"experience-card_picture-education\"\r\n                    @fadeInOutCards\r\n                >\r\n                    <img\r\n                        class=\"card-img\"\r\n                        [src]=\"experienceDescription()?.logoPath\"\r\n                        [alt]=\"experienceDescription()?.logoPath\"\r\n                    />\r\n                </div>\r\n            }\r\n            <div class=\"card-button__container\">\r\n                <button class=\"card-button\">\r\n                    <img\r\n                        [src]=\"\r\n                            !theme()\r\n                                ? 'assets/images/white-mode/icons/download-wm.svg'\r\n                                : 'assets/images/dark-mode/icons/download-dm.svg'\r\n                        \"\r\n                        [alt]=\"!theme() ? 'download-wm.svg' : 'download-dm.svg'\"\r\n                    />\r\n                </button>\r\n            </div>\r\n            <div class=\"card-info\">\r\n                <span class=\"card-info_place\">курс</span>\r\n                <span class=\"card-info_place-name\">\r\n                    {{ experienceDescription()?.company }}\r\n                    {{ experienceDescription()?.specialization }}\r\n                </span>\r\n                <span class=\"card-info_time\">\r\n                    {{ experienceDescription()?.from }} -\r\n                    {{ experienceDescription()?.to }}\r\n                </span>\r\n            </div>\r\n        </article>\r\n    }\r\n    @default {\r\n        <article\r\n            class=\"experience-card\"\r\n            (click)=\"showDialogExperience(workDescription())\"\r\n            (keyup.enter)=\"showDialogExperience(workDescription())\"\r\n            tabindex=\"0\"\r\n            [ngClass]=\"{ activeWork: experienceType() === 'work', 'dark-theme': theme() }\"\r\n            (mouseover)=\"experienceCardImgVisibility = true\"\r\n            (focus)=\"experienceCardImgVisibility = true\"\r\n            (mouseleave)=\"experienceCardImgVisibility = false\"\r\n            (blur)=\"experienceCardImgVisibility = false\"\r\n        >\r\n            @if (experienceCardImgVisibility) {\r\n                <div\r\n                    @fadeInOutCards\r\n                    class=\"experience-card_picture-work\"\r\n                >\r\n                    <img\r\n                        class=\"card-img\"\r\n                        [src]=\"workDescription()?.logoPath\"\r\n                        [alt]=\"workDescription()?.logoPath\"\r\n                    />\r\n                </div>\r\n            }\r\n\r\n            <div class=\"card-info\">\r\n                <span class=\"card-info_place\">место работы</span>\r\n                <span class=\"card-info_place-name\">\r\n                    {{ workDescription()?.company }}\r\n                </span>\r\n                <span class=\"card-info_time\">{{ workDescription()?.from }} - {{ workDescription()?.to }}</span>\r\n            </div>\r\n            <div class=\"card-button__container\">\r\n                <button class=\"card-button\">\r\n                    <img\r\n                        [src]=\"\r\n                            !theme()\r\n                                ? 'assets/images/white-mode/icons/arrow-wm.svg'\r\n                                : 'assets/images/dark-mode/icons/arrow-dm.svg'\r\n                        \"\r\n                        [alt]=\"!theme() ? 'arrow-wm.svg' : 'arrow-dm.svg'\"\r\n                    />\r\n                </button>\r\n            </div>\r\n        </article>\r\n    }\r\n}\r\n"
        },
        {
            "name": "ExperienceComponent",
            "id": "component-ExperienceComponent-caacfdf48ebab9d26f72021a94d002bf06491a0cdf172b87a90f5e7d164dfd3827eb9d6b558a07c194f3cb9caca054ca9224202a06ad5c73a63811a64585bae9",
            "file": "src/app/layout/pages/experience/experience.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cv-experience",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./experience.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentTheme$",
                    "defaultValue": "this._store$.pipe(\r\n        select(darkModeSelector),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "educationPlace$",
                    "defaultValue": "this._store$.pipe(\r\n        select(selectEducation),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IExperience[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "experienceAside$",
                    "defaultValue": "this._store$.pipe(\r\n        select(selectExperienceAside),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<TExperienceAside[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "selectedTab",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "workPlace$",
                    "defaultValue": "this._store$.pipe(\r\n        select(selectWorkExperience),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IExperience[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "switchTab",
                    "args": [
                        {
                            "name": "$event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "EducationExperienceComponent",
                    "type": "component"
                },
                {
                    "name": "WorkExperienceComponent",
                    "type": "component"
                },
                {
                    "name": "AsideNavigationExperienceComponent",
                    "type": "component"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\nimport { AsyncPipe, NgSwitch } from '@angular/common';\r\nimport {\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    OnInit,\r\n} from '@angular/core';\r\n\r\nimport { Store, select } from '@ngrx/store';\r\n\r\nimport { TExperienceAside } from '@core/models/experience-aside.type';\r\nimport { IExperience } from '@core/models/experience.interface';\r\n\r\nimport { darkModeSelector } from '@layout/store/dark-mode-store/dark-mode.selectors';\r\nimport { FirebaseActions } from '@layout/store/firebase-store/firebase.actions';\r\nimport {\r\n    selectEducation,\r\n    selectExperienceAside,\r\n    selectWorkExperience,\r\n} from '@layout/store/firebase-store/firebase.selectors';\r\nimport { TDarkMode } from '@layout/store/model/dark-mode.type';\r\n\r\nimport { AsideNavigationExperienceComponent } from '../../components/aside-navigation-experience/aside-navigation-experience.component';\r\nimport { EducationExperienceComponent } from './education-experience/education-experience.component';\r\nimport { WorkExperienceComponent } from './work-experience/work-experience.component';\r\n\r\n@Component({\r\n    selector: 'cv-experience',\r\n    standalone: true,\r\n    imports: [\r\n        EducationExperienceComponent,\r\n        WorkExperienceComponent,\r\n        AsideNavigationExperienceComponent,\r\n        AsyncPipe,\r\n    ],\r\n    templateUrl: './experience.component.html',\r\n    styleUrl: './experience.component.scss',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ExperienceComponent implements OnInit {\r\n    public experienceAside$: Observable<TExperienceAside[]> = this._store$.pipe(\r\n        select(selectExperienceAside),\r\n    );\r\n\r\n    public currentTheme$: Observable<boolean> = this._store$.pipe(\r\n        select(darkModeSelector),\r\n    );\r\n\r\n    public workPlace$: Observable<IExperience[]> = this._store$.pipe(\r\n        select(selectWorkExperience),\r\n    );\r\n    public selectedTab: string = '';\r\n\r\n    public educationPlace$: Observable<IExperience[]> = this._store$.pipe(\r\n        select(selectEducation),\r\n    );\r\n\r\n    public switchTab($event: string) {\r\n        this.selectedTab = $event;\r\n        this._cd.detectChanges();\r\n    }\r\n\r\n    constructor(\r\n        private _store$: Store<\r\n            TDarkMode | IExperience | IExperience | TExperienceAside\r\n        >,\r\n        private _cd: ChangeDetectorRef,\r\n    ) {}\r\n\r\n    ngOnInit(): void {\r\n        this.switchTab('work');\r\n        this._store$.dispatch(\r\n            FirebaseActions.getExperienceAside({ imgName: '' }),\r\n        );\r\n        this._store$.dispatch(\r\n            FirebaseActions.getWorkExperience({ imgName: 'companies-logo' }),\r\n        );\r\n        this._store$.dispatch(\r\n            FirebaseActions.getEducationPlaces({ imgName: 'certificates' }),\r\n        );\r\n    }\r\n}\r\n",
            "styleUrl": "./experience.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store$",
                        "type": "Store<TDarkMode | IExperience | IExperience | TExperienceAside>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 63,
                "jsdoctags": [
                    {
                        "name": "_store$",
                        "type": "Store<TDarkMode | IExperience | IExperience | TExperienceAside>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"experience\">\r\n    <aside class=\"experience_navigation\">\r\n        <cv-aside-navigation-experience\r\n            [navigationList]=\"(experienceAside$ | async) ?? []\"\r\n            (emittedTab)=\"switchTab($event)\"\r\n            [theme]=\"currentTheme$ | async\"\r\n        ></cv-aside-navigation-experience>\r\n    </aside>\r\n    <section class=\"experience_places\">\r\n        @switch (selectedTab) {\r\n            @case ('work') {\r\n                <cv-work-experience\r\n                    [selectedTabWork]=\"selectedTab\"\r\n                    [workExperience$]=\"workPlace$ | async\"\r\n                    [theme]=\"currentTheme$ | async\"\r\n                ></cv-work-experience>\r\n            }\r\n            @case ('education') {\r\n                <cv-education-experience\r\n                    [selectedTabEducation]=\"selectedTab\"\r\n                    [educationExperience$]=\"educationPlace$ | async\"\r\n                    [theme]=\"currentTheme$ | async\"\r\n                ></cv-education-experience>\r\n            }\r\n            @default {\r\n                <cv-work-experience\r\n                    [selectedTabWork]=\"selectedTab\"\r\n                    [workExperience$]=\"workPlace$ | async\"\r\n                    [theme]=\"currentTheme$ | async\"\r\n                ></cv-work-experience>\r\n            }\r\n        }\r\n    </section>\r\n</div>\r\n"
        },
        {
            "name": "ExperienceDialogComponent",
            "id": "component-ExperienceDialogComponent-6eaea0526abe2104d4378a2ab090a2080b7f6be4ec2c4ddec537ceacce189af123e30f8a89bd237da1a4fac8a19aa76a9f4a3976fa0e7732af868577baa9e025",
            "file": "src/app/layout/components/experience-dialog/experience-dialog.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cv-experience-dialog",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./experience-dialog.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        125
                    ],
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        125
                    ],
                    "required": true
                },
                {
                    "name": "modal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'modal', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "modalData$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IExperience | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:mousemove', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TProfile | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModalDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBackgroundClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseMove",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:mousemove",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "NgIf"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\nimport { AsyncPipe, NgIf } from '@angular/common';\r\nimport {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    HostListener,\r\n    Inject,\r\n    OnInit,\r\n    ViewChild,\r\n    input,\r\n} from '@angular/core';\r\nimport { FormGroup, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { Store, select } from '@ngrx/store';\r\n\r\nimport { IExperience } from '@core/models/experience.interface';\r\n\r\nimport { ExperienceActions } from '@layout/store/experience-dialog-store/experience-dialog.actions';\r\nimport { selectModalData } from '@layout/store/experience-dialog-store/experience-dialog.selectors';\r\nimport { TProfile } from '@layout/store/model/profile.type';\r\n\r\n@Component({\r\n    selector: 'cv-experience-dialog',\r\n    standalone: true,\r\n    imports: [ReactiveFormsModule, AsyncPipe, NgIf],\r\n    templateUrl: './experience-dialog.component.html',\r\n    styleUrl: './experience-dialog.component.scss',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ExperienceDialogComponent implements OnInit {\r\n    @ViewChild('modal', { static: false })\r\n    public modal!: ElementRef;\r\n    @HostListener('document:mousemove', ['$event'])\r\n    public modalData$!: Observable<IExperience | null>;\r\n    public header = input.required<string>();\r\n    public authForm!: FormGroup;\r\n    public user: TProfile | null = null;\r\n\r\n    constructor(\r\n        @Inject(Store)\r\n        private _store$: Store<IExperience | IExperience>,\r\n    ) {}\r\n\r\n    ngOnInit(): void {\r\n        this.modalData$ = this._store$.pipe(select(selectModalData));\r\n    }\r\n\r\n    public onMouseMove(event: MouseEvent) {\r\n        const target = event.target as HTMLElement;\r\n        if (!this.modal.nativeElement.contains(target)) {\r\n            this.modal.nativeElement.classList.add('dimmed');\r\n        } else {\r\n            this.modal.nativeElement.classList.remove('dimmed');\r\n        }\r\n    }\r\n\r\n    public onBackgroundClick(event: MouseEvent): void {\r\n        const target = event.target as HTMLElement;\r\n        if (target.classList.contains(this.modal.nativeElement.classList)) {\r\n            this._store$.dispatch(\r\n                ExperienceActions.getExperienceDialogClosed(),\r\n            );\r\n        }\r\n    }\r\n\r\n    public closeModalDialog() {\r\n        this._store$.dispatch(ExperienceActions.getExperienceDialogClosed());\r\n    }\r\n}\r\n",
            "styleUrl": "./experience-dialog.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store$",
                        "type": "Store<IExperience | IExperience>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "_store$",
                        "type": "Store<IExperience | IExperience>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\r\n    class=\"modal-background\"\r\n    #modal\r\n    (click)=\"onBackgroundClick($event)\"\r\n>\r\n    <dialog class=\"modal-dialog\">\r\n        <header class=\"header-block\">\r\n            <h3 class=\"header-block_title\">{{ header() }}</h3>\r\n            <button\r\n                class=\"header-block_close-button\"\r\n                (click)=\"closeModalDialog()\"\r\n            >\r\n                <img\r\n                    aria-hidden=\"true\"\r\n                    src=\"assets/images/white-mode/icons/close.svg\"\r\n                    alt=\"close.svg\"\r\n                />\r\n            </button>\r\n        </header>\r\n        <main class=\"modal-dialog_content\">\r\n            <div class=\"modal-dialog_body\">\r\n                <ng-container *ngIf=\"modalData$ | async as modalData\">\r\n                    <!-- Ваш контент здесь -->\r\n                    <div *ngIf=\"modalData\">\r\n                        <p>Company: {{ modalData.company }}</p>\r\n                        <p>From: {{ modalData.from }}</p>\r\n                        <p>To: {{ modalData.to }}</p>\r\n                        <p>Specialization: {{ modalData.specialization }}</p>\r\n                        <!-- Добавьте другие поля по необходимости -->\r\n                    </div>\r\n                </ng-container>\r\n            </div>\r\n            <div class=\"content-form_submit-buttons\">\r\n                <button\r\n                    class=\"reset-button\"\r\n                    (click)=\"closeModalDialog()\"\r\n                    type=\"button\"\r\n                >\r\n                    Закрыть\r\n                </button>\r\n            </div>\r\n        </main>\r\n    </dialog>\r\n</div>\r\n"
        },
        {
            "name": "FirstTimeComponent",
            "id": "component-FirstTimeComponent-2811199ed8320631ea6114560091621456ceab7a601599ead20bacf81fe264ddf21683de12a238f2c5584a2f30dcb24ae90dc302ccad1448947b7f05d33bce6b",
            "file": "src/app/layout/components/first-time/first-time.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cv-first-time",
            "styleUrls": [
                "./first-time.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./first-time.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isAuth",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "persons",
                    "defaultValue": "[\r\n        {\r\n            name: 'Черкас Иван (SEO) Fullstack разработчик',\r\n            translated: 'Cherkas Ivan (SEO) Fullstack Developer',\r\n        },\r\n        {\r\n            name: 'Зябликов Александр (DevOPS)',\r\n            translated: 'Zyablikov Alexander (DevOPS)',\r\n        },\r\n        {\r\n            name: 'Подобед Дарья (UI/UX дизайнер)',\r\n            translated: 'Podobed Darya (UI/UX Designer)',\r\n        },\r\n    ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "showTranslated",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "titles",
                    "defaultValue": "[\r\n        {\r\n            name: 'Это приложение CV было сделано усилиями трех человек:',\r\n            translated:\r\n                'This CV application was made by the efforts of three people:',\r\n        },\r\n        {\r\n            name: 'Так же спасибо огромное моей семье, которая на всех этапах разработки меня всегда поддерживала и мотивировала.',\r\n            translated:\r\n                'Also, a huge thank you to my family, who always supported and motivated me at all stages of the development.',\r\n        },\r\n    ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { timer } from 'rxjs';\r\n\r\nimport { ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\n\r\nimport { AuthService } from '@core/service/auth/auth.service';\r\nimport { listAnimation } from '@core/utils/animations/translate-fade-out';\r\n\r\n@Component({\r\n    selector: 'cv-first-time',\r\n    standalone: true,\r\n    animations: [listAnimation],\r\n    templateUrl: './first-time.component.html',\r\n    styleUrls: ['./first-time.component.scss'],\r\n})\r\nexport class FirstTimeComponent implements OnInit {\r\n    public isAuth = false;\r\n    public showTranslated = false;\r\n    public persons = [\r\n        {\r\n            name: 'Черкас Иван (SEO) Fullstack разработчик',\r\n            translated: 'Cherkas Ivan (SEO) Fullstack Developer',\r\n        },\r\n        {\r\n            name: 'Зябликов Александр (DevOPS)',\r\n            translated: 'Zyablikov Alexander (DevOPS)',\r\n        },\r\n        {\r\n            name: 'Подобед Дарья (UI/UX дизайнер)',\r\n            translated: 'Podobed Darya (UI/UX Designer)',\r\n        },\r\n    ];\r\n\r\n    public titles = [\r\n        {\r\n            name: 'Это приложение CV было сделано усилиями трех человек:',\r\n            translated:\r\n                'This CV application was made by the efforts of three people:',\r\n        },\r\n        {\r\n            name: 'Так же спасибо огромное моей семье, которая на всех этапах разработки меня всегда поддерживала и мотивировала.',\r\n            translated:\r\n                'Also, a huge thank you to my family, who always supported and motivated me at all stages of the development.',\r\n        },\r\n    ];\r\n\r\n    constructor(\r\n        private _authService: AuthService,\r\n        private _cd: ChangeDetectorRef,\r\n    ) {}\r\n\r\n    ngOnInit(): void {\r\n        this.isAuth = this._authService.isAuth$.getValue();\r\n        timer(6000).subscribe(() => {\r\n            this.showTranslated = true;\r\n            this._cd.markForCheck();\r\n        });\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../assets/styles/variables' as color;\r\n\r\n.first-time {\r\n  position: relative;\r\n  background-color: color.$white;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  row-gap: 15px;\r\n\r\n  .familly,\r\n  .title {\r\n    font-weight: 700;\r\n    font-size: 16px;\r\n  }\r\n\r\n  .persons {\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n    gap: 10px;\r\n  }\r\n\r\n  .persons li {\r\n    list-style: none;\r\n    padding: 10px;\r\n  }\r\n\r\n  .familly {\r\n    margin-top: 15px;\r\n  }\r\n}",
                    "styleUrl": "./first-time.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "_authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "@if (isAuth) {\r\n    <div class=\"first-time\">\r\n        <span class=\"title\">{{ showTranslated ? titles[0].translated : titles[0].name }}</span>\r\n        <ul\r\n            class=\"persons\"\r\n            [@listAnimation]=\"persons.length\"\r\n        >\r\n            @for (person of persons; track person.name; let i = $index) {\r\n                <li>\r\n                    {{ showTranslated ? person.translated : person.name }}\r\n                </li>\r\n            }\r\n        </ul>\r\n        <span class=\"familly\">\r\n            {{ showTranslated ? titles[1].translated : titles[1].name }}\r\n        </span>\r\n    </div>\r\n}\r\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-794d1c425870de0c1becbaa44a39451cb5667f3db57dc351db2fa9e1e480043df7f4929095f3ef1cebbef3477939131be1b6f2e054dd7367fd871d64dc0213de",
            "file": "src/app/layout/components/footer/footer.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cv-footer",
            "styleUrls": [
                "./footer.component.scss",
                "./footer-dm/footer-dm.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "socialLinks$",
                    "defaultValue": "input.required<ISocialMedia[] | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "theme",
                    "defaultValue": "input<boolean | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterLink"
                },
                {
                    "name": "NgFor"
                },
                {
                    "name": "RouterLinkActive"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgClass, NgFor } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, input } from '@angular/core';\r\nimport { RouterLink, RouterLinkActive } from '@angular/router';\r\n\r\nimport { ISocialMedia } from '@core/models/social-media.interface';\r\n\r\nimport { ButtonComponent } from '../button/button.component';\r\n\r\n@Component({\r\n    selector: 'cv-footer',\r\n    standalone: true,\r\n    imports: [RouterLink, NgFor, RouterLinkActive, ButtonComponent, NgClass],\r\n    templateUrl: './footer.component.html',\r\n    styleUrls: [\r\n        './footer.component.scss',\r\n        './footer-dm/footer-dm.component.scss',\r\n    ],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FooterComponent {\r\n    public socialLinks$ = input.required<ISocialMedia[] | null>();\r\n    public theme = input<boolean | null>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../assets/styles/variables' as color;\r\n@use '../../../../assets/styles/mixins/glassmorphism.mixin' as glassmorphism;\r\n\r\n.footer {\r\n    display: flex;\r\n    position: fixed;\r\n    right: 10%;\r\n    bottom: 2%;\r\n    left: 50%;\r\n    column-gap: 30px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    transform: translate(-50%, -50%);\r\n    width: 80%;\r\n\r\n    .footer-links {\r\n        display: flex;\r\n        column-gap: calc(10.3px + 70 * (100vw / 1920));\r\n        align-items: center;\r\n        transition: background-color 0.5s ease-in-out;\r\n        @include glassmorphism.cards_glassmorphism;\r\n        padding: calc(13px + 10 * (100vw / 1920)) calc(5px + 60 * (100vh / 1920));\r\n\r\n        &_item {\r\n            .item-link {\r\n                display: flex;\r\n                position: relative;\r\n                align-items: center;\r\n                transition: color 0.5s ease-in-out;\r\n                cursor: pointer;\r\n                height: 100%;\r\n                color: color.$black;\r\n                font-size: calc(4px + 12 * (100vw / 1920));\r\n                white-space: nowrap;\r\n\r\n                &_text {\r\n                    text-transform: uppercase;\r\n                }\r\n            }\r\n\r\n            .item-link::before,\r\n            .item-link::after {\r\n                position: absolute;\r\n                top: 50%;\r\n                transform: translateY(-50%);\r\n                opacity: 0;\r\n                transition: opacity 0.3s;\r\n            }\r\n\r\n            .item-link::before {\r\n                left: -10px;\r\n                content: '[';\r\n            }\r\n\r\n            .item-link::after {\r\n                right: -10px;\r\n                content: ']';\r\n            }\r\n\r\n            .item-link:hover::before,\r\n            .item-link:hover::after {\r\n                opacity: 1;\r\n            }\r\n\r\n            .item-link:hover {\r\n                color: color.$blue;\r\n            }\r\n        }\r\n    }\r\n\r\n    .footer-links:hover {\r\n        background-color: color.$white;\r\n    }\r\n}\r\n",
                    "styleUrl": "./footer.component.scss"
                },
                {
                    "data": "@use '../../../../../assets/styles/variables' as color;\r\n@use '../../../../../assets/styles/mixins/glassmorphism.mixin' as glassmorphism;\r\n\r\n.footer.dark-theme {\r\n    .footer-links {\r\n        @include glassmorphism.cards_glassmorphism-dm;\r\n\r\n        &_item {\r\n            .item-link {\r\n                color: color.$white;\r\n            }\r\n\r\n            .item-link:hover {\r\n                color: color.$blue;\r\n            }\r\n        }\r\n    }\r\n\r\n    .footer-links:hover {\r\n        background-color: rgba(41, 41, 41, 1);\r\n    }\r\n}\r\n",
                    "styleUrl": "./footer-dm/footer-dm.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<footer\r\n    class=\"footer\"\r\n    [ngClass]=\"{ 'dark-theme': theme() }\"\r\n>\r\n    <aside class=\"footer-connect\">\r\n        <cv-button\r\n            [buttonTheme]=\"theme()\"\r\n            buttonText=\"Связаться со мной\"\r\n            buttonHoverText=\"Написать мне\"\r\n            buttonType=\"short\"\r\n        ></cv-button>\r\n    </aside>\r\n    <ul class=\"footer-links\">\r\n        @for (itemLink of socialLinks$(); track itemLink.id; let i = $index) {\r\n            <li class=\"footer-links_item\">\r\n                <a\r\n                    href=\"{{ itemLink.link }}\"\r\n                    target=\"_blank\"\r\n                    class=\"item-link\"\r\n                >\r\n                    <p class=\"item-link_text\">{{ itemLink.value }}</p>\r\n                </a>\r\n            </li>\r\n        }\r\n    </ul>\r\n</footer>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-5c68aeb300821171f9e39a4c23007011b2bc9d9b00112a9b24b8b06f750499ccdb3f91b86bac743c18855619a43954fab3f266e9c05ec30e556ea3969bd2d5af",
            "file": "src/app/layout/components/header/header.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cv-header",
            "styleUrls": [
                "./header.component.scss",
                "./header-dark-mode/header.component.dm.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "navigationLinks",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "INavigation[] | null",
                    "decorators": []
                },
                {
                    "name": "theme",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "boolean | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "emittedModalShow",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "currentLanguage",
                    "defaultValue": "'EN'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "currentRoute",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "displayName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "imageUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "isCheckedLanguage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "isModalDialogVisible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeLanguage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showDialogLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "trackByPosition",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "INavigation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "INavigation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "translateNavigationLinks",
                    "args": [
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterLink"
                },
                {
                    "name": "NgFor"
                },
                {
                    "name": "RouterLinkActive"
                },
                {
                    "name": "NgClass"
                },
                {
                    "name": "DarkModeToggleComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Subject, takeUntil } from 'rxjs';\r\n\r\nimport { NgClass, NgFor } from '@angular/common';\r\nimport {\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    EventEmitter,\r\n    Inject,\r\n    Input,\r\n    OnDestroy,\r\n    OnInit,\r\n    Output,\r\n    SimpleChanges,\r\n} from '@angular/core';\r\nimport {\r\n    NavigationEnd,\r\n    Event as NavigationEvent,\r\n    Router,\r\n    RouterLink,\r\n    RouterLinkActive,\r\n} from '@angular/router';\r\n\r\nimport { Store, select } from '@ngrx/store';\r\n\r\nimport { INavigation } from '@core/models/navigation.interface';\r\nimport { LocalStorageService } from '@core/service/local-storage/local-storage.service';\r\nimport { TranslationService } from '@core/service/translation/translation.service';\r\n\r\nimport { selectAuth } from '@layout/store/auth-store/auth.selectors';\r\nimport { ImagesActions } from '@layout/store/images-store/images.actions';\r\nimport { selectImageUrl } from '@layout/store/images-store/images.selectors';\r\nimport { setLanguageSuccess } from '@layout/store/language-selector-store/language.actions';\r\nimport { TLanguages } from '@layout/store/model/languages.type';\r\n\r\nimport { DarkModeToggleComponent } from '../dark-mode-toggle/dark-mode-toggle.component';\r\n\r\n@Component({\r\n    selector: 'cv-header',\r\n    standalone: true,\r\n    imports: [\r\n        RouterLink,\r\n        NgFor,\r\n        RouterLinkActive,\r\n        NgClass,\r\n        DarkModeToggleComponent,\r\n    ],\r\n    templateUrl: './header.component.html',\r\n    styleUrls: [\r\n        './header.component.scss',\r\n        './header-dark-mode/header.component.dm.scss',\r\n    ],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class HeaderComponent implements OnInit, OnDestroy {\r\n    @Input() public navigationLinks: INavigation[] | null = null;\r\n    @Input() public theme: boolean | null = null;\r\n    @Output() public emittedModalShow = new EventEmitter<boolean>();\r\n    public currentLanguage: string = 'EN';\r\n    public isCheckedLanguage: boolean = false;\r\n    public currentRoute: string = '';\r\n    public isModalDialogVisible: boolean = false;\r\n    public displayName = '';\r\n    public imageUrl: string = '';\r\n\r\n    private _destroyed$: Subject<void> = new Subject();\r\n\r\n    constructor(\r\n        @Inject(Router) private readonly _router: Router,\r\n        @Inject(Store) private _store$: Store<TLanguages>,\r\n        private _cdr: ChangeDetectorRef,\r\n        private _localStorageService: LocalStorageService,\r\n        private _translationService: TranslationService,\r\n    ) {}\r\n\r\n    public showDialogLogout() {\r\n        this.isModalDialogVisible = true;\r\n        this.emittedModalShow.emit(true);\r\n    }\r\n\r\n    public changeLanguage() {\r\n        this.isCheckedLanguage = !this.isCheckedLanguage;\r\n        const newLanguage = this.isCheckedLanguage ? 'en' : 'ru';\r\n        this._localStorageService.setLanguage(newLanguage);\r\n        this._store$.dispatch(setLanguageSuccess(newLanguage));\r\n        this.translateNavigationLinks(newLanguage);\r\n    }\r\n\r\n    private translateNavigationLinks(language: string): void {\r\n        if (this.navigationLinks) {\r\n            this.navigationLinks = this.navigationLinks.map((link) => ({\r\n                ...link,\r\n                value: this._translationService.getTranslation(\r\n                    link.value,\r\n                    language,\r\n                ),\r\n            }));\r\n        }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this._router.events\r\n            .pipe(takeUntil(this._destroyed$))\r\n            .subscribe((event: NavigationEvent) => {\r\n                if (event instanceof NavigationEnd) {\r\n                    this.currentRoute = event.url;\r\n                    this._localStorageService.updateCurrentRoute(\r\n                        this.currentRoute,\r\n                    );\r\n                }\r\n            });\r\n\r\n        this._store$\r\n            .pipe(takeUntil(this._destroyed$), select(selectAuth))\r\n            .subscribe();\r\n        this.displayName =\r\n            this._localStorageService.checkLocalStorageUserName();\r\n        this._localStorageService.redirectToSavedRoute();\r\n        this.isCheckedLanguage =\r\n            this._localStorageService.getLanguage() === 'en';\r\n\r\n        this._store$\r\n            .pipe(takeUntil(this._destroyed$), select(selectImageUrl))\r\n            .subscribe((imageUrl: string) => {\r\n                this.imageUrl = imageUrl;\r\n                this._cdr.markForCheck();\r\n            });\r\n\r\n        this._store$.dispatch(ImagesActions.getLogo({ mode: !this.theme }));\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes['navigationLinks'] && this.navigationLinks) {\r\n            this.navigationLinks = [...this.navigationLinks].sort(\r\n                (a, b) => a.position - b.position,\r\n            );\r\n        }\r\n        this._store$.dispatch(ImagesActions.getLogo({ mode: !this.theme }));\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._destroyed$.next();\r\n        this._destroyed$.complete();\r\n    }\r\n\r\n    trackByPosition(index: number, item: INavigation): number {\r\n        return item.position;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../assets/styles/variables' as color;\r\n@use '../../../../assets/styles/mixins/neon.mixin' as neon;\r\n\r\n.navigation-border {\r\n    position: relative;\r\n    z-index: 2;\r\n    border-radius: 60px;\r\n    padding: 10px;\r\n\r\n    .navigation-header {\r\n        display: flex;\r\n        position: relative;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        z-index: 10;\r\n        z-index: 3;\r\n        border-radius: 50px;\r\n        padding: 0 50px;\r\n        height: 96px;\r\n\r\n        .header-logo {\r\n            transition: 0.3s;\r\n            &_link,\r\n            &_link > * {\r\n                width: calc(100px + 140 * (100vw / 1920));\r\n            }\r\n        }\r\n\r\n        .header-links {\r\n            display: flex;\r\n            column-gap: 30px;\r\n            height: 100%;\r\n            &_item {\r\n                .item-link {\r\n                    display: flex;\r\n                    position: relative;\r\n                    align-items: center;\r\n                    transition: color 0.5s ease-in-out;\r\n                    cursor: pointer;\r\n                    height: 100%;\r\n                    color: color.$black;\r\n                    font-size: calc(4px + 12 * (100vw / 1920));\r\n                    white-space: nowrap;\r\n\r\n                    &_text::first-letter {\r\n                        text-transform: uppercase;\r\n                    }\r\n                }\r\n\r\n                .active::before,\r\n                .active::after {\r\n                    position: absolute;\r\n                    top: 50%;\r\n                    transform: translateY(-50%);\r\n                    opacity: 0;\r\n                    transition: opacity 0.3s;\r\n                }\r\n\r\n                .active::before {\r\n                    left: -15px;\r\n                    content: '<';\r\n                }\r\n\r\n                .active::after {\r\n                    right: -20px;\r\n                    content: '/>';\r\n                }\r\n\r\n                .active::before,\r\n                .active::after {\r\n                    opacity: 1;\r\n                }\r\n\r\n                .active {\r\n                    color: color.$blue !important;\r\n                }\r\n\r\n                .item-link:focus,\r\n                .item-link:active {\r\n                    color: color.$blue;\r\n                }\r\n\r\n                .item-link:hover {\r\n                    color: color.$blue;\r\n                }\r\n            }\r\n        }\r\n\r\n        .header-buttons {\r\n            display: flex;\r\n            column-gap: 20px;\r\n            justify-content: space-between;\r\n            align-items: center;\r\n\r\n            &_language {\r\n                cursor: pointer;\r\n                background-color: transparent;\r\n                padding-right: 10px;\r\n            }\r\n\r\n            &_login {\r\n                position: relative;\r\n                cursor: pointer;\r\n                background-color: transparent;\r\n                padding-left: 30px;\r\n            }\r\n\r\n            &_login:before {\r\n                position: absolute;\r\n                top: -5px;\r\n                left: -2px;\r\n                background: color.$darkGray;\r\n                width: 2px;\r\n                height: 30px;\r\n                content: ' ';\r\n            }\r\n        }\r\n    }\r\n\r\n    .light-theme {\r\n        background: color.$white;\r\n        background-image: url('../../../../assets/images/white-mode/background-main-menu.png');\r\n    }\r\n}\r\n\r\n.navigation-border.light-theme {\r\n    transition: 0.3s;\r\n    background-image: url('../../../../assets/images/white-mode/background-main-menu-dark.png');\r\n    background-color: color.$black;\r\n}\r\n\r\n.visible {\r\n    opacity: 0;\r\n    transition: opacity 1.5s ease-in-out;\r\n}\r\n.visible.fade-in {\r\n    opacity: 1;\r\n}\r\n\r\n.hidden {\r\n    opacity: 0;\r\n}\r\n",
                    "styleUrl": "./header.component.scss"
                },
                {
                    "data": "@use '../../../../../assets/styles/variables' as color;\r\n@use '../../../../../assets/styles/mixins/neon.mixin' as neon;\r\n\r\n.dark-theme {\r\n    background: color.$black;\r\n    background-image: url('../../../../../assets/images/white-mode/background-main-menu-dark.png');\r\n}\r\n\r\n.navigation-border {\r\n    .navigation-header.dark-theme {\r\n        .header-links {\r\n            .item-link {\r\n                color: color.$white;\r\n            }\r\n        }\r\n\r\n        .header-buttons {\r\n            > * {\r\n                color: color.$white;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n.navigation-border.fade-in.dark-theme {\r\n    transition: 0.3s;\r\n    background-image: url('../../../../../assets/images/white-mode/background-main-menu.png');\r\n    background-color: color.$white !important;\r\n    @include neon.dm-neon-block;\r\n}\r\n",
                    "styleUrl": "./header-dark-mode/header.component.dm.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_store$",
                        "type": "Store<TLanguages>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_translationService",
                        "type": "TranslationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 66,
                "jsdoctags": [
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_store$",
                        "type": "Store<TLanguages>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_translationService",
                        "type": "TranslationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div\r\n    class=\"navigation-border\"\r\n    [ngClass]=\"{\r\n        'visible fade-in': navigationLinks && navigationLinks.length > 0,\r\n        hidden: !(navigationLinks && navigationLinks.length > 0),\r\n        'dark-theme': theme,\r\n        'light-theme': !theme,\r\n    }\"\r\n>\r\n    <nav\r\n        class=\"navigation-header\"\r\n        [ngClass]=\"theme ? 'dark-theme' : 'light-theme'\"\r\n    >\r\n        <article class=\"header-logo\">\r\n            <a\r\n                class=\"header-logo_link\"\r\n                routerLink=\"/layout/main\"\r\n            >\r\n                <img\r\n                    class=\"header-logo_link-img\"\r\n                    [src]=\"[imageUrl]\"\r\n                    alt=\"logo-i.cherkas.svg\"\r\n                />\r\n            </a>\r\n        </article>\r\n        <ul class=\"header-links\">\r\n            <li\r\n                *ngFor=\"let itemLink of navigationLinks; trackBy: trackByPosition\"\r\n                class=\"header-links_item\"\r\n                [tabindex]=\"itemLink.position\"\r\n            >\r\n                <a\r\n                    routerLink=\"{{ itemLink.link }}\"\r\n                    routerLinkActive=\"active\"\r\n                    [routerLinkActiveOptions]=\"{ exact: true }\"\r\n                    class=\"item-link\"\r\n                >\r\n                    <span class=\"item-link_text\">{{ itemLink.value }}</span>\r\n                </a>\r\n            </li>\r\n        </ul>\r\n        <aside class=\"header-buttons\">\r\n            <cv-dark-mode-toggle></cv-dark-mode-toggle>\r\n            <button\r\n                class=\"header-buttons_language\"\r\n                (click)=\"changeLanguage()\"\r\n            >\r\n                {{ isCheckedLanguage ? 'EN' : 'RU' }}\r\n            </button>\r\n            <button\r\n                class=\"header-buttons_login\"\r\n                (click)=\"showDialogLogout()\"\r\n            >\r\n                {{ displayName || 'GUEST' }}\r\n            </button>\r\n        </aside>\r\n    </nav>\r\n</div>\r\n"
        },
        {
            "name": "LayoutComponent",
            "id": "component-LayoutComponent-cd2d0f7d2f81bdf7bb9257875dfa7843ac4691b458b9b157743c595712abbb66ec423241ceaebd37443819a4ae7c95b09045c84399c7e81a1dc41c4220dbd8ed",
            "file": "src/app/layout/layout.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cv-layout",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./layout.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "afAuth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AngularFireAuth",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 99,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "AngularFireAuth"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "currentTheme$",
                    "defaultValue": "this._store$.pipe(\r\n        takeUntil(this._destroyed$),\r\n        select(darkModeSelector),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "isAuth",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "isExperienceDialogVisible$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "isFirstTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "isModalDialogVisible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "modalData$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IExperience | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "navigation$",
                    "defaultValue": "this._store$.pipe(\r\n        takeUntil(this._destroyed$),\r\n        select(selectNavigation),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<INavigation[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 84,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "social$",
                    "defaultValue": "this._store$.pipe(\r\n        takeUntil(this._destroyed$),\r\n        select(selectSocialMediaLinks),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ISocialMedia[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getModalInstance",
                    "args": [
                        {
                            "name": "$event",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "prepareRoute",
                    "args": [
                        {
                            "name": "outlet",
                            "type": "RouterOutlet",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "outlet",
                            "type": "RouterOutlet",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FooterComponent",
                    "type": "component"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                },
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "AnimationBgComponent",
                    "type": "component"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "SpinnerComponent",
                    "type": "component"
                },
                {
                    "name": "LogoutFormComponent",
                    "type": "component"
                },
                {
                    "name": "ExperienceDialogComponent",
                    "type": "component"
                },
                {
                    "name": "FirstTimeComponent",
                    "type": "component"
                },
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Observable, Subject, takeUntil, timer } from 'rxjs';\r\n\r\nimport { AsyncPipe, NgClass } from '@angular/common';\r\nimport {\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    Inject,\r\n    OnDestroy,\r\n    OnInit,\r\n} from '@angular/core';\r\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\r\nimport { RouterOutlet } from '@angular/router';\r\n\r\nimport { Store, select } from '@ngrx/store';\r\n\r\nimport { IExperience } from '@core/models/experience.interface';\r\nimport { INavigation } from '@core/models/navigation.interface';\r\nimport { ISocialMedia } from '@core/models/social-media.interface';\r\nimport { LocalStorageService } from '@core/service/local-storage/local-storage.service';\r\nimport { routeAnimations } from '@core/utils/animations/router-animations';\r\nimport { startCardFadeIn } from '@core/utils/animations/start-cart-fade-in';\r\nimport { startCardFadeOut } from '@core/utils/animations/start-cart-fade-out';\r\n\r\nimport { AnimationBgComponent } from './components/animation-bg/animation-bg.component';\r\nimport { ExperienceDialogComponent } from './components/experience-dialog/experience-dialog.component';\r\nimport { FirstTimeComponent } from './components/first-time/first-time.component';\r\nimport { FooterComponent } from './components/footer/footer.component';\r\nimport { HeaderComponent } from './components/header/header.component';\r\nimport { LogoutFormComponent } from './components/logout-form/logout-form.component';\r\nimport { SpinnerComponent } from './components/spinner/spinner.component';\r\nimport { darkModeSelector } from './store/dark-mode-store/dark-mode.selectors';\r\nimport { ModalState } from './store/experience-dialog-store/experience-dialog.reducers';\r\nimport {\r\n    selectIsModalOpen,\r\n    selectModalData,\r\n} from './store/experience-dialog-store/experience-dialog.selectors';\r\nimport { FirebaseActions } from './store/firebase-store/firebase.actions';\r\nimport {\r\n    selectNavigation,\r\n    selectSocialMediaLinks,\r\n} from './store/firebase-store/firebase.selectors';\r\nimport { TDarkMode } from './store/model/dark-mode.type';\r\n\r\n@Component({\r\n    selector: 'cv-layout',\r\n    standalone: true,\r\n    animations: [routeAnimations, startCardFadeOut, startCardFadeIn],\r\n    imports: [\r\n        FooterComponent,\r\n        HeaderComponent,\r\n        RouterOutlet,\r\n        AnimationBgComponent,\r\n        AsyncPipe,\r\n        SpinnerComponent,\r\n        LogoutFormComponent,\r\n        ExperienceDialogComponent,\r\n        FirstTimeComponent,\r\n        NgClass,\r\n    ],\r\n    templateUrl: './layout.component.html',\r\n    styleUrl: './layout.component.scss',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LayoutComponent implements OnInit, OnDestroy {\r\n    public isFirstTime!: boolean; //TODO\r\n    public isAuth: boolean = false;\r\n    public isModalDialogVisible: boolean = false;\r\n    public isExperienceDialogVisible$!: Observable<boolean>;\r\n    public modalData$!: Observable<IExperience | null>;\r\n\r\n    private _destroyed$: Subject<void> = new Subject();\r\n\r\n    public currentTheme$: Observable<boolean> = this._store$.pipe(\r\n        takeUntil(this._destroyed$),\r\n        select(darkModeSelector),\r\n    );\r\n\r\n    public getModalInstance($event: boolean) {\r\n        this.isModalDialogVisible = $event;\r\n        console.log(this.isModalDialogVisible);\r\n    }\r\n\r\n    public navigation$: Observable<INavigation[]> = this._store$.pipe(\r\n        takeUntil(this._destroyed$),\r\n        select(selectNavigation),\r\n    );\r\n\r\n    public social$: Observable<ISocialMedia[]> = this._store$.pipe(\r\n        takeUntil(this._destroyed$),\r\n        select(selectSocialMediaLinks),\r\n    );\r\n\r\n    constructor(\r\n        @Inject(Store)\r\n        private _store$: Store<\r\n            TDarkMode | INavigation | ISocialMedia | { modal: ModalState }\r\n        >,\r\n        @Inject(AngularFireAuth) public afAuth: AngularFireAuth,\r\n        private _localStorageService: LocalStorageService,\r\n        private _cdr: ChangeDetectorRef,\r\n    ) {\r\n        this.isFirstTime = this._localStorageService.getIsFirstTime();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this._store$.dispatch(FirebaseActions.getNavigation({ imgName: '' }));\r\n        this._store$.dispatch(FirebaseActions.getSocialMedia({ imgName: '' }));\r\n\r\n        this.afAuth.authState\r\n            .pipe(takeUntil(this._destroyed$))\r\n            .subscribe((user) => {\r\n                if (!user) {\r\n                    this.isModalDialogVisible = true;\r\n                }\r\n            });\r\n\r\n        this.isExperienceDialogVisible$ = this._store$.pipe(\r\n            takeUntil(this._destroyed$),\r\n            select(selectIsModalOpen),\r\n        );\r\n        this.modalData$ = this._store$.pipe(\r\n            takeUntil(this._destroyed$),\r\n            select(selectModalData),\r\n        );\r\n\r\n        if (this.isFirstTime) {\r\n            timer(12000)\r\n                .pipe(takeUntil(this._destroyed$))\r\n                .subscribe(() => {\r\n                    this.isFirstTime = false;\r\n                    this._localStorageService.setIsFirstTime(false);\r\n                    this._cdr.markForCheck();\r\n                });\r\n        }\r\n    }\r\n\r\n    public prepareRoute(outlet: RouterOutlet) {\r\n        return (\r\n            outlet &&\r\n            outlet.activatedRouteData &&\r\n            outlet.activatedRouteData['animation']\r\n        );\r\n    }\r\n\r\n    public closeModal() {\r\n        this.isModalDialogVisible = false;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._destroyed$.next();\r\n        this._destroyed$.complete();\r\n    }\r\n}\r\n",
            "styleUrl": "./layout.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store$",
                        "type": "Store<TDarkMode | INavigation | ISocialMedia | literal type>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "afAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 92,
                "jsdoctags": [
                    {
                        "name": "_store$",
                        "type": "Store<TDarkMode | INavigation | ISocialMedia | literal type>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "afAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "@if (isFirstTime) {\r\n    <cv-first-time @startCardFadeOut></cv-first-time>\r\n}\r\n@if (!isFirstTime) {\r\n    <div\r\n        @startCardFadeIn\r\n        class=\"layout-container\"\r\n        [ngClass]=\"(currentTheme$ | async) ? 'dark-theme' : 'light-theme'\"\r\n    >\r\n        <main class=\"layout\">\r\n            <header class=\"header\">\r\n                <cv-header\r\n                    [theme]=\"currentTheme$ | async\"\r\n                    [navigationLinks]=\"navigation$ | async\"\r\n                    (emittedModalShow)=\"getModalInstance($event)\"\r\n                ></cv-header>\r\n            </header>\r\n\r\n            <cv-animation-bg [navigationLinks]=\"navigation$ | async\"></cv-animation-bg>\r\n\r\n            <main\r\n                class=\"general\"\r\n                [@routeAnimations]=\"prepareRoute(outlet)\"\r\n            >\r\n                <router-outlet #outlet=\"outlet\"></router-outlet>\r\n                <!-- Your content here -->\r\n            </main>\r\n\r\n            <footer class=\"footer\">\r\n                <cv-footer\r\n                    [theme]=\"currentTheme$ | async\"\r\n                    [socialLinks$]=\"social$ | async\"\r\n                ></cv-footer>\r\n            </footer>\r\n        </main>\r\n\r\n        @if (isModalDialogVisible) {\r\n            <cv-logout-form\r\n                header=\"Выход\"\r\n                (emittedModalHide)=\"getModalInstance($event)\"\r\n            ></cv-logout-form>\r\n        }\r\n\r\n        @if (isExperienceDialogVisible$ | async) {\r\n            <cv-experience-dialog header=\"Выход\"></cv-experience-dialog>\r\n        }\r\n    </div>\r\n}\r\n<cv-spinner [spinnerStyle]=\"(currentTheme$ | async) ? 'dark-theme' : 'light-theme'\"></cv-spinner>\r\n"
        },
        {
            "name": "LoginFormComponent",
            "id": "component-LoginFormComponent-01d763f8ba62e381027f4bbf358fc04a10232bba089b3e4f3276d00d49ade8e09dcd7b28245d913451cff374948c0c1954d5b5364adf6c556746a374f4d5e2bb",
            "file": "src/app/layout/components/login-form/login-form.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cv-login-form",
            "styleUrls": [
                "./login-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:mousemove', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "required": true
                }
            ],
            "outputsClass": [
                {
                    "name": "emittedModalHide",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "authForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "closeImageUrl$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:mousemove', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "required": true
                },
                {
                    "name": "imageUrl$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "modal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'modal', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TProfile | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "whiteModeImages$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_authFormListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_checkAuth",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_createForm",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "closeModalDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "confirmModalDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBackgroundClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseMove",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetModalDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:mousemove",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "NgClass"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Observable, Subject, takeUntil } from 'rxjs';\r\n\r\nimport { AsyncPipe, NgClass } from '@angular/common';\r\nimport {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    HostListener,\r\n    Inject,\r\n    OnDestroy,\r\n    OnInit,\r\n    Output,\r\n    ViewChild,\r\n    input,\r\n} from '@angular/core';\r\nimport {\r\n    FormControl,\r\n    FormGroup,\r\n    ReactiveFormsModule,\r\n    Validators,\r\n} from '@angular/forms';\r\n\r\nimport { Store } from '@ngrx/store';\r\n\r\nimport { AuthActions } from '@layout/store/auth-store/auth.actions';\r\nimport { ImagesActions } from '@layout/store/images-store/images.actions';\r\nimport { selectCloseImageUrl } from '@layout/store/images-store/images.selectors';\r\nimport { TAuthUser } from '@layout/store/model/auth-user.type';\r\nimport { TProfile } from '@layout/store/model/profile.type';\r\n\r\n@Component({\r\n    selector: 'cv-login-form',\r\n    standalone: true,\r\n    imports: [ReactiveFormsModule, NgClass, AsyncPipe],\r\n    templateUrl: './login-form.component.html',\r\n    styleUrls: ['./login-form.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LoginFormComponent implements OnInit, OnDestroy {\r\n    @ViewChild('modal', { static: false })\r\n    public modal!: ElementRef;\r\n    @Output() public emittedModalHide = new EventEmitter<boolean>();\r\n    @HostListener('document:mousemove', ['$event'])\r\n    public header = input.required<string>();\r\n    public imageUrl$!: any;\r\n    public url!: any;\r\n    public authForm!: FormGroup;\r\n    public user: TProfile | null = null;\r\n    public whiteModeImages$!: Observable<string[]>;\r\n    public closeImageUrl$!: Observable<string>;\r\n\r\n    public onMouseMove(event: MouseEvent) {\r\n        const target = event.target as HTMLElement;\r\n        if (!this.modal.nativeElement.contains(target)) {\r\n            this.modal.nativeElement.classList.add('dimmed');\r\n        } else {\r\n            this.modal.nativeElement.classList.remove('dimmed');\r\n        }\r\n    }\r\n\r\n    private _destroyed$: Subject<void> = new Subject();\r\n\r\n    constructor(@Inject(Store) private _store$: Store<TAuthUser>) {}\r\n\r\n    ngOnInit(): void {\r\n        const isWhiteMode = true;\r\n        this._store$.dispatch(ImagesActions.getCloseImg({ mode: isWhiteMode }));\r\n\r\n        this._createForm();\r\n        this._authFormListener();\r\n        this._store$.dispatch(ImagesActions.loadThemelessPicturesImages());\r\n        this.closeImageUrl$ = this._store$.select(selectCloseImageUrl);\r\n    }\r\n\r\n    public confirmModalDialog() {\r\n        this._checkAuth();\r\n        this.emittedModalHide.emit(true);\r\n    }\r\n\r\n    public onBackgroundClick(event: MouseEvent): void {\r\n        const target = event.target as HTMLElement;\r\n        if (target.classList.contains(this.modal.nativeElement.classList)) {\r\n            this.closeModalDialog();\r\n        }\r\n    }\r\n\r\n    public closeModalDialog() {\r\n        this.emittedModalHide.emit(true);\r\n    }\r\n\r\n    public resetModalDialog() {\r\n        this.authForm.patchValue({\r\n            email: '',\r\n            password: '',\r\n        });\r\n    }\r\n\r\n    private _checkAuth() {\r\n        const { email, password, guest } = this.authForm.value;\r\n        if (guest) {\r\n            this._store$.dispatch(AuthActions.getLoginGuest());\r\n        } else if (this.authForm.valid) {\r\n            this._store$.dispatch(AuthActions.getLogin({ email, password }));\r\n        } else {\r\n            const error = new Error('Invalid form');\r\n            this._store$.dispatch(AuthActions.getLoginError({ error }));\r\n        }\r\n    }\r\n\r\n    private _authFormListener() {\r\n        this.authForm\r\n            .get('guest')\r\n            ?.valueChanges.pipe(takeUntil(this._destroyed$))\r\n            .subscribe((isGuest) => {\r\n                if (isGuest) {\r\n                    this.authForm.get('email')?.disable();\r\n                    this.authForm.get('password')?.disable();\r\n                } else {\r\n                    this.authForm.get('email')?.enable();\r\n                    this.authForm.get('password')?.enable();\r\n                }\r\n            });\r\n    }\r\n\r\n    private _createForm(): FormGroup {\r\n        this.authForm = new FormGroup({\r\n            email: new FormControl('', {\r\n                validators: [\r\n                    Validators.required,\r\n                    Validators.email,\r\n                    Validators.minLength(3),\r\n                ],\r\n            }),\r\n            password: new FormControl('', {\r\n                validators: [Validators.required, Validators.minLength(3)],\r\n            }),\r\n            guest: new FormControl(false),\r\n        });\r\n        return this.authForm;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._destroyed$.next();\r\n        this._destroyed$.complete();\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../assets/styles/variables' as color;\r\n@use '../../../../assets/styles/mixins/glassmorphism.mixin' as glassmorphism;\r\n@use '../../../../assets/styles/mixins/flex.mixin' as flex;\r\n\r\n.modal-background {\r\n    display: flex;\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    justify-content: center;\r\n    align-items: center;\r\n    z-index: 9999;\r\n    @include glassmorphism.modal_background;\r\n\r\n    .modal-dialog {\r\n        display: flex;\r\n        position: relative;\r\n        flex-direction: column;\r\n        justify-content: flex-start;\r\n        margin-bottom: 15px;\r\n        border-radius: 40px;\r\n        background: color.$white;\r\n        padding-bottom: 10px;\r\n        width: calc(434px + 140 * (100vw / 1920));\r\n        color: color.$black;\r\n\r\n        .header-block {\r\n            display: flex;\r\n            position: relative;\r\n            flex-direction: row;\r\n            justify-content: center;\r\n            align-items: center;\r\n\r\n            &_title {\r\n                margin-top: 52px;\r\n                margin-bottom: 10px;\r\n                font-weight: 600;\r\n                font-size: 20px;\r\n            }\r\n\r\n            &_close-button {\r\n                position: absolute;\r\n                top: 26px;\r\n                right: 26px;\r\n                cursor: pointer;\r\n                background-color: transparent;\r\n                color: color.$black;\r\n                font-size: 1.2rem;\r\n            }\r\n        }\r\n\r\n        &_content {\r\n            padding: 26px;\r\n\r\n            .content-form {\r\n                display: flex;\r\n                row-gap: 26px;\r\n                flex-direction: column;\r\n\r\n                > * {\r\n                    display: flex;\r\n                    row-gap: 5px;\r\n                }\r\n\r\n                &_label {\r\n                    flex-direction: column;\r\n                    color: color.$darkGray;\r\n                    font-size: 14px;\r\n                }\r\n\r\n                &_input {\r\n                    box-sizing: border-box;\r\n                    border-radius: 10px;\r\n                    background-color: color.$lightGrey;\r\n                    padding: 18px 20px;\r\n                    width: 100%;\r\n                    font-style: 16px;\r\n                }\r\n\r\n                &_input:focus,\r\n                &_input:active {\r\n                    border: 1px solid color.$blue;\r\n                }\r\n\r\n                &_submit-buttons {\r\n                    display: flex;\r\n                    row-gap: 26px;\r\n                    flex-direction: column;\r\n                    justify-content: center;\r\n                    align-items: center;\r\n\r\n                    > * {\r\n                        cursor: pointer;\r\n                        border-radius: 50px;\r\n                        width: calc(100% - 140 * (100vw / 1920));\r\n                        height: 52px;\r\n                        font-size: 16px;\r\n                    }\r\n\r\n                    .submit-button {\r\n                        cursor: pointer;\r\n                        background-color: color.$black;\r\n                        color: color.$white;\r\n                    }\r\n\r\n                    .reset-button {\r\n                        transition: transform 0.6s ease-in-out;\r\n                        background-color: transparent;\r\n                        color: color.$black;\r\n                    }\r\n\r\n                    .reset-button:hover {\r\n                        color: color.$blue;\r\n                    }\r\n\r\n                    .disabled-submit {\r\n                        cursor: not-allowed;\r\n                        background-color: color.$darkGray;\r\n                    }\r\n\r\n                    .disabled-reset {\r\n                        cursor: not-allowed;\r\n                        color: color.$darkGray;\r\n                    }\r\n                }\r\n            }\r\n\r\n            .content-form_guest {\r\n                column-gap: 12px;\r\n                justify-content: center;\r\n                align-items: center;\r\n                color: color.$darkGray;\r\n                font-size: 14px;\r\n\r\n                .content-form_checkbox {\r\n                    position: relative;\r\n                    appearance: none;\r\n                    transition:\r\n                        background-color 0.3s,\r\n                        border-color 0.3s;\r\n                    cursor: pointer;\r\n                    outline: none;\r\n                    border: 2px solid color.$darkGray;\r\n                    border-radius: 4px;\r\n                    width: 24px;\r\n                    height: 24px;\r\n\r\n                    &:checked {\r\n                        border-color: color.$black;\r\n                        background-color: color.$black;\r\n                    }\r\n\r\n                    &:checked::after {\r\n                        position: absolute;\r\n                        top: 50%;\r\n                        left: 50%;\r\n                        transform: translate(-50%, -50%);\r\n                        border-radius: 2px;\r\n                        background-color: color.$white;\r\n                        width: 12px;\r\n                        height: 12px;\r\n                        content: '';\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n.modal-background:hover {\r\n    background-color: rgba(255, 255, 255, 0.1);\r\n}\r\n",
                    "styleUrl": "./login-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store$",
                        "type": "Store<TAuthUser>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 62,
                "jsdoctags": [
                    {
                        "name": "_store$",
                        "type": "Store<TAuthUser>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div\r\n    class=\"modal-background\"\r\n    #modal\r\n    (click)=\"onBackgroundClick($event)\"\r\n>\r\n    <dialog class=\"modal-dialog\">\r\n        <header class=\"header-block\">\r\n            <h3 class=\"header-block_title\">{{ header() }}</h3>\r\n            <button\r\n                class=\"header-block_close-button\"\r\n                (click)=\"resetModalDialog()\"\r\n            >\r\n                <img\r\n                    aria-hidden=\"true\"\r\n                    [src]=\"closeImageUrl$ | async\"\r\n                    [alt]=\"closeImageUrl$ | async\"\r\n                />\r\n            </button>\r\n        </header>\r\n        <main class=\"modal-dialog_content\">\r\n            <form\r\n                [formGroup]=\"authForm\"\r\n                method=\"post\"\r\n                class=\"content-form\"\r\n            >\r\n                @if (!authForm.get('guest')?.value) {\r\n                    <label\r\n                        for=\"email\"\r\n                        class=\"content-form_label\"\r\n                    >\r\n                        Е-мейл\r\n                        <input\r\n                            type=\"email\"\r\n                            formControlName=\"email\"\r\n                            id=\"email\"\r\n                            class=\"content-form_input\"\r\n                            autocomplete=\"username\"\r\n                        />\r\n                    </label>\r\n                    <label\r\n                        for=\"password\"\r\n                        class=\"content-form_label\"\r\n                    >\r\n                        Пароль\r\n                        <input\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            formcontrolname=\"password\"\r\n                            class=\"content-form_input ng-untouched ng-pristine ng-invalid\"\r\n                            autocomplete=\"current-password\"\r\n                        />\r\n                    </label>\r\n                }\r\n\r\n                <label\r\n                    for=\"guest\"\r\n                    class=\"content-form_guest\"\r\n                >\r\n                    Продолжить в гостевом режиме\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        id=\"guest\"\r\n                        formControlName=\"guest\"\r\n                        class=\"content-form_checkbox\"\r\n                    />\r\n                </label>\r\n\r\n                <div class=\"content-form_submit-buttons\">\r\n                    <button\r\n                        class=\"submit-button\"\r\n                        (click)=\"confirmModalDialog()\"\r\n                        type=\"button\"\r\n                        [disabled]=\"!authForm.valid && !authForm.get('guest')?.value\"\r\n                        [ngClass]=\"{ 'disabled-submit': !authForm.valid && !authForm.get('guest')?.value }\"\r\n                    >\r\n                        Войти\r\n                    </button>\r\n                    @if (!authForm.get('guest')?.value) {\r\n                        <button\r\n                            class=\"reset-button\"\r\n                            (click)=\"resetModalDialog()\"\r\n                            type=\"button\"\r\n                            [disabled]=\"!authForm.get('email')?.value || !authForm.get('password')?.value\"\r\n                            [ngClass]=\"{\r\n                                'disabled-reset': !authForm.get('email')?.value || !authForm.get('password')?.value,\r\n                            }\"\r\n                        >\r\n                            Сбросить\r\n                        </button>\r\n                    }\r\n                </div>\r\n            </form>\r\n        </main>\r\n    </dialog>\r\n</div>\r\n"
        },
        {
            "name": "LogoutFormComponent",
            "id": "component-LogoutFormComponent-e91ff34690e02fe148903c0ffddb271e702be04ea9dbd219b37bd92b58155648c11d5dc9fcd460358d1a535cbccc4c5fd588bfaf7165d20c228b67a905160caf",
            "file": "src/app/layout/components/logout-form/logout-form.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cv-logout-form",
            "styleUrls": [
                "./logout-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./logout-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:mousemove', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "required": true
                }
            ],
            "outputsClass": [
                {
                    "name": "emittedModalHide",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "actions$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "apiService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "closeImageUrl$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "displayName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getClose$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n            takeUntil(this._destroyed$),\r\n            ofType(ImagesActions.getCloseImg),\r\n            mergeMap((action: any) =>\r\n                this.apiService\r\n                    .getImages(\r\n                        action.mode ? 'white-mode' : 'dark-mode',\r\n                        'close',\r\n                    ) // Добавлен параметр 'close'\r\n                    .pipe(\r\n                        takeUntil(this._destroyed$),\r\n                        map((data) => {\r\n                            if (Array.isArray(data)) {\r\n                                const imageUrl =\r\n                                    data.find((url: string) =>\r\n                                        url.includes('close'),\r\n                                    ) || '';\r\n                                return ImagesActions.getCloseImgSuccess({\r\n                                    imageUrl,\r\n                                });\r\n                            } else {\r\n                                console.error(\r\n                                    'Expected an array but got:',\r\n                                    data,\r\n                                );\r\n                                return ImagesActions.getCloseImgFailure({\r\n                                    error: 'Invalid data format',\r\n                                });\r\n                            }\r\n                        }),\r\n                        catchError((error) =>\r\n                            of(ImagesActions.getCloseImgFailure({ error })),\r\n                        ),\r\n                    ),\r\n            ),\r\n        ),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:mousemove', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "required": true
                },
                {
                    "name": "modal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'modal', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TProfile | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeLogoutDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "confirmLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBackgroundClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseMove",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetModalDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:mousemove",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n    Observable,\r\n    Subject,\r\n    catchError,\r\n    map,\r\n    mergeMap,\r\n    of,\r\n    takeUntil,\r\n} from 'rxjs';\r\n\r\nimport { AsyncPipe } from '@angular/common';\r\nimport {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    HostListener,\r\n    OnDestroy,\r\n    OnInit,\r\n    Output,\r\n    ViewChild,\r\n    input,\r\n} from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { createEffect, ofType } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\n\r\nimport { AuthService } from '@core/service/auth/auth.service';\r\nimport { LocalStorageService } from '@core/service/local-storage/local-storage.service';\r\n\r\nimport { ImagesActions } from '@layout/store/images-store/images.actions';\r\nimport { selectCloseImageUrl } from '@layout/store/images-store/images.selectors';\r\nimport { TProfile } from '@layout/store/model/profile.type';\r\n\r\n@Component({\r\n    selector: 'cv-logout-form',\r\n    standalone: true,\r\n    imports: [ReactiveFormsModule, AsyncPipe],\r\n    templateUrl: './logout-form.component.html',\r\n    styleUrls: ['./logout-form.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LogoutFormComponent implements OnInit, OnDestroy {\r\n    @ViewChild('modal', { static: false })\r\n    public modal!: ElementRef;\r\n    @Output() public emittedModalHide = new EventEmitter<boolean>();\r\n    @HostListener('document:mousemove', ['$event'])\r\n    public header = input.required<string>();\r\n    public user: TProfile | null = null;\r\n    public displayName = '';\r\n    public closeImageUrl$!: Observable<string>;\r\n\r\n    private _destroyed$: Subject<void> = new Subject();\r\n    actions$: any;\r\n    apiService: any;\r\n\r\n    constructor(\r\n        private _authService: AuthService,\r\n        private _localStorageService: LocalStorageService,\r\n        private _store$: Store,\r\n    ) {}\r\n\r\n    public onMouseMove(event: MouseEvent) {\r\n        const target = event.target as HTMLElement;\r\n        if (!this.modal.nativeElement.contains(target)) {\r\n            this.modal.nativeElement.classList.add('dimmed');\r\n        } else {\r\n            this.modal.nativeElement.classList.remove('dimmed');\r\n        }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.displayName =\r\n            this._localStorageService.checkLocalStorageUserName();\r\n\r\n        this._store$.dispatch(ImagesActions.loadThemelessPicturesImages());\r\n\r\n        this.closeImageUrl$ = this._store$.select(selectCloseImageUrl).pipe(\r\n            takeUntil(this._destroyed$),\r\n            map((response: any) => {\r\n                return response;\r\n            }),\r\n        );\r\n    }\r\n\r\n    public confirmLogout() {\r\n        this._authService\r\n            .signOut()\r\n            .pipe(takeUntil(this._destroyed$))\r\n            .subscribe(() => {\r\n                this.emittedModalHide.emit(false);\r\n            });\r\n    }\r\n\r\n    public onBackgroundClick(event: Event): void {\r\n        const target = event.target as HTMLElement;\r\n        if (target.classList.contains(this.modal.nativeElement.classList)) {\r\n            this.closeLogoutDialog();\r\n        }\r\n    }\r\n\r\n    public closeLogoutDialog() {\r\n        this.emittedModalHide.emit(false);\r\n    }\r\n\r\n    public resetModalDialog() {\r\n        this.emittedModalHide.emit(false);\r\n    }\r\n    getClose$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            takeUntil(this._destroyed$),\r\n            ofType(ImagesActions.getCloseImg),\r\n            mergeMap((action: any) =>\r\n                this.apiService\r\n                    .getImages(\r\n                        action.mode ? 'white-mode' : 'dark-mode',\r\n                        'close',\r\n                    ) // Добавлен параметр 'close'\r\n                    .pipe(\r\n                        takeUntil(this._destroyed$),\r\n                        map((data) => {\r\n                            if (Array.isArray(data)) {\r\n                                const imageUrl =\r\n                                    data.find((url: string) =>\r\n                                        url.includes('close'),\r\n                                    ) || '';\r\n                                return ImagesActions.getCloseImgSuccess({\r\n                                    imageUrl,\r\n                                });\r\n                            } else {\r\n                                console.error(\r\n                                    'Expected an array but got:',\r\n                                    data,\r\n                                );\r\n                                return ImagesActions.getCloseImgFailure({\r\n                                    error: 'Invalid data format',\r\n                                });\r\n                            }\r\n                        }),\r\n                        catchError((error) =>\r\n                            of(ImagesActions.getCloseImgFailure({ error })),\r\n                        ),\r\n                    ),\r\n            ),\r\n        ),\r\n    );\r\n\r\n    ngOnDestroy(): void {\r\n        this._destroyed$.next();\r\n        this._destroyed$.complete();\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../assets/styles/variables' as color;\r\n@use '../../../../assets/styles/mixins/glassmorphism.mixin' as glassmorphism;\r\n@use '../../../../assets/styles/mixins/flex.mixin' as flex;\r\n\r\n.modal-background {\r\n    display: flex;\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    justify-content: center;\r\n    align-items: center;\r\n    z-index: 9999;\r\n    @include glassmorphism.modal_background;\r\n\r\n    .modal-dialog {\r\n        display: flex;\r\n        position: relative;\r\n        flex-direction: column;\r\n        justify-content: flex-start;\r\n        margin-bottom: 15px;\r\n        border-radius: 40px;\r\n        background: color.$white;\r\n        padding-bottom: 10px;\r\n        width: calc(434px + 140 * (100vw / 1920));\r\n        color: color.$black;\r\n\r\n        .header-block {\r\n            display: flex;\r\n            position: relative;\r\n            flex-direction: row;\r\n            justify-content: center;\r\n            align-items: center;\r\n\r\n            &_title {\r\n                margin-top: 52px;\r\n                margin-bottom: 10px;\r\n                font-weight: 600;\r\n                font-size: 20px;\r\n            }\r\n\r\n            &_close-button {\r\n                position: absolute;\r\n                top: 26px;\r\n                right: 26px;\r\n                cursor: pointer;\r\n                background-color: transparent;\r\n                color: color.$black;\r\n                font-size: 1.2rem;\r\n            }\r\n        }\r\n\r\n        &_content {\r\n            padding: 26px;\r\n\r\n            .content {\r\n                display: flex;\r\n                row-gap: 26px;\r\n                flex-direction: column;\r\n\r\n                &_question {\r\n                    display: flex;\r\n                    justify-content: center;\r\n                    align-items: center;\r\n                    margin-bottom: 26px;\r\n                    text-align: center;\r\n                }\r\n\r\n                > * {\r\n                    display: flex;\r\n                    row-gap: 5px;\r\n                    flex-direction: column;\r\n                }\r\n\r\n                &_label {\r\n                    color: color.$darkGray;\r\n                    font-size: 14px;\r\n                }\r\n\r\n                &_input {\r\n                    box-sizing: border-box;\r\n                    border-radius: 10px;\r\n                    background-color: color.$lightGrey;\r\n                    padding: 18px 20px;\r\n                    width: 100%;\r\n                    font-style: 16px;\r\n                }\r\n\r\n                &_input:focus,\r\n                &_input:active {\r\n                    border: 1px solid color.$blue;\r\n                }\r\n\r\n                &_submit-buttons {\r\n                    display: flex;\r\n                    row-gap: 26px;\r\n                    flex-direction: column;\r\n                    justify-content: center;\r\n                    align-items: center;\r\n                    cursor: pointer;\r\n\r\n                    > * {\r\n                        border-radius: 50px;\r\n                        width: calc(100% - 140 * (100vw / 1920));\r\n                        height: 52px;\r\n                        font-size: 16px;\r\n                    }\r\n\r\n                    .submit-button {\r\n                        cursor: pointer;\r\n                        background-color: color.$black;\r\n                        color: color.$white;\r\n                    }\r\n\r\n                    .reset-button {\r\n                        transition: transform 0.6s ease-in-out;\r\n                        background-color: transparent;\r\n                        color: color.$black;\r\n                    }\r\n\r\n                    .reset-button:hover {\r\n                        color: color.$blue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n.modal-background:hover {\r\n    background-color: rgba(255, 255, 255, 0.1);\r\n}\r\n",
                    "styleUrl": "./logout-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_store$",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 56,
                "jsdoctags": [
                    {
                        "name": "_authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_store$",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div\r\n    class=\"modal-background\"\r\n    #modal\r\n    (click)=\"onBackgroundClick($event)\"\r\n>\r\n    <dialog class=\"modal-dialog\">\r\n        <header class=\"header-block\">\r\n            <h3 class=\"header-block_title\">{{ header() }}</h3>\r\n            <button\r\n                class=\"header-block_close-button\"\r\n                (click)=\"closeLogoutDialog()\"\r\n            >\r\n                <img\r\n                    aria-hidden=\"true\"\r\n                    [src]=\"closeImageUrl$ | async\"\r\n                    [alt]=\"closeImageUrl$ | async\"\r\n                />\r\n            </button>\r\n        </header>\r\n        <main class=\"modal-dialog_content\">\r\n            <div class=\"content_question\">Вы уверены что хотите покинуть приложение, {{ displayName }}?</div>\r\n            <div class=\"content_submit-buttons\">\r\n                <button\r\n                    class=\"submit-button\"\r\n                    (click)=\"confirmLogout()\"\r\n                    type=\"button\"\r\n                >\r\n                    Выйти\r\n                </button>\r\n                <button\r\n                    class=\"reset-button\"\r\n                    (click)=\"closeLogoutDialog()\"\r\n                    type=\"button\"\r\n                >\r\n                    Отменить\r\n                </button>\r\n            </div>\r\n        </main>\r\n    </dialog>\r\n</div>\r\n"
        },
        {
            "name": "MainComponent",
            "id": "component-MainComponent-b8ce50f4ff301bbab188e9a365ef31eab181b16e247d85e295b1c0efa7dae68aaddada9aa8b84c097ae6ab78899e2dc9e2530debadc2fc87839047b5a5b26974",
            "file": "src/app/layout/pages/main/main.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cv-main",
            "styleUrls": [
                "./main.component.scss",
                "./main-dark-mode/main-dark-mode.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./main.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentTheme$",
                    "defaultValue": "this._store$.pipe(\r\n        select(darkModeSelector),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "mainInfo$",
                    "defaultValue": "this._store$.pipe(\r\n        select(selectMainPageInfo),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IMainPageInfo | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "mainInfoPageData",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMainPageInfo | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "ProfileLogoComponent",
                    "type": "component"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "NgClass"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Observable, Subject, takeUntil } from 'rxjs';\r\n\r\nimport { AsyncPipe, NgClass } from '@angular/common';\r\nimport {\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    Inject,\r\n    OnDestroy,\r\n    OnInit,\r\n} from '@angular/core';\r\nimport { RouterLink } from '@angular/router';\r\n\r\nimport { Store, select } from '@ngrx/store';\r\n\r\nimport { IMainPageInfo } from '@core/models/main-page-info';\r\n\r\nimport { ButtonComponent } from '@layout/components/button/button.component';\r\nimport { darkModeSelector } from '@layout/store/dark-mode-store/dark-mode.selectors';\r\nimport { FirebaseActions } from '@layout/store/firebase-store/firebase.actions';\r\nimport { selectMainPageInfo } from '@layout/store/firebase-store/firebase.selectors';\r\nimport { TDarkMode } from '@layout/store/model/dark-mode.type';\r\n\r\nimport { ProfileLogoComponent } from '../../../layout/components/profile-logo/profile-logo.component';\r\n\r\n@Component({\r\n    selector: 'cv-main',\r\n    standalone: true,\r\n    imports: [\r\n        ButtonComponent,\r\n        ProfileLogoComponent,\r\n        RouterLink,\r\n        NgClass,\r\n        AsyncPipe,\r\n    ],\r\n    templateUrl: './main.component.html',\r\n    styleUrls: [\r\n        './main.component.scss',\r\n        './main-dark-mode/main-dark-mode.component.scss',\r\n    ],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MainComponent implements OnInit, OnDestroy {\r\n    public mainInfo$: Observable<IMainPageInfo | null> = this._store$.pipe(\r\n        select(selectMainPageInfo),\r\n    );\r\n    public mainInfoPageData: IMainPageInfo | null = null;\r\n\r\n    private destroyed$: Subject<void> = new Subject();\r\n    public currentTheme$: Observable<boolean> = this._store$.pipe(\r\n        select(darkModeSelector),\r\n    );\r\n\r\n    constructor(\r\n        private _cdr: ChangeDetectorRef,\r\n        @Inject(Store) private _store$: Store<TDarkMode | IMainPageInfo>,\r\n    ) {}\r\n\r\n    ngOnInit(): void {\r\n        this._store$.dispatch(FirebaseActions.getMainPageInfo({ imgName: '' }));\r\n        this.mainInfo$.pipe(takeUntil(this.destroyed$)).subscribe((info) => {\r\n            this.mainInfoPageData = info;\r\n            this._cdr.markForCheck();\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroyed$.next();\r\n        this.destroyed$.complete();\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".main {\r\n    padding-top: 140px;\r\n    height: 100%;\r\n    &_info {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: space-between;\r\n\r\n        .fullname-img {\r\n            display: flex;\r\n            column-gap: 56px;\r\n            align-items: flex-end;\r\n\r\n            .fullname {\r\n                font-size: calc(14px + 126 * (100vw / 1920));\r\n                font-family: 'RS-semibold';\r\n                text-transform: uppercase;\r\n                white-space: nowrap;\r\n            }\r\n        }\r\n\r\n        .description-projects-stack {\r\n            display: flex;\r\n            align-items: center;\r\n\r\n            .description {\r\n                align-self: center;\r\n                font-size: calc(12px + 6 * (100vw / 1920));\r\n                font-family: 'RS-extralight';\r\n            }\r\n\r\n            .stack {\r\n                font-size: calc(14px + 126 * (100vw / 1920));\r\n                font-family: 'RS-semibold';\r\n                text-transform: uppercase;\r\n                white-space: nowrap;\r\n            }\r\n\r\n            .projects-button {\r\n                width: calc(115px + 120 * (100vw / 1920));\r\n                height: calc(100px + 12 * (100vh / 1080));\r\n\r\n                &_link {\r\n                    display: block;\r\n                    width: 100%;\r\n                    height: 100%;\r\n                }\r\n\r\n                &_img {\r\n                    border-radius: 50px;\r\n                }\r\n            }\r\n        }\r\n\r\n        .status-cv {\r\n            display: flex;\r\n            justify-content: flex-end;\r\n            align-items: center;\r\n            .status {\r\n                margin-right: 40px;\r\n                font-size: calc(14px + 126 * (100vw / 1920));\r\n                font-family: 'RS-semibold';\r\n                text-transform: uppercase;\r\n            }\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./main.component.scss"
                },
                {
                    "data": "@use '../../../../../assets/styles/variables' as color;\r\n@use '../../../../../assets/styles/mixins/neon.mixin' as neon;\r\n\r\n.main.dark-theme {\r\n    color: color.$white;\r\n    .fullname-img {\r\n        .fullname {\r\n            @include neon.dm-neon-text;\r\n            color: color.$white;\r\n        }\r\n    }\r\n\r\n    .description-projects-stack {\r\n        .description {\r\n            @include neon.dm-neon-text;\r\n            color: color.$white;\r\n        }\r\n\r\n        .stack {\r\n            @include neon.dm-neon-text;\r\n            color: color.$white;\r\n        }\r\n\r\n        .projects-button {\r\n            &_link {\r\n            }\r\n\r\n            &_img {\r\n            }\r\n        }\r\n    }\r\n\r\n    .status-cv {\r\n        .status {\r\n            @include neon.dm-neon-text;\r\n            color: color.$white;\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./main-dark-mode/main-dark-mode.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_store$",
                        "type": "Store<TDarkMode | IMainPageInfo>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 52,
                "jsdoctags": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_store$",
                        "type": "Store<TDarkMode | IMainPageInfo>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "@if (mainInfoPageData) {\r\n    <main\r\n        class=\"main\"\r\n        [ngClass]=\"{ 'dark-theme': (currentTheme$ | async) }\"\r\n    >\r\n        <div class=\"main_info\">\r\n            <section class=\"fullname-img\">\r\n                <span class=\"fullname\">{{ mainInfoPageData.fullName }}</span>\r\n                <cv-profile-logo></cv-profile-logo>\r\n            </section>\r\n            <section class=\"description-projects-stack\">\r\n                <p class=\"description\">\r\n                    {{ mainInfoPageData.description }}\r\n                </p>\r\n                <button class=\"projects-button\">\r\n                    <a\r\n                        routerLink=\"/layout/projects\"\r\n                        class=\"projects-button_link\"\r\n                    >\r\n                        <img\r\n                            class=\"projects-button_img\"\r\n                            [src]=\"mainInfoPageData.imgSrc\"\r\n                            alt=\"project-link-button.png\"\r\n                        />\r\n                    </a>\r\n                </button>\r\n                <span class=\"stack\">{{ mainInfoPageData.stack }}</span>\r\n            </section>\r\n            <section class=\"status-cv\">\r\n                <span class=\"status\">{{ mainInfoPageData.status }}</span>\r\n                <cv-button\r\n                    buttonType=\"long\"\r\n                    buttonText=\"{{ mainInfoPageData.buttonText }}\"\r\n                    buttonHoverText=\"{{ mainInfoPageData.buttonHoverText }}\"\r\n                    [buttonTheme]=\"currentTheme$ | async\"\r\n                ></cv-button>\r\n            </section>\r\n        </div>\r\n    </main>\r\n}\r\n"
        },
        {
            "name": "NotFoundComponent",
            "id": "component-NotFoundComponent-4978a1ba90ce1b87230a852391aa16190a072242cc02d8b66c915aa4d052e251aaf933c3932fea10b9fac227e826294faf5114f63b83fa8e5450aeeb38b72eb1",
            "file": "src/app/layout/pages/notFound/notFound.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cv-not-found",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./notFound.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'cv-not-found',\r\n    standalone: true,\r\n    imports: [],\r\n    templateUrl: './notFound.component.html',\r\n    styleUrl: './notFound.component.scss',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class NotFoundComponent {}\r\n",
            "styleUrl": "./notFound.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>404 works!</p>\r\n"
        },
        {
            "name": "ProfileLogoComponent",
            "id": "component-ProfileLogoComponent-ebd9e38aa46d799c869bf7ce9ad1b933bccc4cc616d2e823e3a59308a9d66f9ab66ded0190b030424d124ab5496fec40b014713c77b44de4ff00e0e4a1f0fe25",
            "file": "src/app/layout/components/profile-logo/profile-logo.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cv-profile-logo",
            "styleUrls": [
                "./profile-logo.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./profile-logo.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentTheme$",
                    "defaultValue": "this._store$.pipe(\r\n        select(darkModeSelector),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "profileImageUrl$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string | undefined>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "githubNavigation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Observable, switchMap } from 'rxjs';\r\n\r\nimport { AsyncPipe, DOCUMENT, NgClass } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Inject } from '@angular/core';\r\n\r\nimport { Store, select } from '@ngrx/store';\r\n\r\nimport { darkModeSelector } from '@layout/store/dark-mode-store/dark-mode.selectors';\r\nimport { ImagesActions } from '@layout/store/images-store/images.actions';\r\nimport { selectProfileImageUrl } from '@layout/store/images-store/images.selectors';\r\n\r\n@Component({\r\n    selector: 'cv-profile-logo',\r\n    standalone: true,\r\n    imports: [AsyncPipe, NgClass],\r\n    templateUrl: './profile-logo.component.html',\r\n    styleUrls: ['./profile-logo.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProfileLogoComponent {\r\n    public currentTheme$: Observable<boolean> = this._store$.pipe(\r\n        select(darkModeSelector),\r\n    );\r\n    public profileImageUrl$: Observable<string | undefined>;\r\n\r\n    constructor(\r\n        @Inject(DOCUMENT) private document: Document,\r\n        @Inject(Store) private _store$: Store,\r\n    ) {\r\n        this.profileImageUrl$ = this.currentTheme$.pipe(\r\n            switchMap((isDarkMode) => {\r\n                const mode = !isDarkMode;\r\n                this._store$.dispatch(ImagesActions.getProfileImg({ mode }));\r\n                return this._store$.pipe(select(selectProfileImageUrl));\r\n            }),\r\n        );\r\n    }\r\n\r\n    public githubNavigation() {\r\n        this.document.defaultView?.open(\r\n            'https://github.com/CherkasIvan',\r\n            '_blank',\r\n        );\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../assets/styles/variables' as color;\r\n\r\n.profile-logo {\r\n    position: relative;\r\n    transition: all 1s ease;\r\n    cursor: pointer;\r\n    width: 172px;\r\n    height: 172px;\r\n    overflow: hidden;\r\n\r\n    &_circle {\r\n        position: absolute;\r\n        z-index: 100;\r\n        transition: opacity 1s ease;\r\n        box-sizing: border-box;\r\n        border-radius: 50%;\r\n    }\r\n\r\n    &_circle:nth-child(1) {\r\n        top: 0;\r\n        left: 0;\r\n        opacity: 0.7;\r\n        border: 21px solid color.$white;\r\n        width: 100%;\r\n        height: 100%;\r\n    }\r\n\r\n    &_circle:nth-child(2) {\r\n        top: 20px;\r\n        left: 20px;\r\n        opacity: 0.5;\r\n        border: 18px solid color.$white;\r\n        width: calc(100% - 40px);\r\n        height: calc(100% - 40px);\r\n    }\r\n\r\n    &_circle:nth-child(3) {\r\n        top: 36px;\r\n        left: 36px;\r\n        opacity: 0.3;\r\n        border: 12px solid color.$white;\r\n        width: calc(100% - 72px);\r\n        height: calc(100% - 72px);\r\n    }\r\n\r\n    &_img {\r\n        position: absolute;\r\n        top: 1px;\r\n        left: 1px;\r\n        border-radius: 50%;\r\n        max-width: 170px;\r\n        max-height: 170px;\r\n    }\r\n}\r\n.profile-logo:hover {\r\n    transform: rotate(15deg);\r\n}\r\n\r\n.profile-logo:hover .profile-logo_circle {\r\n    opacity: 0;\r\n}\r\n\r\n.profile-logo:hover .profile-logo_circle:nth-child(1) {\r\n    transition: opacity 1s ease 1s;\r\n}\r\n.profile-logo:hover .profile-logo_circle:nth-child(2) {\r\n    transition: opacity 1s ease 0.5s;\r\n}\r\n.profile-logo:hover .profile-logo_circle:nth-child(3) {\r\n    transition: opacity 1s ease 0.25s;\r\n}\r\n",
                    "styleUrl": "./profile-logo.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_store$",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_store$",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div\r\n    class=\"profile-logo\"\r\n    (click)=\"githubNavigation()\"\r\n    (keyup.enter)=\"githubNavigation()\"\r\n    tabindex=\"0\"\r\n>\r\n    <div\r\n        class=\"profile-logo_circle\"\r\n        [ngClass]=\"{ 'dark-theme': (currentTheme$ | async) }\"\r\n    ></div>\r\n    <div\r\n        class=\"profile-logo_circle\"\r\n        [ngClass]=\"{ 'dark-theme': (currentTheme$ | async) }\"\r\n    ></div>\r\n    <div\r\n        class=\"profile-logo_circle\"\r\n        [ngClass]=\"{ 'dark-theme': (currentTheme$ | async) }\"\r\n    ></div>\r\n    <img\r\n        class=\"profile-logo_img\"\r\n        [src]=\"profileImageUrl$ | async\"\r\n        alt=\"logo.jpg\"\r\n    />\r\n</div>\r\n"
        },
        {
            "name": "ProjectChipsComponent",
            "id": "component-ProjectChipsComponent-3bcea50c3d36ad1c2a78caf8674f188ef9bf6793c746fbd73154e2b82921e447912bef528ba492f0f5ff34523aba1bd50f30ca22f0b42518ae9ffe177f67619b",
            "file": "src/app/layout/pages/projects/components/project-chips/project-chips.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cv-project-chips",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./project-chips.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "projectChipsText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        125
                    ],
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentTheme$",
                    "defaultValue": "this._store$.pipe(\r\n        select(darkModeSelector),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "projectChipsText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        125
                    ],
                    "required": true
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgClass"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\nimport { AsyncPipe, NgClass } from '@angular/common';\r\nimport { Component, Inject, input } from '@angular/core';\r\n\r\nimport { Store, select } from '@ngrx/store';\r\n\r\nimport { darkModeSelector } from '@layout/store/dark-mode-store/dark-mode.selectors';\r\nimport { TDarkMode } from '@layout/store/model/dark-mode.type';\r\n\r\n@Component({\r\n    selector: 'cv-project-chips',\r\n    standalone: true,\r\n    imports: [NgClass, AsyncPipe],\r\n    templateUrl: './project-chips.component.html',\r\n    styleUrl: './project-chips.component.scss',\r\n})\r\nexport class ProjectChipsComponent {\r\n    public projectChipsText = input.required<string>();\r\n    public currentTheme$: Observable<boolean> = this._store$.pipe(\r\n        select(darkModeSelector),\r\n    );\r\n\r\n    constructor(@Inject(Store) private _store$: Store<TDarkMode>) {}\r\n}\r\n",
            "styleUrl": "./project-chips.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store$",
                        "type": "Store<TDarkMode>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "_store$",
                        "type": "Store<TDarkMode>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div\r\n    class=\"project-chips\"\r\n    [ngClass]=\"{ 'dark-theme': (currentTheme$ | async) }\"\r\n>\r\n    {{ projectChipsText() }}\r\n</div>\r\n"
        },
        {
            "name": "ProjectsComponent",
            "id": "component-ProjectsComponent-7403f3cb09d7ed9e333c7271db3d386863adc6ebac82aa3682f6fd87bbe152c8398681a071210514a6bb26ba10de4de53993673900e71db4f5edb0ee934554a4",
            "file": "src/app/layout/pages/projects/projects.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cv-projects",
            "styleUrls": [
                "./projects.component.scss",
                "./projects-dm/projects-dm.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./projects.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentTheme$",
                    "defaultValue": "this._store$.pipe(\r\n        select(darkModeSelector),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "githubRepos$",
                    "defaultValue": "this._store$.pipe(\r\n        select(selectGithubRepositories),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<TGitHub[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getClass",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "NgClass"
                },
                {
                    "name": "DatePipe",
                    "type": "pipe"
                },
                {
                    "name": "ProjectChipsComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\nimport { AsyncPipe, DatePipe, NgClass } from '@angular/common';\r\nimport {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    Inject,\r\n    OnInit,\r\n} from '@angular/core';\r\n\r\nimport { Store, select } from '@ngrx/store';\r\n\r\nimport { TGitHub } from '@core/models/github.type';\r\n\r\nimport { ButtonComponent } from '@layout/components/button/button.component';\r\nimport { darkModeSelector } from '@layout/store/dark-mode-store/dark-mode.selectors';\r\nimport { GithubRepositoriesActions } from '@layout/store/github-projects-store/github-projects.action';\r\nimport { selectGithubRepositories } from '@layout/store/github-projects-store/github-projects.selector';\r\nimport { TDarkMode } from '@layout/store/model/dark-mode.type';\r\n\r\nimport { ProjectChipsComponent } from './components/project-chips/project-chips.component';\r\n\r\n@Component({\r\n    selector: 'cv-projects',\r\n    standalone: true,\r\n    imports: [\r\n        AsyncPipe,\r\n        NgClass,\r\n        DatePipe,\r\n        ProjectChipsComponent,\r\n        ButtonComponent,\r\n    ],\r\n    templateUrl: './projects.component.html',\r\n    styleUrls: [\r\n        './projects.component.scss',\r\n        './projects-dm/projects-dm.component.scss',\r\n    ],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProjectsComponent implements OnInit {\r\n    public githubRepos$: Observable<TGitHub[]> = this._store$.pipe(\r\n        select(selectGithubRepositories),\r\n    );\r\n    public currentTheme$: Observable<boolean> = this._store$.pipe(\r\n        select(darkModeSelector),\r\n    );\r\n\r\n    public getClass(index: number): string {\r\n        const row = Math.floor(index / 3);\r\n        const position = index % 3;\r\n        if (row % 2 === 0) {\r\n            if (position === 0) return 'item1';\r\n            if (position === 1) return 'item2';\r\n            if (position === 2) return 'item3';\r\n        } else {\r\n            if (position === 0) return 'item4';\r\n            if (position === 1) return 'item5';\r\n            if (position === 2) return 'item6';\r\n        }\r\n        return '';\r\n    }\r\n\r\n    constructor(@Inject(Store) private _store$: Store<TGitHub[] | TDarkMode>) {}\r\n\r\n    ngOnInit(): void {\r\n        this._store$.dispatch(GithubRepositoriesActions.getRepositories());\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../assets/styles/variables' as color;\r\n@use '../../../../assets/styles/mixins/glassmorphism.mixin' as glassmorphism;\r\n\r\n.projects {\r\n    padding-top: 140px;\r\n    padding-bottom: 170px;\r\n    height: 100%;\r\n    overflow-y: auto;\r\n}\r\n\r\n.grid-container {\r\n    display: grid;\r\n    grid-template-columns: repeat(8, 1fr);\r\n    gap: 10px;\r\n}\r\n\r\n.grid-container > .project {\r\n    position: relative;\r\n    border-radius: 20px;\r\n    background-color: lightblue;\r\n    padding: 20px;\r\n    height: 500px;\r\n    overflow: hidden;\r\n}\r\n\r\n.repository-panel {\r\n    display: flex;\r\n    position: absolute;\r\n    bottom: 0;\r\n    left: 0;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n    align-items: flex-start;\r\n    transition: height 0.4s ease-in-out;\r\n    padding: 40px 24px;\r\n    @include glassmorphism.projects_glassmorphism;\r\n    border-radius: 20px;\r\n    width: 100%;\r\n    height: 20%;\r\n\r\n    &__description {\r\n        display: flex;\r\n        row-gap: 8px;\r\n        flex-direction: column;\r\n    }\r\n\r\n    &__name {\r\n        font-weight: 700;\r\n        font-size: 20px;\r\n    }\r\n\r\n    > * {\r\n        color: color.$black;\r\n    }\r\n}\r\n\r\n.repository-aside {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: flex-end;\r\n    opacity: 0;\r\n    transition: opacity 0.4s ease-in-out;\r\n    width: 100%;\r\n}\r\n\r\n.project:hover .repository-panel {\r\n    height: 75%;\r\n}\r\n\r\n.project:hover .repository-aside {\r\n    opacity: 1;\r\n}\r\n\r\n.item2,\r\n.item4,\r\n.item3,\r\n.item5 {\r\n    grid-column: span 2;\r\n\r\n    .repository-aside {\r\n        row-gap: 20px;\r\n        flex-direction: column;\r\n        align-items: center;\r\n    }\r\n}\r\n\r\n.item1,\r\n.item6 {\r\n    grid-column: span 4;\r\n}\r\n",
                    "styleUrl": "./projects.component.scss"
                },
                {
                    "data": "@use '../../../../../assets/styles/variables' as color;\r\n@use '../../../../../assets/styles/mixins/glassmorphism.mixin' as glassmorphism;\r\n\r\n.repository-panel.dark-theme {\r\n    @include glassmorphism.projects_glassmorphism-dm;\r\n\r\n    .repository__name {\r\n        font-weight: 700;\r\n        font-size: 20px;\r\n    }\r\n\r\n    > * {\r\n        color: color.$white;\r\n    }\r\n}\r\n",
                    "styleUrl": "./projects-dm/projects-dm.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store$",
                        "type": "Store<[] | TDarkMode>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 61,
                "jsdoctags": [
                    {
                        "name": "_store$",
                        "type": "Store<[] | TDarkMode>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<section class=\"projects\">\r\n    <div class=\"grid-container\">\r\n        @for (repository of githubRepos$ | async; track repository.name; let i = $index) {\r\n            <div\r\n                [ngClass]=\"getClass(i)\"\r\n                class=\"project\"\r\n            >\r\n                <div\r\n                    class=\"repository-panel\"\r\n                    [ngClass]=\"{ 'dark-theme': (currentTheme$ | async) }\"\r\n                >\r\n                    <div class=\"repository-panel__description\">\r\n                        <span class=\"repository-panel__name\">\r\n                            {{ repository.name }}\r\n                        </span>\r\n                        <span class=\"repository-panel__updated\">\r\n                            {{ repository.updated_at | date: 'fullDate' }}\r\n                        </span>\r\n                    </div>\r\n                    <aside class=\"repository-aside\">\r\n                        <div class=\"repository-technologies\">\r\n                            <cv-project-chips projectChipsText=\"Angular\"></cv-project-chips>\r\n                        </div>\r\n                        <div class=\"repository-conection\">\r\n                            <cv-button\r\n                                [buttonTheme]=\"currentTheme$ | async\"\r\n                                buttonText=\"Перейти на сайт\"\r\n                                buttonHoverText=\"Перейти\"\r\n                                buttonType=\"short\"\r\n                            ></cv-button>\r\n                        </div>\r\n                    </aside>\r\n                </div>\r\n            </div>\r\n        }\r\n    </div>\r\n</section>\r\n"
        },
        {
            "name": "SpinnerComponent",
            "id": "component-SpinnerComponent-8b0e78e98edcb0664191e0eeaa4ea96d0a94c9b2c1cfbdab9279a9b99c64378c3c83f9aefb97c53f2f1ba293d9b290f5e9b9550517dfe36d6f0b27804434b487",
            "file": "src/app/layout/components/spinner/spinner.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "LoadingInterceptor"
                }
            ],
            "selector": "cv-spinner",
            "styleUrls": [
                "./spinner.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./spinner.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loading$",
                    "defaultValue": "this._store.pipe(\r\n        select(spinnerSelector),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "spinnerStyle",
                    "defaultValue": "input<string>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\nimport { CommonModule } from '@angular/common';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { ChangeDetectionStrategy, Component, input } from '@angular/core';\r\n\r\nimport { Store, select } from '@ngrx/store';\r\n\r\nimport { LoadingInterceptor } from '@core/interceptors/loading.interceptor';\r\n\r\nimport { ISpinner } from '@layout/store/model/spinner.interface';\r\nimport { spinnerSelector } from '@layout/store/spinner-store/spinner.selector';\r\n\r\n@Component({\r\n    selector: 'cv-spinner',\r\n    standalone: true,\r\n    imports: [CommonModule],\r\n    templateUrl: './spinner.component.html',\r\n    styleUrls: ['./spinner.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [\r\n        {\r\n            provide: HTTP_INTERCEPTORS,\r\n            useClass: LoadingInterceptor,\r\n            multi: true,\r\n        },\r\n    ],\r\n})\r\nexport class SpinnerComponent {\r\n    public spinnerStyle = input<string>('');\r\n    public loading$: Observable<boolean> = this._store.pipe(\r\n        select(spinnerSelector),\r\n    );\r\n\r\n    constructor(private _store: Store<ISpinner>) {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../assets/styles/mixins/flex.mixin' as *;\r\n\r\n.loader {\r\n    position: fixed;\r\n    top: 30%;\r\n    left: 45%;\r\n    width: 20em;\r\n    height: 20em;\r\n    font-size: 10px;\r\n    @include flex-a_center-j_center;\r\n    z-index: 999999;\r\n}\r\n\r\n.loader .face {\r\n    position: absolute;\r\n    animation: animate 3s linear infinite;\r\n    border-style: solid;\r\n    border-radius: 50%;\r\n}\r\n\r\n.loader .face:nth-child(1) {\r\n    border-width: 0.2em 0.2em 0em 0em;\r\n    border-color: currentColor transparent transparent currentColor;\r\n    width: 100%;\r\n    height: 100%;\r\n    color: gold;\r\n    --deg: -45deg;\r\n    animation-direction: normal;\r\n}\r\n\r\n.loader .face:nth-child(2) {\r\n    border-width: 0.2em 0em 0em 0.2em;\r\n    border-color: currentColor currentColor transparent transparent;\r\n    width: 70%;\r\n    height: 70%;\r\n    color: lime;\r\n    --deg: -135deg;\r\n    animation-direction: reverse;\r\n}\r\n\r\n.loader .face .circle {\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: rotate(var(--deg));\r\n    transform-origin: left;\r\n    background-color: transparent;\r\n    width: 50%;\r\n    height: 0.1em;\r\n}\r\n\r\n.loader .face .circle::before {\r\n    position: absolute;\r\n    top: -0.5em;\r\n    right: -0.5em;\r\n    box-shadow:\r\n        0 0 2em,\r\n        0 0 4em,\r\n        0 0 6em,\r\n        0 0 8em,\r\n        0 0 10em,\r\n        0 0 0 0.5em rgba(255, 255, 0, 0.1);\r\n    border-radius: 50%;\r\n    background-color: currentColor;\r\n    width: 1em;\r\n    height: 1em;\r\n    content: '';\r\n}\r\n\r\n@keyframes animate {\r\n    to {\r\n        transform: rotate(1turn);\r\n    }\r\n}\r\n\r\nbody {\r\n    display: flex;\r\n    background: black;\r\n    height: 100vh;\r\n    overflow-y: hidden;\r\n}\r\n\r\n.circles {\r\n    position: fixed;\r\n    top: 30%;\r\n    left: 45%;\r\n    width: 20em;\r\n    height: 20em;\r\n    font-size: 10px;\r\n    @include flex-a_center-j_center;\r\n    z-index: 999999;\r\n}\r\n\r\n.circles > * {\r\n    position: absolute;\r\n    animation: spin 4s infinite linear alternate;\r\n    box-sizing: border-box;\r\n    border: 5px solid powderblue;\r\n    border-top: 0 solid transparent;\r\n    border-left: 0 solid transparent;\r\n    border-radius: 50%;\r\n    background-color: transparent;\r\n}\r\n\r\n.circle1 {\r\n    animation-delay: -5s;\r\n    border-color: rgba(163, 207, 213, 1);\r\n    width: 300px;\r\n    height: 300px;\r\n}\r\n\r\n.circle2 {\r\n    top: 10px;\r\n    left: 10px;\r\n    animation-delay: -4.9s;\r\n    border-color: rgba(163, 207, 213, 0.95);\r\n    width: 280px;\r\n    height: 280px;\r\n}\r\n\r\n.circle3 {\r\n    top: 20px;\r\n    left: 20px;\r\n    animation-delay: -4.8s;\r\n    border-color: rgba(163, 207, 213, 0.9);\r\n    width: 260px;\r\n    height: 260px;\r\n}\r\n\r\n.circle4 {\r\n    top: 30px;\r\n    left: 30px;\r\n    animation-delay: -4.7s;\r\n    border-color: rgba(163, 207, 213, 0.85);\r\n    width: 240px;\r\n    height: 240px;\r\n}\r\n\r\n.circle5 {\r\n    top: 40px;\r\n    left: 40px;\r\n    animation-delay: -4.6s;\r\n    border-color: rgba(163, 207, 213, 0.8);\r\n    width: 220px;\r\n    height: 220px;\r\n}\r\n\r\n.circle6 {\r\n    top: 50px;\r\n    left: 50px;\r\n    animation-delay: -4.5s;\r\n    border-color: rgba(163, 207, 213, 0.75);\r\n    width: 200px;\r\n    height: 200px;\r\n}\r\n\r\n.circle7 {\r\n    top: 60px;\r\n    left: 60px;\r\n    animation-delay: -4.4s;\r\n    border-color: rgba(163, 207, 213, 0.7);\r\n    width: 180px;\r\n    height: 180px;\r\n}\r\n\r\n.circle8 {\r\n    top: 70px;\r\n    left: 70px;\r\n    animation-delay: -4.3s;\r\n    border-color: rgba(163, 207, 213, 0.65);\r\n    width: 160px;\r\n    height: 160px;\r\n}\r\n\r\n.circle9 {\r\n    top: 80px;\r\n    left: 80px;\r\n    animation-delay: -4.2s;\r\n    border-color: rgba(163, 207, 213, 0.6);\r\n    width: 140px;\r\n    height: 140px;\r\n}\r\n\r\n.circle10 {\r\n    top: 90px;\r\n    left: 90px;\r\n    animation-delay: -4.1s;\r\n    border-color: rgba(163, 207, 213, 0.55);\r\n    width: 120px;\r\n    height: 120px;\r\n}\r\n\r\n.circle11 {\r\n    top: 100px;\r\n    left: 100px;\r\n    animation-delay: -4s;\r\n    border-color: rgba(163, 207, 213, 0.5);\r\n    width: 100px;\r\n    height: 100px;\r\n}\r\n\r\n.circle12 {\r\n    top: 110px;\r\n    left: 110px;\r\n    animation-delay: -3.9s;\r\n    border-color: rgba(163, 207, 213, 0.45);\r\n    width: 80px;\r\n    height: 80px;\r\n}\r\n\r\n.circle13 {\r\n    top: 120px;\r\n    left: 120px;\r\n    animation-delay: -3.8s;\r\n    border-color: rgba(163, 207, 213, 0.4);\r\n    width: 60px;\r\n    height: 60px;\r\n}\r\n\r\n.circle14 {\r\n    top: 130px;\r\n    left: 130px;\r\n    animation-delay: -3.7s;\r\n    border-color: rgba(163, 207, 213, 0.35);\r\n    width: 40px;\r\n    height: 40px;\r\n}\r\n\r\n.circle15 {\r\n    top: 140px;\r\n    left: 140px;\r\n    animation-delay: -3.6s;\r\n    border-color: rgba(163, 207, 213, 0.3);\r\n    width: 20px;\r\n    height: 20px;\r\n}\r\n\r\n@keyframes spin {\r\n    0% {\r\n        transform: rotate(0deg);\r\n    }\r\n\r\n    100% {\r\n        transform: rotate(360deg);\r\n    }\r\n}\r\n",
                    "styleUrl": "./spinner.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store",
                        "type": "Store<ISpinner>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "_store",
                        "type": "Store<ISpinner>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<ng-template #isWhiteMode>\r\n    @if (loading$ | async) {\r\n        <div\r\n            [ngClass]=\"spinnerStyle\"\r\n            class=\"loader\"\r\n        >\r\n            <div class=\"face\">\r\n                <div class=\"circle\"></div>\r\n            </div>\r\n            <div class=\"face\">\r\n                <div class=\"circle\"></div>\r\n            </div>\r\n        </div>\r\n    }\r\n</ng-template>\r\n\r\n@if (spinnerStyle() === 'light-theme') {\r\n    <ng-container [ngTemplateOutlet]=\"isWhiteMode\"></ng-container>\r\n}\r\n\r\n<ng-template #isDarkMode>\r\n    @if (loading$ | async) {\r\n        <div\r\n            [ngClass]=\"spinnerStyle\"\r\n            class=\"circles\"\r\n        >\r\n            <div class=\"circles\">\r\n                <div class=\"circle1\"></div>\r\n                <div class=\"circle2\"></div>\r\n                <div class=\"circle3\"></div>\r\n                <div class=\"circle4\"></div>\r\n                <div class=\"circle5\"></div>\r\n                <div class=\"circle6\"></div>\r\n                <div class=\"circle7\"></div>\r\n                <div class=\"circle8\"></div>\r\n                <div class=\"circle9\"></div>\r\n                <div class=\"circle10\"></div>\r\n                <div class=\"circle11\"></div>\r\n                <div class=\"circle12\"></div>\r\n                <div class=\"circle13\"></div>\r\n                <div class=\"circle14\"></div>\r\n                <div class=\"circle15\"></div>\r\n            </div>\r\n            >\r\n        </div>\r\n    }\r\n</ng-template>\r\n\r\n@if (spinnerStyle() === 'dark-layout') {\r\n    <ng-container [ngTemplateOutlet]=\"isDarkMode\"></ng-container>\r\n}\r\n"
        },
        {
            "name": "TechnologiesComponent",
            "id": "component-TechnologiesComponent-61a92bb8aa4eee5b5fde061f544d4474bc9c8d5ca9ac40f31775ed2a34e254c940de2df56a58a3a0b3d7062a66ffb853180e43283e242bb1b24723abe5adc406",
            "file": "src/app/layout/pages/technologies/technologies.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cv-technologies",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./technologies.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "backendTech$",
                    "defaultValue": "this._store$.pipe(\r\n        select(selectBackendTech),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ITechnologies[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "currentTechnologiesStack",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITechnologies[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "currentTheme$",
                    "defaultValue": "this._store$.pipe(\r\n        select(darkModeSelector),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITechnologies[] | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "frontendTech$",
                    "defaultValue": "this._store$.pipe(\r\n        select(selectFrontendTech),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ITechnologies[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "otherTech$",
                    "defaultValue": "this._store$.pipe(\r\n        select(selectOtherTech),\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ITechnologies[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "selectedTab",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "technologiesAside$",
                    "defaultValue": "this._store$.pipe(select(selectTechnologiesAside))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<TTechnologiesAside[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_technologiesDispatcher",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "switchTab",
                    "args": [
                        {
                            "name": "$event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "technologiesSwitcher",
                    "args": [
                        {
                            "name": "tab",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "AsideNavigationTechnologiesComponent",
                    "type": "component"
                },
                {
                    "name": "TechnologyCardComponent",
                    "type": "component"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "EvenColumnDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Observable, Subject, takeUntil } from 'rxjs';\r\n\r\nimport { AsyncPipe, NgClass } from '@angular/common';\r\nimport {\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    Inject,\r\n    OnDestroy,\r\n    OnInit,\r\n} from '@angular/core';\r\n\r\nimport { Store, select } from '@ngrx/store';\r\n\r\nimport { EvenColumnDirective } from '@core/directives/even-column.directive';\r\nimport { TTechnologiesAside } from '@core/models/technologies-aside.type';\r\nimport { ITechnologies } from '@core/models/technologies.interface';\r\nimport { TTechnologies } from '@core/models/tecnologies.type';\r\nimport { ApiService } from '@core/service/api/api.service';\r\n\r\nimport { AsideNavigationTechnologiesComponent } from '@layout/components/aside-navigation-technologies/aside-navigation-technologies.component';\r\nimport { darkModeSelector } from '@layout/store/dark-mode-store/dark-mode.selectors';\r\nimport { FirebaseActions } from '@layout/store/firebase-store/firebase.actions';\r\nimport {\r\n    selectBackendTech,\r\n    selectFrontendTech,\r\n    selectOtherTech,\r\n    selectTechnologiesAside,\r\n} from '@layout/store/firebase-store/firebase.selectors';\r\n\r\nimport { TechnologyCardComponent } from './components/technology-card/technology-card.component';\r\n\r\n@Component({\r\n    selector: 'cv-technologies',\r\n    standalone: true,\r\n    imports: [\r\n        AsideNavigationTechnologiesComponent,\r\n        TechnologyCardComponent,\r\n        AsyncPipe,\r\n        EvenColumnDirective,\r\n    ],\r\n    templateUrl: './technologies.component.html',\r\n    styleUrl: './technologies.component.scss',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TechnologiesComponent implements OnInit, OnDestroy {\r\n    public selectedTab: string = '';\r\n\r\n    public data: ITechnologies[] | undefined;\r\n\r\n    public technologiesAside$: Observable<TTechnologiesAside[]> =\r\n        this._store$.pipe(select(selectTechnologiesAside));\r\n\r\n    public currentTheme$: Observable<boolean> = this._store$.pipe(\r\n        select(darkModeSelector),\r\n    );\r\n\r\n    public currentTechnologiesStack: ITechnologies[] = [];\r\n\r\n    public backendTech$: Observable<ITechnologies[]> = this._store$.pipe(\r\n        select(selectBackendTech),\r\n    );\r\n\r\n    public otherTech$: Observable<ITechnologies[]> = this._store$.pipe(\r\n        select(selectOtherTech),\r\n    );\r\n\r\n    public frontendTech$: Observable<ITechnologies[]> = this._store$.pipe(\r\n        select(selectFrontendTech),\r\n    );\r\n\r\n    private _destroyed$: Subject<void> = new Subject();\r\n\r\n    public technologiesSwitcher(tab: string): void {\r\n        switch (tab) {\r\n            case 'other':\r\n                this.otherTech$\r\n                    .pipe(takeUntil(this._destroyed$))\r\n                    .subscribe((tech) => {\r\n                        if (tech) {\r\n                            this.currentTechnologiesStack = tech;\r\n                            this._cdr.markForCheck();\r\n                        }\r\n                    });\r\n                break;\r\n            case 'frontend':\r\n                this.frontendTech$\r\n                    .pipe(takeUntil(this._destroyed$))\r\n                    .subscribe((tech) => {\r\n                        if (tech) {\r\n                            this.currentTechnologiesStack = tech;\r\n                            this._cdr.markForCheck();\r\n                        }\r\n                    });\r\n                break;\r\n            case 'backend':\r\n                this.backendTech$\r\n                    .pipe(takeUntil(this._destroyed$))\r\n                    .subscribe((tech) => {\r\n                        if (tech) {\r\n                            this.currentTechnologiesStack = tech;\r\n                            this._cdr.markForCheck();\r\n                        }\r\n                    });\r\n                break;\r\n        }\r\n    }\r\n\r\n    public switchTab($event: string) {\r\n        this.selectedTab = $event;\r\n        this.technologiesSwitcher(this.selectedTab);\r\n    }\r\n\r\n    private _technologiesDispatcher() {\r\n        this._apiService.getBackendTech().subscribe((backendTech) => {\r\n            this._store$.dispatch(\r\n                FirebaseActions.getBackendTechSuccess({ backendTech }),\r\n            );\r\n        });\r\n\r\n        this._apiService.getFrontendTech().subscribe((frontendTech) => {\r\n            this._store$.dispatch(\r\n                FirebaseActions.getFrontendTechSuccess({ frontendTech }),\r\n            );\r\n        });\r\n\r\n        this._apiService.getOtherTech().subscribe((otherTech) => {\r\n            this._store$.dispatch(\r\n                FirebaseActions.getOtherTechSuccess({ otherTech }),\r\n            );\r\n        });\r\n\r\n        this._store$.dispatch(\r\n            FirebaseActions.getTechnologiesAside({\r\n                imgName: '/icons/white-mode',\r\n            }),\r\n        );\r\n    }\r\n\r\n    constructor(\r\n        private _cdr: ChangeDetectorRef,\r\n        private _apiService: ApiService,\r\n        @Inject(Store) private _store$: Store<TTechnologies>,\r\n    ) {}\r\n\r\n    ngOnInit(): void {\r\n        this._technologiesDispatcher();\r\n        this.technologiesSwitcher(this.selectedTab);\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._destroyed$.next();\r\n        this._destroyed$.complete();\r\n    }\r\n}\r\n",
            "styleUrl": "./technologies.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_store$",
                        "type": "Store<TTechnologies>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 138,
                "jsdoctags": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_store$",
                        "type": "Store<TTechnologies>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"technologies\">\r\n    <aside class=\"technologies_navigation\">\r\n        <cv-aside-navigation-technologies\r\n            [navigationList]=\"(technologiesAside$ | async) ?? []\"\r\n            [theme]=\"currentTheme$ | async\"\r\n            (emittedTab)=\"switchTab($event)\"\r\n        ></cv-aside-navigation-technologies>\r\n    </aside>\r\n    <section class=\"technologies_stack\">\r\n        @for (technology of currentTechnologiesStack; track technology.id; let i = $index) {\r\n            <div\r\n                class=\"technologies_stack-column\"\r\n                cvEvenColumn\r\n            >\r\n                <cv-technology-card\r\n                    [technologyItem]=\"technology\"\r\n                    [theme]=\"currentTheme$ | async\"\r\n                ></cv-technology-card>\r\n            </div>\r\n        }\r\n    </section>\r\n</div>\r\n"
        },
        {
            "name": "TechnologyCardComponent",
            "id": "component-TechnologyCardComponent-9eb81d31189a3a9f32c3c0e23daa081ed8b847b986c0f4a0a291626ae2852535a3c4af8da51a4c0252ae02d2d1614d47d1732b2e39a3873416ee46d191458345",
            "file": "src/app/layout/pages/technologies/components/technology-card/technology-card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cv-technology-card",
            "styleUrls": [
                "./technology-card.component.scss",
                "./technology-card-dm/technology-card-dm.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./technology-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "technologyItem",
                    "defaultValue": "input.required<ITechnologies | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "theme",
                    "defaultValue": "input<boolean | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgClass } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, input } from '@angular/core';\r\n\r\nimport { ITechnologies } from '@core/models/technologies.interface';\r\n\r\n@Component({\r\n    selector: 'cv-technology-card',\r\n    standalone: true,\r\n    imports: [NgClass],\r\n    templateUrl: './technology-card.component.html',\r\n    styleUrls: [\r\n        './technology-card.component.scss',\r\n        './technology-card-dm/technology-card-dm.component.scss',\r\n    ],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TechnologyCardComponent {\r\n    public technologyItem = input.required<ITechnologies | null>();\r\n    public theme = input<boolean | null>();\r\n\r\n    ngOnInit() {\r\n        console.log(this.technologyItem());\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../../../assets/styles/variables' as color;\r\n@use '../../../../../../assets/styles/mixins/glassmorphism.mixin' as glassmorphism;\r\n@use '../../../../../../assets/styles/mixins/flex.mixin' as flex;\r\n\r\n.technology-card {\r\n    @include flex.flex-a_center-d_column;\r\n    column-gap: 96px;\r\n    cursor: pointer;\r\n    width: fit-content;\r\n    max-width: 140px;\r\n\r\n    &_block {\r\n        @include glassmorphism.cards_glassmorphism;\r\n        @include flex.flex-a_center-j_center;\r\n        padding: 30px;\r\n        width: 140px;\r\n        height: 140px;\r\n    }\r\n\r\n    &_description {\r\n        margin-bottom: 60px;\r\n        padding: 30px 0;\r\n        font-size: 16px;\r\n        text-align: center;\r\n        text-transform: uppercase;\r\n    }\r\n}\r\n",
                    "styleUrl": "./technology-card.component.scss"
                },
                {
                    "data": "@use '../../../../../../../assets/styles/variables' as color;\r\n@use '../../../../../../../assets/styles/mixins/glassmorphism.mixin' as glassmorphism;\r\n\r\n.technology-card.dark-theme {\r\n    .technology-card_block {\r\n        @include glassmorphism.cards_glassmorphism-dm;\r\n    }\r\n\r\n    .technology-card_description {\r\n        color: color.$white;\r\n    }\r\n}\r\n",
                    "styleUrl": "./technology-card-dm/technology-card-dm.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<article\r\n    class=\"technology-card\"\r\n    [ngClass]=\"{ 'dark-theme': theme() }\"\r\n>\r\n    <div class=\"technology-card_block\">\r\n        <img\r\n            src=\"{{ technologyItem()?.iconPath }}\"\r\n            alt=\"{{ technologyItem()?.alt }}\"\r\n            class=\"technology-img\"\r\n        />\r\n    </div>\r\n    <label\r\n        class=\"technology-card_description\"\r\n        for=\"\"\r\n    >\r\n        {{ technologyItem()?.technologyName }}\r\n    </label>\r\n</article>\r\n"
        },
        {
            "name": "WorkExperienceComponent",
            "id": "component-WorkExperienceComponent-05776be190ef30d0683ae4327619abd1735c6ab39cdb453f813ee85975c09e2b5196bb79bc5e8dd4a4fe5b268510fc5b88fd83e321663688fcfe0379b4c27811",
            "file": "src/app/layout/pages/experience/work-experience/work-experience.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cv-work-experience",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./work-experience.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "$index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "experience",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "selectedTabWork",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        125
                    ],
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selectedTabWork",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        125
                    ],
                    "required": true
                },
                {
                    "name": "theme",
                    "defaultValue": "input<boolean | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "workExperience$",
                    "defaultValue": "input.required<IExperience[] | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ExperienceCardComponent",
                    "type": "component"
                },
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgClass } from '@angular/common';\r\nimport {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    Input,\r\n    input,\r\n} from '@angular/core';\r\n\r\nimport { IExperience } from '@core/models/experience.interface';\r\n\r\nimport { ExperienceDialogComponent } from '@layout/components/experience-dialog/experience-dialog.component';\r\nimport { ExperienceCardComponent } from '@layout/pages/experience/experience-card/experience-card.component';\r\n\r\n@Component({\r\n    selector: 'cv-work-experience',\r\n    standalone: true,\r\n    imports: [ExperienceCardComponent, NgClass],\r\n    templateUrl: './work-experience.component.html',\r\n    styleUrl: './work-experience.component.scss',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class WorkExperienceComponent {\r\n    @Input() experience: any;\r\n    @Input() $index!: number;\r\n    public selectedTabWork = input.required<string>();\r\n    public workExperience$ = input.required<IExperience[] | null>();\r\n    public theme = input<boolean | null>();\r\n}\r\n",
            "styleUrl": "./work-experience.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<section class=\"work-experience\">\r\n    @for (workPlace of workExperience$(); track workPlace.id; let i = $index) {\r\n        <cv-experience-card\r\n            [experience]=\"workPlace\"\r\n            [ngClass]=\"{ 'first-item': $index === 0, 'other-items': $index !== 0 }\"\r\n            [workDescription]=\"workPlace\"\r\n            [experienceType]=\"selectedTabWork()\"\r\n            [theme]=\"theme()\"\r\n        ></cv-experience-card>\r\n    }\r\n</section>\r\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n    providers: [\r\n        provideHttpClient(withInterceptorsFromDi(), withFetch()),\r\n        provideAnimations(),\r\n        provideRouter(MAIN_ROUTES, withViewTransitions()),\r\n        provideFirebaseApp(() => initializeApp(environment.firebase)),\r\n        provideFirestore(() => getFirestore()),\r\n        provideDatabase(() => getDatabase()),\r\n        provideStorage(() => getStorage()),\r\n        provideAuth(() => getAuth()),\r\n        provideStore(),\r\n        provideHttpClient(),\r\n        {\r\n            provide: TranslateLoader,\r\n            useFactory: HttpLoaderFactory,\r\n            deps: [HttpClient],\r\n        },\r\n        TranslateService,\r\n        importProvidersFrom([\r\n            AngularFireModule.initializeApp(environment.firebase),\r\n            AngularFireDatabaseModule,\r\n            BrowserModule,\r\n            BrowserAnimationsModule,\r\n            StoreModule.forRoot({\r\n                router: routerReducer,\r\n            }),\r\n            EffectsModule.forRoot({}),\r\n            EffectsModule.forRoot([\r\n                FirebaseEffects,\r\n                AuthEffects,\r\n                FirebaseEffects,\r\n                AuthEffects,\r\n                GithubRepositoriesEffects,\r\n                ImagesEffects,\r\n            ]),\r\n            StoreModule.forFeature('logo', logoReducer),\r\n            StoreModule.forFeature('spinner', spinnerReducer),\r\n            StoreModule.forFeature('firebase', firebaseReducer),\r\n            StoreModule.forFeature('darkMode', darkModeReducer),\r\n            StoreModule.forFeature('language', languageReducer),\r\n            StoreModule.forFeature('github', githubRepositoriesReducer),\r\n            StoreModule.forFeature('experience', experienceDialogReducer),\r\n            StoreModule.forFeature('auth', authReducer),\r\n            StoreRouterConnectingModule.forRoot(),\r\n        ]),\r\n        {\r\n            provide: HTTP_INTERCEPTORS,\r\n            useClass: LoadingInterceptor,\r\n            multi: true,\r\n        },\r\n        provideClientHydration(\r\n            withHttpTransferCacheOptions({ includePostRequests: true }),\r\n        ),\r\n        provideStore({\r\n            router: routerReducer,\r\n        }),\r\n        provideEffects(),\r\n        provideRouterStore(),\r\n        provideStoreDevtools({ maxAge: 25, logOnly: !isDevMode() }),\r\n        provideServiceWorker('ngsw-worker.js', {\r\n            enabled: !isDevMode(),\r\n            registrationStrategy: 'registerWhenStable:30000',\r\n        }),\r\n        provideServiceWorker('ngsw-worker.js', {\r\n            enabled: !isDevMode(),\r\n            registrationStrategy: 'registerWhenStable:30000',\r\n        }),\r\n    ],\r\n}"
            },
            {
                "name": "AuthActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/auth-store/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createActionGroup({\r\n    source: 'Auth',\r\n    events: {\r\n        getLogin: props<{ email: string; password: string }>(),\r\n        getLoginSuccess: props<{ user: TProfile }>(),\r\n        getLoginError: props<{ error: unknown }>(),\r\n\r\n        getLoginGuest: emptyProps(),\r\n        getLoginGuestSuccess: emptyProps(),\r\n        getLoginGuestError: props<{ error: unknown }>(),\r\n\r\n        getLogout: emptyProps(),\r\n        getLogoutSuccess: emptyProps(),\r\n        getLogoutError: props<{ error: unknown }>(),\r\n    },\r\n})"
            },
            {
                "name": "authReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/auth-store/auth.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n    initialState,\r\n\r\n    on(AuthActions.getLoginSuccess, (state, { user }) => ({\r\n        ...state,\r\n        user,\r\n    })),\r\n    on(AuthActions.getLoginError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n\r\n    on(AuthActions.getLogoutSuccess, (state) => ({\r\n        ...state,\r\n    })),\r\n    on(AuthActions.getLoginError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n)"
            },
            {
                "name": "blobFloat",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/utils/animations/bg-layout.animation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "trigger('blobFloat', [\r\n    transition('void => *', [\r\n        animate(\r\n            '5s ease-in-out',\r\n            style({\r\n                transform: 'translateY(0) scale(1)',\r\n                filter: 'blur(0px)',\r\n            }),\r\n        ),\r\n        animate(\r\n            '5s ease-in-out',\r\n            style({\r\n                transform: 'translateY(-100%) scale(1.5)',\r\n                filter: 'blur(10px)',\r\n            }),\r\n        ),\r\n        animate(\r\n            '5s ease-in-out',\r\n            style({\r\n                transform: 'translateY(0) scale(1)',\r\n                filter: 'blur(0px)',\r\n            }),\r\n        ),\r\n    ]),\r\n])"
            },
            {
                "name": "bootstrap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/main.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => bootstrapApplication(AppComponent, config)"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "mergeApplicationConfig(appConfig, serverConfig)"
            },
            {
                "name": "darkModeFeatureSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/dark-mode-store/dark-mode.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<TDarkMode>('darkMode')"
            },
            {
                "name": "darkModeReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/dark-mode-store/dark-mode.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n    initialDarkModeState,\r\n    on(setModeSuccess, (state, { isDark }) => ({\r\n        ...state,\r\n        isDark,\r\n    })),\r\n)"
            },
            {
                "name": "darkModeSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/dark-mode-store/dark-mode.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    darkModeFeatureSelector,\r\n    (state: TDarkMode) => state?.isDark ?? false,\r\n)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.development.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    production: false,\r\n    firebase: firebaseConfig,\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    production: true,\r\n    firebase: firebaseConfig,\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    production: false,\r\n    firebase: firebaseConfig,\r\n}"
            },
            {
                "name": "ExperienceActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/experience-dialog-store/experience-dialog.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createActionGroup({\r\n    source: 'ExperienceDialog',\r\n    events: {\r\n        getExperienceDialogOpen: props<{\r\n            data: IExperience | null;\r\n        }>(),\r\n        getExperienceDialogClosed: emptyProps(),\r\n    },\r\n})"
            },
            {
                "name": "experienceDialogReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/experience-dialog-store/experience-dialog.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n    initialState,\r\n    on(ExperienceActions.getExperienceDialogOpen, (state, { data }) => ({\r\n        ...state,\r\n        isOpen: true,\r\n        data,\r\n    })),\r\n    on(ExperienceActions.getExperienceDialogClosed, (state) => ({\r\n        ...state,\r\n        isOpen: false,\r\n        data: null,\r\n    })),\r\n)"
            },
            {
                "name": "fadeInOutCards",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/utils/animations/fade-in-out-cards.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "trigger('fadeInOutCards', [\r\n    state(\r\n        'void',\r\n        style({\r\n            opacity: 0,\r\n        }),\r\n    ),\r\n    transition('void <=> *', [animate(300)]),\r\n])"
            },
            {
                "name": "FirebaseActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/firebase-store/firebase.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createActionGroup({\r\n    source: 'Firebase API',\r\n    events: {\r\n        getNavigation: props<{ imgName: string }>(),\r\n        getNavigationSuccess: props<{\r\n            navigation: INavigation[];\r\n            images?: string[];\r\n        }>(),\r\n        getNavigationError: props<{ error: Error | null }>(),\r\n\r\n        getSocialMedia: props<{ imgName: string }>(),\r\n        getSocialMediaSuccess: props<{\r\n            socialMediaLinks: ISocialMedia[];\r\n            images?: string[];\r\n        }>(),\r\n        getSocialMediaError: props<{ error: Error | null }>(),\r\n\r\n        getWorkExperience: props<{ imgName: string }>(),\r\n        getWorkExperienceSuccess: props<{\r\n            workExperience: IExperience[];\r\n            images?: string[];\r\n        }>(),\r\n        getWorkExperienceError: props<{ error: Error | null }>(),\r\n\r\n        getFrontendTech: props<{ imgName: string }>(),\r\n        getFrontendTechSuccess: props<{\r\n            frontendTech: ITechnologies[];\r\n            images?: string[];\r\n        }>(),\r\n        getFrontendTechError: props<{ error: Error | null }>(),\r\n\r\n        getBackendTech: props<{ imgName: string }>(),\r\n        getBackendTechSuccess: props<{\r\n            backendTech: ITechnologies[];\r\n            images?: string[];\r\n        }>(),\r\n        getBackendTechError: props<{ error: Error | null }>(),\r\n\r\n        getOtherTech: props<{ imgName: string }>(),\r\n        getOtherTechSuccess: props<{\r\n            otherTech: ITechnologies[];\r\n            images?: string[];\r\n        }>(),\r\n        getOtherTechError: props<{ error: Error | null }>(),\r\n\r\n        getHardSkillsNav: props<{ imgName: string }>(),\r\n        getHardSkillsNavSuccess: props<{\r\n            hardSkillsNav: INavigation[];\r\n            images?: string[];\r\n        }>(),\r\n        getHardSkillsNavError: props<{ error: Error | null }>(),\r\n\r\n        getEducationPlaces: props<{ imgName: string }>(),\r\n        getEducationPlacesSuccess: props<{\r\n            education: IExperience[];\r\n            images?: string[];\r\n        }>(),\r\n        getEducationPlacesError: props<{ error: Error | null }>(),\r\n\r\n        getMainPageInfo: props<{ imgName: string }>(),\r\n        getMainPageInfoSuccess: props<{\r\n            mainPageInfo: IMainPageInfo;\r\n            images?: string[];\r\n        }>(),\r\n        getMainPageInfoError: props<{ error: Error | null }>(),\r\n\r\n        getExperienceAside: props<{ imgName: string }>(),\r\n        getExperienceAsideSuccess: props<{\r\n            experienceAside: TExperienceAside[];\r\n            images?: string[];\r\n        }>(),\r\n        getExperienceAsideError: props<{ error: Error | null }>(),\r\n\r\n        getTechnologiesAside: props<{ imgName: string }>(),\r\n        getTechnologiesAsideSuccess: props<{\r\n            technologiesAside: TTechnologiesAside[];\r\n            images?: string[];\r\n        }>(),\r\n        getTechnologiesAsideError: props<{ error: Error | null }>(),\r\n\r\n        getClose: props<{ imgName: string }>(),\r\n        getCloseSuccess: props<{\r\n            close: any;\r\n            images?: string[];\r\n        }>(),\r\n        getCloseError: props<{ error: Error | null }>(),\r\n    },\r\n})"
            },
            {
                "name": "firebaseConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/utils/firebase/firebase.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    apiKey: 'AIzaSyAgp-qSDSDi_eSVqE5hTTxc3WOe3-hC5gw',\r\n    authDomain: 'cv-cherkas-db.firebaseapp.com',\r\n    projectId: 'cv-cherkas-db',\r\n    storageBucket: 'cv-cherkas-db.appspot.com',\r\n    messagingSenderId: '704018082761',\r\n    appId: '1:704018082761:web:ed57c2a14eb2c7d2dfd618',\r\n    measurementId: 'G-J5RMJP90JF',\r\n}"
            },
            {
                "name": "firebaseReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/firebase-store/firebase.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n    initialFirebaseState,\r\n    on(FirebaseActions.getNavigationSuccess, (state, { navigation }) => ({\r\n        ...state,\r\n        navigation,\r\n    })),\r\n    on(FirebaseActions.getNavigationError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(\r\n        FirebaseActions.getSocialMediaSuccess,\r\n        (state, { socialMediaLinks }) => ({\r\n            ...state,\r\n            socialMediaLinks,\r\n        }),\r\n    ),\r\n    on(FirebaseActions.getSocialMediaError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(\r\n        FirebaseActions.getWorkExperienceSuccess,\r\n        (state, { workExperience }) => ({\r\n            ...state,\r\n            workExperience,\r\n        }),\r\n    ),\r\n    on(FirebaseActions.getWorkExperienceError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(FirebaseActions.getFrontendTechSuccess, (state, { frontendTech }) => ({\r\n        ...state,\r\n        frontendTech,\r\n    })),\r\n    on(FirebaseActions.getFrontendTechError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(FirebaseActions.getBackendTechSuccess, (state, { backendTech }) => ({\r\n        ...state,\r\n        backendTech,\r\n    })),\r\n    on(FirebaseActions.getBackendTechError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(FirebaseActions.getOtherTechSuccess, (state, { otherTech }) => ({\r\n        ...state,\r\n        otherTech,\r\n    })),\r\n    on(FirebaseActions.getOtherTechError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(FirebaseActions.getHardSkillsNavSuccess, (state, { hardSkillsNav }) => ({\r\n        ...state,\r\n        hardSkillsNav,\r\n    })),\r\n    on(FirebaseActions.getHardSkillsNavError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(FirebaseActions.getEducationPlacesSuccess, (state, { education }) => ({\r\n        ...state,\r\n        education,\r\n    })),\r\n    on(FirebaseActions.getEducationPlacesError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(FirebaseActions.getMainPageInfoSuccess, (state, { mainPageInfo }) => ({\r\n        ...state,\r\n        mainPageInfo,\r\n    })),\r\n    on(FirebaseActions.getMainPageInfoError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(\r\n        FirebaseActions.getTechnologiesAsideSuccess,\r\n        (state, { technologiesAside }) => ({\r\n            ...state,\r\n            technologiesAside,\r\n        }),\r\n    ),\r\n    on(FirebaseActions.getTechnologiesAsideError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(\r\n        FirebaseActions.getExperienceAsideSuccess,\r\n        (state, { experienceAside }) => ({\r\n            ...state,\r\n            experienceAside,\r\n        }),\r\n    ),\r\n    on(FirebaseActions.getExperienceAsideError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n)"
            },
            {
                "name": "GithubRepositoriesActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/github-projects-store/github-projects.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createActionGroup({\r\n    source: 'Repositories',\r\n    events: {\r\n        getRepositories: emptyProps(),\r\n        getRepositoriesSuccess: props<{ repositories: TGitHub[] }>(),\r\n        getRepositoriesError: props<{ error: unknown }>(),\r\n    },\r\n})"
            },
            {
                "name": "githubRepositoriesReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/github-projects-store/github-projects.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n    githubState,\r\n    on(\r\n        GithubRepositoriesActions.getRepositoriesSuccess,\r\n        (state, { repositories }) => [...repositories],\r\n    ),\r\n    on(GithubRepositoriesActions.getRepositoriesError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n)"
            },
            {
                "name": "githubState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/github-projects-store/github-projects.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TGitHub[]",
                "defaultValue": "[]"
            },
            {
                "name": "globalSetReducersKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'globalSetReducers'"
            },
            {
                "name": "hideSpinner",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/spinner-store/spinner.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[SPINNER] Hide spinner')"
            },
            {
                "name": "ImagesActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/images-store/images.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createActionGroup({\r\n    source: 'IMAGES',\r\n    events: {\r\n        'Get Logo': props<{ mode: boolean }>(),\r\n        'Get Logo Success': props<{ imageUrl: string }>(),\r\n        'Get Logo Failure': props<{ error: any }>(),\r\n\r\n        'Get Profile Img': props<{ mode: boolean }>(),\r\n        'Get Profile Img Success': props<{ imageUrl: string }>(),\r\n        'Get Profile Img Failure': props<{ error: any }>(),\r\n\r\n        'Get Close Img': props<{ mode: boolean }>(),\r\n        'Get Close Img Success': props<{ imageUrl: string }>(),\r\n        'Get Close Img Failure': props<{ error: any }>(),\r\n\r\n        'Load Themeless Pictures Images': props<any>(),\r\n        'Load Themeless Pictures Images Success': props<{\r\n            darkModeImages: string[];\r\n            whiteModeImages: string[];\r\n        }>(),\r\n        'Load Themeless Pictures Images Failure': props<{ error: any }>(),\r\n\r\n        'Set Dark Mode Images': props<{ images: string[] }>(),\r\n        'Set Dark Mode Images Success': props<{ images: string[] }>(),\r\n        'Set Dark Mode Images Failure': props<{ error: any }>(),\r\n\r\n        'Set White Mode Images': props<{ images: string[] }>(),\r\n        'Set White Mode Images Success': props<{ images: string[] }>(),\r\n        'Set White Mode Images Failure': props<{ error: any }>(),\r\n    },\r\n})"
            },
            {
                "name": "initialDarkModeState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/dark-mode-store/dark-mode.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DarkModeState",
                "defaultValue": "{\r\n    isDark: false,\r\n}"
            },
            {
                "name": "initialFirebaseState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/firebase-store/firebase.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FirebaseState",
                "defaultValue": "{\r\n    navigation: [],\r\n    socialMediaLinks: [],\r\n    workExperience: [],\r\n    frontendTech: [],\r\n    backendTech: [],\r\n    otherTech: [],\r\n    hardSkillsNav: [],\r\n    education: [],\r\n    mainPageInfo: null,\r\n    experienceAside: [],\r\n    technologiesAside: [],\r\n    error: null,\r\n}"
            },
            {
                "name": "initializeFirebaseApp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/utils/firebase/firebase.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "initializeApp(firebaseConfig)"
            },
            {
                "name": "initialLanguageState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/language-selector-store/language.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "LanguageState",
                "defaultValue": "{\r\n    language: 'ru',\r\n}"
            },
            {
                "name": "initialSpinnerModeState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/spinner-store/spinner.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ISpinner",
                "defaultValue": "{\r\n    isSpinnerOn: false,\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/auth-store/auth.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TAuthState",
                "defaultValue": "{\r\n    user: null,\r\n    isFetching: false,\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/experience-dialog-store/experience-dialog.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ModalState",
                "defaultValue": "{\r\n    isOpen: false,\r\n    data: null,\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/images-store/images.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "LogoState",
                "defaultValue": "{\r\n    imageUrl: '',\r\n    profileImageUrl: '',\r\n    closeImageUrl: '',\r\n    darkModeImages: [],\r\n    whiteModeImages: [],\r\n    error: null,\r\n}"
            },
            {
                "name": "languageFeatureSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/language-selector-store/language.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<LanguageState>('language')"
            },
            {
                "name": "languageReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/language-selector-store/language.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n    initialLanguageState,\r\n    on(setLanguageSuccess, (state, { language }) => ({\r\n        ...state,\r\n        language,\r\n    })),\r\n)"
            },
            {
                "name": "languageSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/language-selector-store/language.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    languageFeatureSelector,\r\n    (state: LanguageState) => state.language ?? 'ru',\r\n)"
            },
            {
                "name": "listAnimation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/utils/animations/translate-fade-out.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "trigger('listAnimation', [\r\n    transition('* => *', [\r\n        query(\r\n            ':leave',\r\n            stagger('300ms', [\r\n                animate(\r\n                    '1s ease-out',\r\n                    keyframes([\r\n                        style({\r\n                            opacity: 1,\r\n                            transform: 'translateY(0)',\r\n                            offset: 0,\r\n                        }),\r\n                        style({\r\n                            opacity: 0.5,\r\n                            transform: 'translateY(35px)',\r\n                            offset: 0.3,\r\n                        }),\r\n                        style({\r\n                            opacity: 0,\r\n                            transform: 'translateY(-75%)',\r\n                            offset: 1.0,\r\n                        }),\r\n                    ]),\r\n                ),\r\n            ]),\r\n            { optional: true },\r\n        ),\r\n        query(\r\n            ':enter',\r\n            stagger('300ms', [\r\n                animate(\r\n                    '1s ease-in',\r\n                    keyframes([\r\n                        style({\r\n                            opacity: 0,\r\n                            transform: 'translateY(-75%)',\r\n                            offset: 0,\r\n                        }),\r\n                        style({\r\n                            opacity: 0.5,\r\n                            transform: 'translateY(35px)',\r\n                            offset: 0.3,\r\n                        }),\r\n                        style({\r\n                            opacity: 1,\r\n                            transform: 'translateY(0)',\r\n                            offset: 1.0,\r\n                        }),\r\n                    ]),\r\n                ),\r\n            ]),\r\n            { optional: true },\r\n        ),\r\n    ]),\r\n])"
            },
            {
                "name": "logoReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/images-store/images.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n    initialState,\r\n    on(ImagesActions.getLogoSuccess, (state, { imageUrl }) => ({\r\n        ...state,\r\n        imageUrl,\r\n        error: null,\r\n    })),\r\n    on(ImagesActions.getLogoFailure, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(ImagesActions.getProfileImgSuccess, (state, { imageUrl }) => ({\r\n        ...state,\r\n        profileImageUrl: imageUrl,\r\n        error: null,\r\n    })),\r\n    on(ImagesActions.getProfileImgFailure, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(ImagesActions.getCloseImgSuccess, (state, { imageUrl }) => ({\r\n        ...state,\r\n        closeImageUrl: imageUrl,\r\n        error: null,\r\n    })),\r\n    on(ImagesActions.getCloseImgFailure, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(\r\n        ImagesActions.loadThemelessPicturesImagesSuccess,\r\n        (state, { darkModeImages, whiteModeImages }) => ({\r\n            ...state,\r\n            darkModeImages,\r\n            whiteModeImages,\r\n            error: null,\r\n        }),\r\n    ),\r\n    on(\r\n        ImagesActions.loadThemelessPicturesImagesFailure,\r\n        (state, { error }) => ({\r\n            ...state,\r\n            error,\r\n        }),\r\n    ),\r\n    on(ImagesActions.setDarkModeImages, (state, { images }) => ({\r\n        ...state,\r\n        darkModeImages: images,\r\n    })),\r\n    on(ImagesActions.setWhiteModeImages, (state, { images }) => ({\r\n        ...state,\r\n        whiteModeImages: images,\r\n    })),\r\n)"
            },
            {
                "name": "REQUEST",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/express.tokens.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<Request>('REQUEST')"
            },
            {
                "name": "RESPONSE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/express.tokens.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<Response>('RESPONSE')"
            },
            {
                "name": "routeAnimations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/utils/animations/router-animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "trigger('routeAnimations', [\r\n    transition('* <=> *', [\r\n        style({ position: 'relative' }),\r\n        query(\r\n            ':enter, :leave',\r\n            [\r\n                style({\r\n                    position: 'absolute',\r\n                    top: 0,\r\n                    left: 0,\r\n                    width: '100%',\r\n                }),\r\n            ],\r\n            { optional: true },\r\n        ),\r\n        query(':enter', [style({ opacity: 0 })], { optional: true }),\r\n        query(':leave', [style({ opacity: 1 })], { optional: true }),\r\n        group([\r\n            query(\r\n                ':leave',\r\n                [animate('600ms ease-out', style({ opacity: 0 }))],\r\n                { optional: true },\r\n            ),\r\n            query(':enter', [animate('600ms ease-in', style({ opacity: 1 }))], {\r\n                optional: true,\r\n            }),\r\n        ]),\r\n    ]),\r\n])"
            },
            {
                "name": "selectAuth",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/auth-store/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectAuthState,\r\n    (state: TAuthState) => state.user,\r\n)"
            },
            {
                "name": "selectAuthState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/auth-store/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<TAuthState>('auth')"
            },
            {
                "name": "selectBackendTech",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectFirebaseState,\r\n    (state: FirebaseState) => state.backendTech,\r\n)"
            },
            {
                "name": "selectCloseImageUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/images-store/images.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectLogoState,\r\n    (state: LogoState) => state.closeImageUrl,\r\n)"
            },
            {
                "name": "selectDarkModeImages",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/images-store/images.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectLogoState,\r\n    (state: LogoState) => state.darkModeImages,\r\n)"
            },
            {
                "name": "selectEducation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectFirebaseState,\r\n    (state: FirebaseState) => state.education,\r\n)"
            },
            {
                "name": "selectError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectFirebaseState,\r\n    (state: FirebaseState) => state.error,\r\n)"
            },
            {
                "name": "selectExperienceAside",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectFirebaseState,\r\n    (state: FirebaseState) => state.experienceAside,\r\n)"
            },
            {
                "name": "selectFirebaseState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<FirebaseState>('firebase')"
            },
            {
                "name": "selectFrontendTech",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectFirebaseState,\r\n    (state: FirebaseState) => state.frontendTech,\r\n)"
            },
            {
                "name": "selectGithubRepositories",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/github-projects-store/github-projects.selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectRepositoriesState,\r\n    (state: TGitHub[]) => state,\r\n)"
            },
            {
                "name": "selectHardSkillsNav",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectFirebaseState,\r\n    (state: FirebaseState) => state.hardSkillsNav,\r\n)"
            },
            {
                "name": "selectImageUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/images-store/images.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectLogoState,\r\n    (state: LogoState) => state.imageUrl,\r\n)"
            },
            {
                "name": "selectIsModalOpen",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/experience-dialog-store/experience-dialog.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectModalState,\r\n    (state: ModalState) => state.isOpen,\r\n)"
            },
            {
                "name": "selectLogoError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/images-store/images.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectLogoState,\r\n    (state: LogoState) => state.error,\r\n)"
            },
            {
                "name": "selectLogoState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/images-store/images.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<LogoState>('logo')"
            },
            {
                "name": "selectMainPageInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectFirebaseState,\r\n    (state: FirebaseState) => state.mainPageInfo,\r\n)"
            },
            {
                "name": "selectModalData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/experience-dialog-store/experience-dialog.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectModalState,\r\n    (state: ModalState) => state.data,\r\n)"
            },
            {
                "name": "selectModalState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/experience-dialog-store/experience-dialog.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<ModalState>('experience')"
            },
            {
                "name": "selectNavigation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectFirebaseState,\r\n    (state: FirebaseState) => state.navigation,\r\n)"
            },
            {
                "name": "selectOtherTech",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectFirebaseState,\r\n    (state: FirebaseState) => state.otherTech,\r\n)"
            },
            {
                "name": "selectProfileImageUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/images-store/images.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectLogoState,\r\n    (state: LogoState) => state.profileImageUrl,\r\n)"
            },
            {
                "name": "selectRepositoriesState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/github-projects-store/github-projects.selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<TGitHub[]>('github')"
            },
            {
                "name": "selectSocialMediaLinks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectFirebaseState,\r\n    (state: FirebaseState) => state.socialMediaLinks,\r\n)"
            },
            {
                "name": "selectTechnologiesAside",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectFirebaseState,\r\n    (state: FirebaseState) => state.technologiesAside,\r\n)"
            },
            {
                "name": "selectWhiteModeImages",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/images-store/images.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectLogoState,\r\n    (state: LogoState) => state.whiteModeImages,\r\n)"
            },
            {
                "name": "selectWorkExperience",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectFirebaseState,\r\n    (state: FirebaseState) => state.workExperience,\r\n)"
            },
            {
                "name": "serverConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n    providers: [provideServerRendering(), provideHttpClient(withFetch())],\r\n}"
            },
            {
                "name": "setLanguage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/language-selector-store/language.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[LANGUAGE_SELECTOR] Set mode')"
            },
            {
                "name": "setLanguageSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/language-selector-store/language.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[LANGUAGE_SELECTOR] Set mode success',\r\n    (language: 'ru' | 'en') => ({ language }),\r\n)"
            },
            {
                "name": "setMode",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/dark-mode-store/dark-mode.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[DARK_MODE_SELECTOR] Set mode')"
            },
            {
                "name": "setModeSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/dark-mode-store/dark-mode.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[DARK_MODE_SELECTOR] Set mode success',\r\n    (isDark: boolean) => ({ isDark }),\r\n)"
            },
            {
                "name": "showSpinner",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/spinner-store/spinner.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[SPINNER] Show spinner')"
            },
            {
                "name": "spinnerFeatureSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/spinner-store/spinner.selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<ISpinner>('spinner')"
            },
            {
                "name": "spinnerReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/spinner-store/spinner.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n    initialSpinnerModeState,\r\n    on(showSpinner, (state) => ({\r\n        ...state,\r\n        isSpinnerOn: true,\r\n    })),\r\n    on(hideSpinner, (state) => ({\r\n        ...state,\r\n        isSpinnerOn: false,\r\n    })),\r\n)"
            },
            {
                "name": "spinnerSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/store/spinner-store/spinner.selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    spinnerFeatureSelector,\r\n    (state: ISpinner) => state.isSpinnerOn,\r\n)"
            },
            {
                "name": "startCardFadeIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/utils/animations/start-cart-fade-in.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "trigger('startCardFadeIn', [\r\n    state('void', style({ opacity: 0 })),\r\n    transition(':leave', [animate('1.5s', style({ opacity: 1 }))]),\r\n])"
            },
            {
                "name": "startCardFadeOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/utils/animations/start-cart-fade-out.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "trigger('startCardFadeOut', [\r\n    state('void', style({ opacity: 1 })),\r\n    transition(':leave', [animate('1.5s', style({ opacity: 0 }))]),\r\n])"
            }
        ],
        "functions": [
            {
                "name": "app",
                "file": "server.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "express.Express"
            },
            {
                "name": "globalSetReducers",
                "file": "src/app/layout/store/index.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "GlobalState",
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "HttpLoaderFactory",
                "file": "src/app/app.config.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "run",
                "file": "server.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "void"
            }
        ],
        "typealiases": [
            {
                "name": "TAuthState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/layout/store/model/auth-state.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "TAuthUser",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/layout/store/model/auth-user.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "TDarkMode",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/layout/store/model/dark-mode.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "TExperienceAside",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/models/experience-aside.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "TGitHub",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/models/github.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "TLanguages",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/layout/store/model/languages.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "TLocalstorageUser",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/layout/store/model/localstorage-user.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "TProfile",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/layout/store/model/profile.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "TTechnologies",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/models/tecnologies.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "TTechnologiesAside",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/models/technologies-aside.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            }
        ],
        "enumerations": [
            {
                "name": "ERoute",
                "childs": [
                    {
                        "name": "AUTH",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "auth"
                    },
                    {
                        "name": "LAYOUT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "layout"
                    },
                    {
                        "name": "MAIN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "main"
                    },
                    {
                        "name": "PROJECTS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "projects"
                    },
                    {
                        "name": "EXPERIENCE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "experience"
                    },
                    {
                        "name": "TECHNOLOGIES",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "technologies"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/enum/route.enum.ts"
            },
            {
                "name": "ModalDialogResult",
                "childs": [
                    {
                        "name": "Opened",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Confirmed",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Closed",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/enum/modal-dialog.base.enum.ts"
            }
        ],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n    providers: [\r\n        provideHttpClient(withInterceptorsFromDi(), withFetch()),\r\n        provideAnimations(),\r\n        provideRouter(MAIN_ROUTES, withViewTransitions()),\r\n        provideFirebaseApp(() => initializeApp(environment.firebase)),\r\n        provideFirestore(() => getFirestore()),\r\n        provideDatabase(() => getDatabase()),\r\n        provideStorage(() => getStorage()),\r\n        provideAuth(() => getAuth()),\r\n        provideStore(),\r\n        provideHttpClient(),\r\n        {\r\n            provide: TranslateLoader,\r\n            useFactory: HttpLoaderFactory,\r\n            deps: [HttpClient],\r\n        },\r\n        TranslateService,\r\n        importProvidersFrom([\r\n            AngularFireModule.initializeApp(environment.firebase),\r\n            AngularFireDatabaseModule,\r\n            BrowserModule,\r\n            BrowserAnimationsModule,\r\n            StoreModule.forRoot({\r\n                router: routerReducer,\r\n            }),\r\n            EffectsModule.forRoot({}),\r\n            EffectsModule.forRoot([\r\n                FirebaseEffects,\r\n                AuthEffects,\r\n                FirebaseEffects,\r\n                AuthEffects,\r\n                GithubRepositoriesEffects,\r\n                ImagesEffects,\r\n            ]),\r\n            StoreModule.forFeature('logo', logoReducer),\r\n            StoreModule.forFeature('spinner', spinnerReducer),\r\n            StoreModule.forFeature('firebase', firebaseReducer),\r\n            StoreModule.forFeature('darkMode', darkModeReducer),\r\n            StoreModule.forFeature('language', languageReducer),\r\n            StoreModule.forFeature('github', githubRepositoriesReducer),\r\n            StoreModule.forFeature('experience', experienceDialogReducer),\r\n            StoreModule.forFeature('auth', authReducer),\r\n            StoreRouterConnectingModule.forRoot(),\r\n        ]),\r\n        {\r\n            provide: HTTP_INTERCEPTORS,\r\n            useClass: LoadingInterceptor,\r\n            multi: true,\r\n        },\r\n        provideClientHydration(\r\n            withHttpTransferCacheOptions({ includePostRequests: true }),\r\n        ),\r\n        provideStore({\r\n            router: routerReducer,\r\n        }),\r\n        provideEffects(),\r\n        provideRouterStore(),\r\n        provideStoreDevtools({ maxAge: 25, logOnly: !isDevMode() }),\r\n        provideServiceWorker('ngsw-worker.js', {\r\n            enabled: !isDevMode(),\r\n            registrationStrategy: 'registerWhenStable:30000',\r\n        }),\r\n        provideServiceWorker('ngsw-worker.js', {\r\n            enabled: !isDevMode(),\r\n            registrationStrategy: 'registerWhenStable:30000',\r\n        }),\r\n    ],\r\n}"
                }
            ],
            "src/app/layout/store/auth-store/auth.actions.ts": [
                {
                    "name": "AuthActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/auth-store/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createActionGroup({\r\n    source: 'Auth',\r\n    events: {\r\n        getLogin: props<{ email: string; password: string }>(),\r\n        getLoginSuccess: props<{ user: TProfile }>(),\r\n        getLoginError: props<{ error: unknown }>(),\r\n\r\n        getLoginGuest: emptyProps(),\r\n        getLoginGuestSuccess: emptyProps(),\r\n        getLoginGuestError: props<{ error: unknown }>(),\r\n\r\n        getLogout: emptyProps(),\r\n        getLogoutSuccess: emptyProps(),\r\n        getLogoutError: props<{ error: unknown }>(),\r\n    },\r\n})"
                }
            ],
            "src/app/layout/store/auth-store/auth.reducers.ts": [
                {
                    "name": "authReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/auth-store/auth.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n    initialState,\r\n\r\n    on(AuthActions.getLoginSuccess, (state, { user }) => ({\r\n        ...state,\r\n        user,\r\n    })),\r\n    on(AuthActions.getLoginError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n\r\n    on(AuthActions.getLogoutSuccess, (state) => ({\r\n        ...state,\r\n    })),\r\n    on(AuthActions.getLoginError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/auth-store/auth.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TAuthState",
                    "defaultValue": "{\r\n    user: null,\r\n    isFetching: false,\r\n}"
                }
            ],
            "src/app/core/utils/animations/bg-layout.animation.ts": [
                {
                    "name": "blobFloat",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/utils/animations/bg-layout.animation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "trigger('blobFloat', [\r\n    transition('void => *', [\r\n        animate(\r\n            '5s ease-in-out',\r\n            style({\r\n                transform: 'translateY(0) scale(1)',\r\n                filter: 'blur(0px)',\r\n            }),\r\n        ),\r\n        animate(\r\n            '5s ease-in-out',\r\n            style({\r\n                transform: 'translateY(-100%) scale(1.5)',\r\n                filter: 'blur(10px)',\r\n            }),\r\n        ),\r\n        animate(\r\n            '5s ease-in-out',\r\n            style({\r\n                transform: 'translateY(0) scale(1)',\r\n                filter: 'blur(0px)',\r\n            }),\r\n        ),\r\n    ]),\r\n])"
                }
            ],
            "src/main.server.ts": [
                {
                    "name": "bootstrap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/main.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => bootstrapApplication(AppComponent, config)"
                }
            ],
            "src/app/app.config.server.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "mergeApplicationConfig(appConfig, serverConfig)"
                },
                {
                    "name": "serverConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n    providers: [provideServerRendering(), provideHttpClient(withFetch())],\r\n}"
                }
            ],
            "src/app/layout/store/dark-mode-store/dark-mode.selectors.ts": [
                {
                    "name": "darkModeFeatureSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/dark-mode-store/dark-mode.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<TDarkMode>('darkMode')"
                },
                {
                    "name": "darkModeSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/dark-mode-store/dark-mode.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    darkModeFeatureSelector,\r\n    (state: TDarkMode) => state?.isDark ?? false,\r\n)"
                }
            ],
            "src/app/layout/store/dark-mode-store/dark-mode.reducers.ts": [
                {
                    "name": "darkModeReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/dark-mode-store/dark-mode.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n    initialDarkModeState,\r\n    on(setModeSuccess, (state, { isDark }) => ({\r\n        ...state,\r\n        isDark,\r\n    })),\r\n)"
                },
                {
                    "name": "initialDarkModeState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/dark-mode-store/dark-mode.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DarkModeState",
                    "defaultValue": "{\r\n    isDark: false,\r\n}"
                }
            ],
            "src/environments/environment.development.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.development.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    production: false,\r\n    firebase: firebaseConfig,\r\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    production: true,\r\n    firebase: firebaseConfig,\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    production: false,\r\n    firebase: firebaseConfig,\r\n}"
                }
            ],
            "src/app/layout/store/experience-dialog-store/experience-dialog.actions.ts": [
                {
                    "name": "ExperienceActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/experience-dialog-store/experience-dialog.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createActionGroup({\r\n    source: 'ExperienceDialog',\r\n    events: {\r\n        getExperienceDialogOpen: props<{\r\n            data: IExperience | null;\r\n        }>(),\r\n        getExperienceDialogClosed: emptyProps(),\r\n    },\r\n})"
                }
            ],
            "src/app/layout/store/experience-dialog-store/experience-dialog.reducers.ts": [
                {
                    "name": "experienceDialogReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/experience-dialog-store/experience-dialog.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n    initialState,\r\n    on(ExperienceActions.getExperienceDialogOpen, (state, { data }) => ({\r\n        ...state,\r\n        isOpen: true,\r\n        data,\r\n    })),\r\n    on(ExperienceActions.getExperienceDialogClosed, (state) => ({\r\n        ...state,\r\n        isOpen: false,\r\n        data: null,\r\n    })),\r\n)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/experience-dialog-store/experience-dialog.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModalState",
                    "defaultValue": "{\r\n    isOpen: false,\r\n    data: null,\r\n}"
                }
            ],
            "src/app/core/utils/animations/fade-in-out-cards.ts": [
                {
                    "name": "fadeInOutCards",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/utils/animations/fade-in-out-cards.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "trigger('fadeInOutCards', [\r\n    state(\r\n        'void',\r\n        style({\r\n            opacity: 0,\r\n        }),\r\n    ),\r\n    transition('void <=> *', [animate(300)]),\r\n])"
                }
            ],
            "src/app/layout/store/firebase-store/firebase.actions.ts": [
                {
                    "name": "FirebaseActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/firebase-store/firebase.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createActionGroup({\r\n    source: 'Firebase API',\r\n    events: {\r\n        getNavigation: props<{ imgName: string }>(),\r\n        getNavigationSuccess: props<{\r\n            navigation: INavigation[];\r\n            images?: string[];\r\n        }>(),\r\n        getNavigationError: props<{ error: Error | null }>(),\r\n\r\n        getSocialMedia: props<{ imgName: string }>(),\r\n        getSocialMediaSuccess: props<{\r\n            socialMediaLinks: ISocialMedia[];\r\n            images?: string[];\r\n        }>(),\r\n        getSocialMediaError: props<{ error: Error | null }>(),\r\n\r\n        getWorkExperience: props<{ imgName: string }>(),\r\n        getWorkExperienceSuccess: props<{\r\n            workExperience: IExperience[];\r\n            images?: string[];\r\n        }>(),\r\n        getWorkExperienceError: props<{ error: Error | null }>(),\r\n\r\n        getFrontendTech: props<{ imgName: string }>(),\r\n        getFrontendTechSuccess: props<{\r\n            frontendTech: ITechnologies[];\r\n            images?: string[];\r\n        }>(),\r\n        getFrontendTechError: props<{ error: Error | null }>(),\r\n\r\n        getBackendTech: props<{ imgName: string }>(),\r\n        getBackendTechSuccess: props<{\r\n            backendTech: ITechnologies[];\r\n            images?: string[];\r\n        }>(),\r\n        getBackendTechError: props<{ error: Error | null }>(),\r\n\r\n        getOtherTech: props<{ imgName: string }>(),\r\n        getOtherTechSuccess: props<{\r\n            otherTech: ITechnologies[];\r\n            images?: string[];\r\n        }>(),\r\n        getOtherTechError: props<{ error: Error | null }>(),\r\n\r\n        getHardSkillsNav: props<{ imgName: string }>(),\r\n        getHardSkillsNavSuccess: props<{\r\n            hardSkillsNav: INavigation[];\r\n            images?: string[];\r\n        }>(),\r\n        getHardSkillsNavError: props<{ error: Error | null }>(),\r\n\r\n        getEducationPlaces: props<{ imgName: string }>(),\r\n        getEducationPlacesSuccess: props<{\r\n            education: IExperience[];\r\n            images?: string[];\r\n        }>(),\r\n        getEducationPlacesError: props<{ error: Error | null }>(),\r\n\r\n        getMainPageInfo: props<{ imgName: string }>(),\r\n        getMainPageInfoSuccess: props<{\r\n            mainPageInfo: IMainPageInfo;\r\n            images?: string[];\r\n        }>(),\r\n        getMainPageInfoError: props<{ error: Error | null }>(),\r\n\r\n        getExperienceAside: props<{ imgName: string }>(),\r\n        getExperienceAsideSuccess: props<{\r\n            experienceAside: TExperienceAside[];\r\n            images?: string[];\r\n        }>(),\r\n        getExperienceAsideError: props<{ error: Error | null }>(),\r\n\r\n        getTechnologiesAside: props<{ imgName: string }>(),\r\n        getTechnologiesAsideSuccess: props<{\r\n            technologiesAside: TTechnologiesAside[];\r\n            images?: string[];\r\n        }>(),\r\n        getTechnologiesAsideError: props<{ error: Error | null }>(),\r\n\r\n        getClose: props<{ imgName: string }>(),\r\n        getCloseSuccess: props<{\r\n            close: any;\r\n            images?: string[];\r\n        }>(),\r\n        getCloseError: props<{ error: Error | null }>(),\r\n    },\r\n})"
                }
            ],
            "src/app/core/utils/firebase/firebase.config.ts": [
                {
                    "name": "firebaseConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/utils/firebase/firebase.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    apiKey: 'AIzaSyAgp-qSDSDi_eSVqE5hTTxc3WOe3-hC5gw',\r\n    authDomain: 'cv-cherkas-db.firebaseapp.com',\r\n    projectId: 'cv-cherkas-db',\r\n    storageBucket: 'cv-cherkas-db.appspot.com',\r\n    messagingSenderId: '704018082761',\r\n    appId: '1:704018082761:web:ed57c2a14eb2c7d2dfd618',\r\n    measurementId: 'G-J5RMJP90JF',\r\n}"
                },
                {
                    "name": "initializeFirebaseApp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/utils/firebase/firebase.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "initializeApp(firebaseConfig)"
                }
            ],
            "src/app/layout/store/firebase-store/firebase.reducers.ts": [
                {
                    "name": "firebaseReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/firebase-store/firebase.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n    initialFirebaseState,\r\n    on(FirebaseActions.getNavigationSuccess, (state, { navigation }) => ({\r\n        ...state,\r\n        navigation,\r\n    })),\r\n    on(FirebaseActions.getNavigationError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(\r\n        FirebaseActions.getSocialMediaSuccess,\r\n        (state, { socialMediaLinks }) => ({\r\n            ...state,\r\n            socialMediaLinks,\r\n        }),\r\n    ),\r\n    on(FirebaseActions.getSocialMediaError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(\r\n        FirebaseActions.getWorkExperienceSuccess,\r\n        (state, { workExperience }) => ({\r\n            ...state,\r\n            workExperience,\r\n        }),\r\n    ),\r\n    on(FirebaseActions.getWorkExperienceError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(FirebaseActions.getFrontendTechSuccess, (state, { frontendTech }) => ({\r\n        ...state,\r\n        frontendTech,\r\n    })),\r\n    on(FirebaseActions.getFrontendTechError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(FirebaseActions.getBackendTechSuccess, (state, { backendTech }) => ({\r\n        ...state,\r\n        backendTech,\r\n    })),\r\n    on(FirebaseActions.getBackendTechError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(FirebaseActions.getOtherTechSuccess, (state, { otherTech }) => ({\r\n        ...state,\r\n        otherTech,\r\n    })),\r\n    on(FirebaseActions.getOtherTechError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(FirebaseActions.getHardSkillsNavSuccess, (state, { hardSkillsNav }) => ({\r\n        ...state,\r\n        hardSkillsNav,\r\n    })),\r\n    on(FirebaseActions.getHardSkillsNavError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(FirebaseActions.getEducationPlacesSuccess, (state, { education }) => ({\r\n        ...state,\r\n        education,\r\n    })),\r\n    on(FirebaseActions.getEducationPlacesError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(FirebaseActions.getMainPageInfoSuccess, (state, { mainPageInfo }) => ({\r\n        ...state,\r\n        mainPageInfo,\r\n    })),\r\n    on(FirebaseActions.getMainPageInfoError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(\r\n        FirebaseActions.getTechnologiesAsideSuccess,\r\n        (state, { technologiesAside }) => ({\r\n            ...state,\r\n            technologiesAside,\r\n        }),\r\n    ),\r\n    on(FirebaseActions.getTechnologiesAsideError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(\r\n        FirebaseActions.getExperienceAsideSuccess,\r\n        (state, { experienceAside }) => ({\r\n            ...state,\r\n            experienceAside,\r\n        }),\r\n    ),\r\n    on(FirebaseActions.getExperienceAsideError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n)"
                },
                {
                    "name": "initialFirebaseState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/firebase-store/firebase.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FirebaseState",
                    "defaultValue": "{\r\n    navigation: [],\r\n    socialMediaLinks: [],\r\n    workExperience: [],\r\n    frontendTech: [],\r\n    backendTech: [],\r\n    otherTech: [],\r\n    hardSkillsNav: [],\r\n    education: [],\r\n    mainPageInfo: null,\r\n    experienceAside: [],\r\n    technologiesAside: [],\r\n    error: null,\r\n}"
                }
            ],
            "src/app/layout/store/github-projects-store/github-projects.action.ts": [
                {
                    "name": "GithubRepositoriesActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/github-projects-store/github-projects.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createActionGroup({\r\n    source: 'Repositories',\r\n    events: {\r\n        getRepositories: emptyProps(),\r\n        getRepositoriesSuccess: props<{ repositories: TGitHub[] }>(),\r\n        getRepositoriesError: props<{ error: unknown }>(),\r\n    },\r\n})"
                }
            ],
            "src/app/layout/store/github-projects-store/github-projects.reducer.ts": [
                {
                    "name": "githubRepositoriesReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/github-projects-store/github-projects.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n    githubState,\r\n    on(\r\n        GithubRepositoriesActions.getRepositoriesSuccess,\r\n        (state, { repositories }) => [...repositories],\r\n    ),\r\n    on(GithubRepositoriesActions.getRepositoriesError, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n)"
                },
                {
                    "name": "githubState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/github-projects-store/github-projects.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TGitHub[]",
                    "defaultValue": "[]"
                }
            ],
            "src/app/layout/store/index.ts": [
                {
                    "name": "globalSetReducersKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'globalSetReducers'"
                }
            ],
            "src/app/layout/store/spinner-store/spinner.actions.ts": [
                {
                    "name": "hideSpinner",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/spinner-store/spinner.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[SPINNER] Hide spinner')"
                },
                {
                    "name": "showSpinner",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/spinner-store/spinner.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[SPINNER] Show spinner')"
                }
            ],
            "src/app/layout/store/images-store/images.actions.ts": [
                {
                    "name": "ImagesActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/images-store/images.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createActionGroup({\r\n    source: 'IMAGES',\r\n    events: {\r\n        'Get Logo': props<{ mode: boolean }>(),\r\n        'Get Logo Success': props<{ imageUrl: string }>(),\r\n        'Get Logo Failure': props<{ error: any }>(),\r\n\r\n        'Get Profile Img': props<{ mode: boolean }>(),\r\n        'Get Profile Img Success': props<{ imageUrl: string }>(),\r\n        'Get Profile Img Failure': props<{ error: any }>(),\r\n\r\n        'Get Close Img': props<{ mode: boolean }>(),\r\n        'Get Close Img Success': props<{ imageUrl: string }>(),\r\n        'Get Close Img Failure': props<{ error: any }>(),\r\n\r\n        'Load Themeless Pictures Images': props<any>(),\r\n        'Load Themeless Pictures Images Success': props<{\r\n            darkModeImages: string[];\r\n            whiteModeImages: string[];\r\n        }>(),\r\n        'Load Themeless Pictures Images Failure': props<{ error: any }>(),\r\n\r\n        'Set Dark Mode Images': props<{ images: string[] }>(),\r\n        'Set Dark Mode Images Success': props<{ images: string[] }>(),\r\n        'Set Dark Mode Images Failure': props<{ error: any }>(),\r\n\r\n        'Set White Mode Images': props<{ images: string[] }>(),\r\n        'Set White Mode Images Success': props<{ images: string[] }>(),\r\n        'Set White Mode Images Failure': props<{ error: any }>(),\r\n    },\r\n})"
                }
            ],
            "src/app/layout/store/language-selector-store/language.reducers.ts": [
                {
                    "name": "initialLanguageState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/language-selector-store/language.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LanguageState",
                    "defaultValue": "{\r\n    language: 'ru',\r\n}"
                },
                {
                    "name": "languageReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/language-selector-store/language.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n    initialLanguageState,\r\n    on(setLanguageSuccess, (state, { language }) => ({\r\n        ...state,\r\n        language,\r\n    })),\r\n)"
                }
            ],
            "src/app/layout/store/spinner-store/spinner.reducer.ts": [
                {
                    "name": "initialSpinnerModeState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/spinner-store/spinner.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ISpinner",
                    "defaultValue": "{\r\n    isSpinnerOn: false,\r\n}"
                },
                {
                    "name": "spinnerReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/spinner-store/spinner.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n    initialSpinnerModeState,\r\n    on(showSpinner, (state) => ({\r\n        ...state,\r\n        isSpinnerOn: true,\r\n    })),\r\n    on(hideSpinner, (state) => ({\r\n        ...state,\r\n        isSpinnerOn: false,\r\n    })),\r\n)"
                }
            ],
            "src/app/layout/store/images-store/images.reducers.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/images-store/images.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LogoState",
                    "defaultValue": "{\r\n    imageUrl: '',\r\n    profileImageUrl: '',\r\n    closeImageUrl: '',\r\n    darkModeImages: [],\r\n    whiteModeImages: [],\r\n    error: null,\r\n}"
                },
                {
                    "name": "logoReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/images-store/images.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n    initialState,\r\n    on(ImagesActions.getLogoSuccess, (state, { imageUrl }) => ({\r\n        ...state,\r\n        imageUrl,\r\n        error: null,\r\n    })),\r\n    on(ImagesActions.getLogoFailure, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(ImagesActions.getProfileImgSuccess, (state, { imageUrl }) => ({\r\n        ...state,\r\n        profileImageUrl: imageUrl,\r\n        error: null,\r\n    })),\r\n    on(ImagesActions.getProfileImgFailure, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(ImagesActions.getCloseImgSuccess, (state, { imageUrl }) => ({\r\n        ...state,\r\n        closeImageUrl: imageUrl,\r\n        error: null,\r\n    })),\r\n    on(ImagesActions.getCloseImgFailure, (state, { error }) => ({\r\n        ...state,\r\n        error,\r\n    })),\r\n    on(\r\n        ImagesActions.loadThemelessPicturesImagesSuccess,\r\n        (state, { darkModeImages, whiteModeImages }) => ({\r\n            ...state,\r\n            darkModeImages,\r\n            whiteModeImages,\r\n            error: null,\r\n        }),\r\n    ),\r\n    on(\r\n        ImagesActions.loadThemelessPicturesImagesFailure,\r\n        (state, { error }) => ({\r\n            ...state,\r\n            error,\r\n        }),\r\n    ),\r\n    on(ImagesActions.setDarkModeImages, (state, { images }) => ({\r\n        ...state,\r\n        darkModeImages: images,\r\n    })),\r\n    on(ImagesActions.setWhiteModeImages, (state, { images }) => ({\r\n        ...state,\r\n        whiteModeImages: images,\r\n    })),\r\n)"
                }
            ],
            "src/app/layout/store/language-selector-store/language.selectors.ts": [
                {
                    "name": "languageFeatureSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/language-selector-store/language.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<LanguageState>('language')"
                },
                {
                    "name": "languageSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/language-selector-store/language.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    languageFeatureSelector,\r\n    (state: LanguageState) => state.language ?? 'ru',\r\n)"
                }
            ],
            "src/app/core/utils/animations/translate-fade-out.ts": [
                {
                    "name": "listAnimation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/utils/animations/translate-fade-out.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "trigger('listAnimation', [\r\n    transition('* => *', [\r\n        query(\r\n            ':leave',\r\n            stagger('300ms', [\r\n                animate(\r\n                    '1s ease-out',\r\n                    keyframes([\r\n                        style({\r\n                            opacity: 1,\r\n                            transform: 'translateY(0)',\r\n                            offset: 0,\r\n                        }),\r\n                        style({\r\n                            opacity: 0.5,\r\n                            transform: 'translateY(35px)',\r\n                            offset: 0.3,\r\n                        }),\r\n                        style({\r\n                            opacity: 0,\r\n                            transform: 'translateY(-75%)',\r\n                            offset: 1.0,\r\n                        }),\r\n                    ]),\r\n                ),\r\n            ]),\r\n            { optional: true },\r\n        ),\r\n        query(\r\n            ':enter',\r\n            stagger('300ms', [\r\n                animate(\r\n                    '1s ease-in',\r\n                    keyframes([\r\n                        style({\r\n                            opacity: 0,\r\n                            transform: 'translateY(-75%)',\r\n                            offset: 0,\r\n                        }),\r\n                        style({\r\n                            opacity: 0.5,\r\n                            transform: 'translateY(35px)',\r\n                            offset: 0.3,\r\n                        }),\r\n                        style({\r\n                            opacity: 1,\r\n                            transform: 'translateY(0)',\r\n                            offset: 1.0,\r\n                        }),\r\n                    ]),\r\n                ),\r\n            ]),\r\n            { optional: true },\r\n        ),\r\n    ]),\r\n])"
                }
            ],
            "src/express.tokens.ts": [
                {
                    "name": "REQUEST",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/express.tokens.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<Request>('REQUEST')"
                },
                {
                    "name": "RESPONSE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/express.tokens.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<Response>('RESPONSE')"
                }
            ],
            "src/app/core/utils/animations/router-animations.ts": [
                {
                    "name": "routeAnimations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/utils/animations/router-animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "trigger('routeAnimations', [\r\n    transition('* <=> *', [\r\n        style({ position: 'relative' }),\r\n        query(\r\n            ':enter, :leave',\r\n            [\r\n                style({\r\n                    position: 'absolute',\r\n                    top: 0,\r\n                    left: 0,\r\n                    width: '100%',\r\n                }),\r\n            ],\r\n            { optional: true },\r\n        ),\r\n        query(':enter', [style({ opacity: 0 })], { optional: true }),\r\n        query(':leave', [style({ opacity: 1 })], { optional: true }),\r\n        group([\r\n            query(\r\n                ':leave',\r\n                [animate('600ms ease-out', style({ opacity: 0 }))],\r\n                { optional: true },\r\n            ),\r\n            query(':enter', [animate('600ms ease-in', style({ opacity: 1 }))], {\r\n                optional: true,\r\n            }),\r\n        ]),\r\n    ]),\r\n])"
                }
            ],
            "src/app/layout/store/auth-store/auth.selectors.ts": [
                {
                    "name": "selectAuth",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/auth-store/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectAuthState,\r\n    (state: TAuthState) => state.user,\r\n)"
                },
                {
                    "name": "selectAuthState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/auth-store/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<TAuthState>('auth')"
                }
            ],
            "src/app/layout/store/firebase-store/firebase.selectors.ts": [
                {
                    "name": "selectBackendTech",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectFirebaseState,\r\n    (state: FirebaseState) => state.backendTech,\r\n)"
                },
                {
                    "name": "selectEducation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectFirebaseState,\r\n    (state: FirebaseState) => state.education,\r\n)"
                },
                {
                    "name": "selectError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectFirebaseState,\r\n    (state: FirebaseState) => state.error,\r\n)"
                },
                {
                    "name": "selectExperienceAside",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectFirebaseState,\r\n    (state: FirebaseState) => state.experienceAside,\r\n)"
                },
                {
                    "name": "selectFirebaseState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<FirebaseState>('firebase')"
                },
                {
                    "name": "selectFrontendTech",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectFirebaseState,\r\n    (state: FirebaseState) => state.frontendTech,\r\n)"
                },
                {
                    "name": "selectHardSkillsNav",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectFirebaseState,\r\n    (state: FirebaseState) => state.hardSkillsNav,\r\n)"
                },
                {
                    "name": "selectMainPageInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectFirebaseState,\r\n    (state: FirebaseState) => state.mainPageInfo,\r\n)"
                },
                {
                    "name": "selectNavigation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectFirebaseState,\r\n    (state: FirebaseState) => state.navigation,\r\n)"
                },
                {
                    "name": "selectOtherTech",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectFirebaseState,\r\n    (state: FirebaseState) => state.otherTech,\r\n)"
                },
                {
                    "name": "selectSocialMediaLinks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectFirebaseState,\r\n    (state: FirebaseState) => state.socialMediaLinks,\r\n)"
                },
                {
                    "name": "selectTechnologiesAside",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectFirebaseState,\r\n    (state: FirebaseState) => state.technologiesAside,\r\n)"
                },
                {
                    "name": "selectWorkExperience",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectFirebaseState,\r\n    (state: FirebaseState) => state.workExperience,\r\n)"
                }
            ],
            "src/app/layout/store/images-store/images.selectors.ts": [
                {
                    "name": "selectCloseImageUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/images-store/images.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectLogoState,\r\n    (state: LogoState) => state.closeImageUrl,\r\n)"
                },
                {
                    "name": "selectDarkModeImages",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/images-store/images.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectLogoState,\r\n    (state: LogoState) => state.darkModeImages,\r\n)"
                },
                {
                    "name": "selectImageUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/images-store/images.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectLogoState,\r\n    (state: LogoState) => state.imageUrl,\r\n)"
                },
                {
                    "name": "selectLogoError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/images-store/images.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectLogoState,\r\n    (state: LogoState) => state.error,\r\n)"
                },
                {
                    "name": "selectLogoState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/images-store/images.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<LogoState>('logo')"
                },
                {
                    "name": "selectProfileImageUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/images-store/images.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectLogoState,\r\n    (state: LogoState) => state.profileImageUrl,\r\n)"
                },
                {
                    "name": "selectWhiteModeImages",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/images-store/images.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectLogoState,\r\n    (state: LogoState) => state.whiteModeImages,\r\n)"
                }
            ],
            "src/app/layout/store/github-projects-store/github-projects.selector.ts": [
                {
                    "name": "selectGithubRepositories",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/github-projects-store/github-projects.selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectRepositoriesState,\r\n    (state: TGitHub[]) => state,\r\n)"
                },
                {
                    "name": "selectRepositoriesState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/github-projects-store/github-projects.selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<TGitHub[]>('github')"
                }
            ],
            "src/app/layout/store/experience-dialog-store/experience-dialog.selectors.ts": [
                {
                    "name": "selectIsModalOpen",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/experience-dialog-store/experience-dialog.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectModalState,\r\n    (state: ModalState) => state.isOpen,\r\n)"
                },
                {
                    "name": "selectModalData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/experience-dialog-store/experience-dialog.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectModalState,\r\n    (state: ModalState) => state.data,\r\n)"
                },
                {
                    "name": "selectModalState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/experience-dialog-store/experience-dialog.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ModalState>('experience')"
                }
            ],
            "src/app/layout/store/language-selector-store/language.actions.ts": [
                {
                    "name": "setLanguage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/language-selector-store/language.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[LANGUAGE_SELECTOR] Set mode')"
                },
                {
                    "name": "setLanguageSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/language-selector-store/language.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[LANGUAGE_SELECTOR] Set mode success',\r\n    (language: 'ru' | 'en') => ({ language }),\r\n)"
                }
            ],
            "src/app/layout/store/dark-mode-store/dark-mode.actions.ts": [
                {
                    "name": "setMode",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/dark-mode-store/dark-mode.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[DARK_MODE_SELECTOR] Set mode')"
                },
                {
                    "name": "setModeSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/dark-mode-store/dark-mode.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[DARK_MODE_SELECTOR] Set mode success',\r\n    (isDark: boolean) => ({ isDark }),\r\n)"
                }
            ],
            "src/app/layout/store/spinner-store/spinner.selector.ts": [
                {
                    "name": "spinnerFeatureSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/spinner-store/spinner.selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ISpinner>('spinner')"
                },
                {
                    "name": "spinnerSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/store/spinner-store/spinner.selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    spinnerFeatureSelector,\r\n    (state: ISpinner) => state.isSpinnerOn,\r\n)"
                }
            ],
            "src/app/core/utils/animations/start-cart-fade-in.ts": [
                {
                    "name": "startCardFadeIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/utils/animations/start-cart-fade-in.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "trigger('startCardFadeIn', [\r\n    state('void', style({ opacity: 0 })),\r\n    transition(':leave', [animate('1.5s', style({ opacity: 1 }))]),\r\n])"
                }
            ],
            "src/app/core/utils/animations/start-cart-fade-out.ts": [
                {
                    "name": "startCardFadeOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/utils/animations/start-cart-fade-out.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "trigger('startCardFadeOut', [\r\n    state('void', style({ opacity: 1 })),\r\n    transition(':leave', [animate('1.5s', style({ opacity: 0 }))]),\r\n])"
                }
            ]
        },
        "groupedFunctions": {
            "server.ts": [
                {
                    "name": "app",
                    "file": "server.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "express.Express"
                },
                {
                    "name": "run",
                    "file": "server.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "void"
                }
            ],
            "src/app/layout/store/index.ts": [
                {
                    "name": "globalSetReducers",
                    "file": "src/app/layout/store/index.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "GlobalState",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/app.config.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "file": "src/app/app.config.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/core/enum/route.enum.ts": [
                {
                    "name": "ERoute",
                    "childs": [
                        {
                            "name": "AUTH",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "auth"
                        },
                        {
                            "name": "LAYOUT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "layout"
                        },
                        {
                            "name": "MAIN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "main"
                        },
                        {
                            "name": "PROJECTS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "projects"
                        },
                        {
                            "name": "EXPERIENCE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "experience"
                        },
                        {
                            "name": "TECHNOLOGIES",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "technologies"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/enum/route.enum.ts"
                }
            ],
            "src/app/core/enum/modal-dialog.base.enum.ts": [
                {
                    "name": "ModalDialogResult",
                    "childs": [
                        {
                            "name": "Opened",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Confirmed",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Closed",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/enum/modal-dialog.base.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/layout/store/model/auth-state.type.ts": [
                {
                    "name": "TAuthState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/layout/store/model/auth-state.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/layout/store/model/auth-user.type.ts": [
                {
                    "name": "TAuthUser",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/layout/store/model/auth-user.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/layout/store/model/dark-mode.type.ts": [
                {
                    "name": "TDarkMode",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/layout/store/model/dark-mode.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/core/models/experience-aside.type.ts": [
                {
                    "name": "TExperienceAside",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/models/experience-aside.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/core/models/github.type.ts": [
                {
                    "name": "TGitHub",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/models/github.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/layout/store/model/languages.type.ts": [
                {
                    "name": "TLanguages",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/layout/store/model/languages.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/layout/store/model/localstorage-user.type.ts": [
                {
                    "name": "TLocalstorageUser",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/layout/store/model/localstorage-user.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/layout/store/model/profile.type.ts": [
                {
                    "name": "TProfile",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/layout/store/model/profile.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/core/models/tecnologies.type.ts": [
                {
                    "name": "TTechnologies",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/models/tecnologies.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/core/models/technologies-aside.type.ts": [
                {
                    "name": "TTechnologiesAside",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/models/technologies-aside.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "server.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "app",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "run",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/directives/even-column.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "EvenColumnDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/enum/modal-dialog.base.enum.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ModalDialogBase",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/loading.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "LoadingInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/contacts.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IContacts",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/cv-format.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICvFormat",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/education-place-name.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IEducationPlaceName",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/experience-aside.type.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TExperienceAside",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/experience.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IExperience",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/file-upload.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFileUpload",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/github-repository.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IGitHubRepository",
                "coveragePercent": 0,
                "coverageCount": "0/80",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/github.type.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TGitHub",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/main-page-info.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMainPageInfo",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/navigation.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "INavigation",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/profile-photo.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IProfilePhoto",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/snackbar.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISnackbar",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/social-media.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISocialMedia",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/technologies-aside.type.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TTechnologiesAside",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/technologies.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITechnologies",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/tecnologies.type.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TTechnologies",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/total-work-time.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITotalWorkTime",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/service/api/api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApiService",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/core/service/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/core/service/github/github.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GithubService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/service/local-storage/local-storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LocalStorageService",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "src/app/core/service/modal/modal.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModalService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/service/platform/platform.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PlatformService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/service/theme/theme.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/service/translation/translation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TranslationService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/utils/animations/bg-layout.animation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "blobFloat",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/utils/animations/fade-in-out-cards.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fadeInOutCards",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/utils/animations/router-animations.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routeAnimations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/utils/animations/start-cart-fade-in.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "startCardFadeIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/utils/animations/start-cart-fade-out.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "startCardFadeOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/utils/animations/translate-fade-out.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "listAnimation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/utils/firebase/firebase.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "firebaseConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/utils/firebase/firebase.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initializeFirebaseApp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/utils/guards/auth/auth.guard.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/custom-title-strategy.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CustomTitleStrategy",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/components/animation-bg/animation-bg.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AnimationBgComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/components/aside-navigation-experience/aside-navigation-experience.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AsideNavigationExperienceComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/components/aside-navigation-subtechnologies/aside-navigation-subtechnologies.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AsideNavigationSubtechnologiesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/components/aside-navigation-technologies/aside-navigation-technologies.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AsideNavigationTechnologiesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/components/dark-mode-toggle/dark-mode-toggle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DarkModeToggleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/components/experience-dialog/experience-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExperienceDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/components/first-time/first-time.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FirstTimeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/components/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/components/login-form/login-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/components/logout-form/logout-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LogoutFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/components/profile-logo/profile-logo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileLogoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/components/spinner/spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpinnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/pages/auth/auth.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/pages/experience/education-experience/education-experience.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EducationExperienceComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/pages/experience/experience-card/experience-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExperienceCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/pages/experience/experience.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExperienceComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/pages/experience/work-experience/work-experience.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WorkExperienceComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/pages/main/main.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/pages/notFound/notFound.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotFoundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/pages/projects/components/project-chips/project-chips.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProjectChipsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/pages/projects/projects.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProjectsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/pages/technologies/components/technology-card/technology-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TechnologyCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/pages/technologies/technologies.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TechnologiesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/auth-store/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AuthActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/auth-store/auth.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthEffects",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/auth-store/auth.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/auth-store/auth.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/auth-store/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAuth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/auth-store/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAuthState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/dark-mode-store/dark-mode.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setMode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/dark-mode-store/dark-mode.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setModeSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/dark-mode-store/dark-mode.reducers.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DarkModeState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/dark-mode-store/dark-mode.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "darkModeReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/dark-mode-store/dark-mode.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialDarkModeState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/dark-mode-store/dark-mode.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "darkModeFeatureSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/dark-mode-store/dark-mode.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "darkModeSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/experience-dialog-store/experience-dialog.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ExperienceActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/experience-dialog-store/experience-dialog.reducers.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ModalState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/experience-dialog-store/experience-dialog.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "experienceDialogReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/experience-dialog-store/experience-dialog.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/experience-dialog-store/experience-dialog.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectIsModalOpen",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/experience-dialog-store/experience-dialog.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectModalData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/experience-dialog-store/experience-dialog.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectModalState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/firebase-store/firebase.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FirebaseActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/firebase-store/firebase.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FirebaseEffects",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/firebase-store/firebase.reducers.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FirebaseState",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/firebase-store/firebase.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "firebaseReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/firebase-store/firebase.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialFirebaseState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectBackendTech",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectEducation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectExperienceAside",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectFirebaseState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectFrontendTech",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectHardSkillsNav",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMainPageInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectNavigation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectOtherTech",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSocialMediaLinks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTechnologiesAside",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/firebase-store/firebase.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectWorkExperience",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/github-projects-store/github-projects.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GithubRepositoriesActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/github-projects-store/github-projects.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GithubRepositoriesEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/github-projects-store/github-projects.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "githubRepositoriesReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/github-projects-store/github-projects.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "githubState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/github-projects-store/github-projects.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectGithubRepositories",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/github-projects-store/github-projects.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectRepositoriesState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/images-store/images.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ImagesActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/images-store/images.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ImagesEffects",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/images-store/images.reducers.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LogoState",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/images-store/images.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/images-store/images.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "logoReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/images-store/images.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCloseImageUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/images-store/images.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectDarkModeImages",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/images-store/images.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectImageUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/images-store/images.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLogoError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/images-store/images.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLogoState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/images-store/images.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProfileImageUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/images-store/images.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectWhiteModeImages",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GlobalState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/index.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "globalSetReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "globalSetReducersKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/language-selector-store/language.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setLanguage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/language-selector-store/language.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setLanguageSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/language-selector-store/language.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialLanguageState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/language-selector-store/language.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "languageReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/language-selector-store/language.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "languageFeatureSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/language-selector-store/language.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "languageSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/model/auth-state.type.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TAuthState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/model/auth-user.type.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TAuthUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/model/dark-mode.type.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TDarkMode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/model/language-state.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LanguageState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/model/languages.type.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TLanguages",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/model/localstorage-user.type.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TLocalstorageUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/model/logout-button.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILogoutButton",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/model/profile.type.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TProfile",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/model/spinner.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISpinner",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/spinner-store/spinner.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "hideSpinner",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/spinner-store/spinner.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "showSpinner",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/spinner-store/spinner.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialSpinnerModeState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/spinner-store/spinner.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "spinnerReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/spinner-store/spinner.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "spinnerFeatureSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/store/spinner-store/spinner.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "spinnerSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.development.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/express.tokens.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "REQUEST",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/express.tokens.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RESPONSE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/main.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bootstrap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}